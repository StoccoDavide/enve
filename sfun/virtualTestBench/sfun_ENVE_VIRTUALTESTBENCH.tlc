%% file : sfun_ENVE_VIRTUALTESTBENCH.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for sfun_ENVE_VIRTUALTESTBENCH
%% 
%% Simulink version      : 10.2 (R2020b) 29-Jul-2020
%% TLC file generated on : 19-Jan-2022 09:16:19

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'sfun_ENVE_VIRTUALTESTBENCH';
     def.OutputFcnSpec = 'void sfun_out(shellRF       u1[1], groundContact y1[1], double        p7[1], double        p8[1]) ';
     def.StartFcnSpec = 'void sfun_init(double p1[1], double p2[1], double p3[1], double p4[1], double p5[1], double p6[1]) ';
     def.TerminateFcnSpec = 'void sfun_end()';
     def.HeaderFiles = {'sfun_types.h', 'sfun_interface.h', 'sfun_shellVehicle.hh'};
     def.SourceFiles = {'sfun_interface.cc', 'sfun_shellVehicle.cc'};
     def.HostLibFiles = {'./../../lib/dll/libenve_osx.dylib'};
     def.IncPaths = {'./include_sfun', './../src'};
     def.SrcPaths = {'./src_sfun', './../src'};
     def.LibPaths = {'./../../lib/dll'};
     def.Options.language = 'C++';
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements sfun_ENVE_VIRTUALTESTBENCH "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C++
    %if ::GenCPP==0 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C++ Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("sfun_ENVE_VIRTUALTESTBENCH_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int sfun_ENVE_VIRTUALTESTBENCH_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** u1BUS, int_T u1BUSWidth);
        extern int sfun_ENVE_VIRTUALTESTBENCH_wrapper_freemem(void** y1BUS, void** u1BUS);

        extern void sfun_ENVE_VIRTUALTESTBENCH_wrapper_Start(const real_T* p1, const real_T* p2, const real_T* p3, const real_T* p4, const real_T* p5, const real_T* p6);
        extern void sfun_ENVE_VIRTUALTESTBENCH_wrapper_Output(const void* u1, void* u1BUS,  void* y1, void* y1BUS, const real_T* p7, const real_T* p8);
        extern void sfun_ENVE_VIRTUALTESTBENCH_wrapper_Terminate(void);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("sfun_ENVE_VIRTUALTESTBENCH_wrapper", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "sfun_types.h"
        #include "sfun_interface.h"
        #include "sfun_shellVehicle.hh"

        %if IsModelReferenceSimTarget()
        extern "C" {
        %endif
        int sfun_ENVE_VIRTUALTESTBENCH_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** u1BUS, int_T u1BUSWidth) {
            *y1BUS = calloc(sizeof(groundContact), y1BUSWidth);
            if (*y1BUS==NULL) return -1;
            *u1BUS = calloc(sizeof(shellRF), u1BUSWidth);
            if (*u1BUS==NULL) return -1;
            return 0;
        }
        
        int sfun_ENVE_VIRTUALTESTBENCH_wrapper_freemem(void** y1BUS, void** u1BUS) {
            if (*y1BUS!=NULL) free(*y1BUS);
            *y1BUS = NULL;
            if (*u1BUS!=NULL) free(*u1BUS);
            *u1BUS = NULL;
            return 0;
        }
        %if IsModelReferenceSimTarget()
        }
        %endif

        %if IsModelReferenceSimTarget()
        extern "C" {
        %endif
        void sfun_ENVE_VIRTUALTESTBENCH_wrapper_Start(const real_T* p1, const real_T* p2, const real_T* p3, const real_T* p4, const real_T* p5, const real_T* p6) {
            sfun_init((real_T*)(p1), (real_T*)(p2), (real_T*)(p3), (real_T*)(p4), (real_T*)(p5), (real_T*)(p6));
        }
        %if IsModelReferenceSimTarget()
        }
        %endif

        %if IsModelReferenceSimTarget()
        extern "C" {
        %endif
        void sfun_ENVE_VIRTUALTESTBENCH_wrapper_Output(const void* u1, void* u1BUS,  void* y1, void* y1BUS, const real_T* p7, const real_T* p8) {

            /* Assign the Simulink structure u1 to user structure u1BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(0)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(shellRF *)u1BUS)", "(char *)u1", 0)>

            sfun_out((shellRF *) u1BUS, (groundContact *) y1BUS, (real_T*)(p7), (real_T*)(p8));

            /* Assign the user structure y1BUS to the Simulink structure y1 */
            %assign dTypeId = LibBlockOutputSignalDataTypeId(0)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y1", "(*(groundContact *)y1BUS)", 0)>
        }
        %if IsModelReferenceSimTarget()
        }
        %endif

        %if IsModelReferenceSimTarget()
        extern "C" {
        %endif
        void sfun_ENVE_VIRTUALTESTBENCH_wrapper_Terminate(void) {
            sfun_end();
        }
        %if IsModelReferenceSimTarget()
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibAddToCommonIncludes("sfun_types.h")>
        %<LibAddToCommonIncludes("sfun_interface.h")>
        %<LibAddToCommonIncludes("sfun_shellVehicle.hh")>
    %endif
    %<SLibAddToStaticSources("sfun_interface.cc")>
    %<SLibAddToStaticSources("sfun_shellVehicle.cc")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u1BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (sfun_ENVE_VIRTUALTESTBENCH_wrapper_allocmem(%<y1BUS_addr>, %<LibBlockOutputSignalWidth(0)>, %<u1BUS_addr>, %<LibBlockInputSignalWidth(0)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
        %assign p1_ptr = LibBlockParameterBaseAddr(p1)
        %assign p2_ptr = LibBlockParameterBaseAddr(p2)
        %assign p3_ptr = LibBlockParameterBaseAddr(p3)
        %assign p4_ptr = LibBlockParameterBaseAddr(p4)
        %assign p5_ptr = LibBlockParameterBaseAddr(p5)
        %assign p6_ptr = LibBlockParameterBaseAddr(p6)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        sfun_ENVE_VIRTUALTESTBENCH_wrapper_Start(%<p1_ptr>, %<p2_ptr>, %<p3_ptr>, %<p4_ptr>, %<p5_ptr>, %<p6_ptr>);
    %else
        %assign p1_ptr = LibBlockParameterBaseAddr(p1)
        %assign p2_ptr = LibBlockParameterBaseAddr(p2)
        %assign p3_ptr = LibBlockParameterBaseAddr(p3)
        %assign p4_ptr = LibBlockParameterBaseAddr(p4)
        %assign p5_ptr = LibBlockParameterBaseAddr(p5)
        %assign p6_ptr = LibBlockParameterBaseAddr(p6)
        %% 
        sfun_init((real_T*)%<p1_ptr>, (real_T*)%<p2_ptr>, (real_T*)%<p3_ptr>, (real_T*)%<p4_ptr>, (real_T*)%<p5_ptr>, (real_T*)%<p6_ptr>);
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u1BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign p7_ptr = LibBlockParameterBaseAddr(p7)
        %assign p8_ptr = LibBlockParameterBaseAddr(p8)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        sfun_ENVE_VIRTUALTESTBENCH_wrapper_Output(%<u1_ptr>, %<u1BUS_ptr>, %<y1_ptr>, %<y1BUS_ptr>, %<p7_ptr>, %<p8_ptr>);
    %else
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign p7_ptr = LibBlockParameterBaseAddr(p7)
        %assign p8_ptr = LibBlockParameterBaseAddr(p8)
        %% 
        sfun_out((shellRF*)%<u1_ptr>, %<y1_ptr>, (real_T*)%<p7_ptr>, (real_T*)%<p8_ptr>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        sfun_ENVE_VIRTUALTESTBENCH_wrapper_Terminate();
        %assign y1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (sfun_ENVE_VIRTUALTESTBENCH_wrapper_freemem(%<y1BUSBUS_addr>, %<u1BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
        %% 
        sfun_end();
    %endif
%endfunction

%% [EOF]
