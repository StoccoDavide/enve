<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="a00085" kind="class" language="C++" prot="public">
    <compoundname>enve::rib</compoundname>
    <basecompoundref prot="public" virt="non-virtual">disk</basecompoundref>
    <includes refid="a00002" local="no">enve_rib.hh</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a00085_1aaa9b09748c9ba3b5474eebaa2e847e4c" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="a00085" kindref="compound">rib</ref> const  &gt;</type>
        <definition>typedef std::shared_ptr&lt;rib const&gt; enve::rib::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <briefdescription>
<para>Pointer to rib object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="57" column="29" bodyfile="include/enve_rib.hh" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00085_1a51fe2388da331c3079f45f1655e86c6e" prot="public" static="no">
        <type>std::vector&lt; <ref refid="a00085_1aaa9b09748c9ba3b5474eebaa2e847e4c" kindref="member">rib::ptr</ref> &gt;</type>
        <definition>typedef std::vector&lt;rib::ptr&gt; enve::rib::vecptr</definition>
        <argsstring></argsstring>
        <name>vecptr</name>
        <briefdescription>
<para>Vector of pointers to rib objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="58" column="30" bodyfile="include/enve_rib.hh" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a00085_1a3ea19f42a9f1d36df36216bb8829b910" prot="private" static="no" mutable="no">
        <type>real</type>
        <definition>real enve::rib::m_width</definition>
        <argsstring></argsstring>
        <name>m_width</name>
        <briefdescription>
<para>Rib width (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="61" column="10" bodyfile="include/enve_rib.hh" bodystart="61" bodyend="-1"/>
        <referencedby refid="a00085_1a517c9a544cb726f5c510e466e332a44b" compoundref="a00035" startline="165" endline="172">copy</referencedby>
        <referencedby refid="a00085_1aefecf30015022cd81b3fec1b109c1d3e" compoundref="a00035" startline="209" endline="218">isApprox</referencedby>
        <referencedby refid="a00085_1a2d8ac0496517c3b9febd64ec962368bf" compoundref="a00035" startline="146" endline="160">operator=</referencedby>
        <referencedby refid="a00085_1ad858355272ad73057208b4052ddef9f2" compoundref="a00035" startline="177" endline="180">width</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00085_1a21be5d0b7ed69dfe64f6aa1f1a3e6703" prot="private" static="no" mutable="no">
        <type>real</type>
        <definition>real enve::rib::m_angle</definition>
        <argsstring></argsstring>
        <name>m_angle</name>
        <briefdescription>
<para>Rib inclination angle (rad) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="62" column="10" bodyfile="include/enve_rib.hh" bodystart="62" bodyend="-1"/>
        <referencedby refid="a00085_1aed5c4d8fd8ef8bf886fd0f6104a04856" compoundref="a00035" startline="185" endline="188">angle</referencedby>
        <referencedby refid="a00085_1a517c9a544cb726f5c510e466e332a44b" compoundref="a00035" startline="165" endline="172">copy</referencedby>
        <referencedby refid="a00085_1aefecf30015022cd81b3fec1b109c1d3e" compoundref="a00035" startline="209" endline="218">isApprox</referencedby>
        <referencedby refid="a00085_1a2d8ac0496517c3b9febd64ec962368bf" compoundref="a00035" startline="146" endline="160">operator=</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00085_1a9ae65f0bc0662f1856db0bb093991582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::~rib</definition>
        <argsstring>(void)</argsstring>
        <name>~rib</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Rib class destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="66" column="5" bodyfile="src/enve_rib.cc" bodystart="46" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="a00085_1a1fcb2181e9529078fd9a602be72ecbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(rib const &amp;)=default</argsstring>
        <name>rib</name>
        <param>
          <type><ref refid="a00085" kindref="compound">rib</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Rib copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="69" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00085_1a99e24d063ed6fa8bb4ec40bef6b1fff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(rib &amp;&amp;)=default</argsstring>
        <name>rib</name>
        <param>
          <type><ref refid="a00085" kindref="compound">rib</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Rib move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="72" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00085_1a9b3bdb39690f8a07228dcfecd1d4948f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(void)</argsstring>
        <name>rib</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Rib class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="75" column="5" bodyfile="src/enve_rib.cc" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="a00085_1acb5c230e80aedd3d6c20ac00075b9d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(real radius, plane const &amp;plane, real width, real angle)</argsstring>
        <name>rib</name>
        <param>
          <type>real</type>
          <declname>radius</declname>
          <briefdescription><para>Input rib radius </para>
</briefdescription>
        </param>
        <param>
          <type>plane const &amp;</type>
          <declname>plane</declname>
          <briefdescription><para>Input rib laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>width</declname>
          <briefdescription><para>Input rib normal to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>angle</declname>
          <briefdescription><para>Input rib normal to the laying plane </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rib class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="78" column="5" bodyfile="src/enve_rib.cc" bodystart="61" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="a00085_1a709ecc6a1c0f7f3f3af0a08b0a83cac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(real radius, plane const &amp;plane)</argsstring>
        <name>rib</name>
        <param>
          <type>real</type>
          <declname>radius</declname>
          <briefdescription><para>Input rib radius </para>
</briefdescription>
        </param>
        <param>
          <type>plane const &amp;</type>
          <declname>plane</declname>
          <briefdescription><para>Input rib laying plane </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rib class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="85" column="5" bodyfile="src/enve_rib.cc" bodystart="74" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="a00085_1a3eabe1238dd592e07cb8db78bd8b41b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(real radius, point const &amp;center, vec3 const &amp;normal, real width, real angle)</argsstring>
        <name>rib</name>
        <param>
          <type>real</type>
          <declname>radius</declname>
          <briefdescription><para>Input rib radius </para>
</briefdescription>
        </param>
        <param>
          <type>point const &amp;</type>
          <declname>center</declname>
          <briefdescription><para>Input rib center </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 const &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Input rib normal to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>width</declname>
          <briefdescription><para>Input rib normal to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>angle</declname>
          <briefdescription><para>Input rib normal to the laying plane </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rib class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="90" column="5" bodyfile="src/enve_rib.cc" bodystart="85" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="a00085_1ad3236099c3f1ccef9d18dcb227b6f11e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(real radius, point const &amp;center, vec3 const &amp;normal)</argsstring>
        <name>rib</name>
        <param>
          <type>real</type>
          <declname>radius</declname>
          <briefdescription><para>Input rib radius </para>
</briefdescription>
        </param>
        <param>
          <type>point const &amp;</type>
          <declname>center</declname>
          <briefdescription><para>Input rib center </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 const &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Input rib normal to the laying plane </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rib class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="99" column="5" bodyfile="src/enve_rib.cc" bodystart="99" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="a00085_1ae838df721115c71e1355c92081eca8a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(real radius, real center_x, real center_y, real center_z, real normal_x, real normal_y, real normal_z, real width, real angle)</argsstring>
        <name>rib</name>
        <param>
          <type>real</type>
          <declname>radius</declname>
          <briefdescription><para>Input rib radius </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>center_x</declname>
          <briefdescription><para>Input rib center x value </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>center_y</declname>
          <briefdescription><para>Input rib center y value </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>center_z</declname>
          <briefdescription><para>Input rib center z value </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>normal_x</declname>
          <briefdescription><para>Input rib normal x value to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>normal_y</declname>
          <briefdescription><para>Input rib normal y value to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>normal_z</declname>
          <briefdescription><para>Input rib normal z value to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>width</declname>
          <briefdescription><para>Input rib normal to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>angle</declname>
          <briefdescription><para>Input rib normal to the laying plane </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rib class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="106" column="5" bodyfile="src/enve_rib.cc" bodystart="111" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="a00085_1ae0cfc81388fe110c9e9776bdd448eb3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(real radius, real center_x, real center_y, real center_z, real normal_x, real normal_y, real normal_z)</argsstring>
        <name>rib</name>
        <param>
          <type>real</type>
          <declname>radius</declname>
          <briefdescription><para>Input rib radius </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>center_x</declname>
          <briefdescription><para>Input rib center x value </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>center_y</declname>
          <briefdescription><para>Input rib center y value </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>center_z</declname>
          <briefdescription><para>Input rib center z value </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>normal_x</declname>
          <briefdescription><para>Input rib normal x value to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>normal_y</declname>
          <briefdescription><para>Input rib normal y value to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>normal_z</declname>
          <briefdescription><para>Input rib normal z value to the laying plane </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rib class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="118" column="5" bodyfile="src/enve_rib.cc" bodystart="129" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="a00085_1a2d8ac0496517c3b9febd64ec962368bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00085" kindref="compound">rib</ref> &amp;</type>
        <definition>rib &amp; enve::rib::operator=</definition>
        <argsstring>(rib const &amp;rib_in)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="a00085" kindref="compound">rib</ref> const &amp;</type>
          <declname>rib_in</declname>
          <briefdescription><para>Input rib object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Equality operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="129" column="5" bodyfile="src/enve_rib.cc" bodystart="146" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="a00085_1a517c9a544cb726f5c510e466e332a44b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::rib::copy</definition>
        <argsstring>(rib const &amp;rib_in)</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="a00085" kindref="compound">rib</ref> const &amp;</type>
          <declname>rib_in</declname>
          <briefdescription><para>Input object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Copy rib object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="135" column="5" bodyfile="src/enve_rib.cc" bodystart="165" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="a00085_1ad858355272ad73057208b4052ddef9f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real const &amp;</type>
        <definition>real const  &amp; enve::rib::width</definition>
        <argsstring>(void) const</argsstring>
        <name>width</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get width coefficent scaling factor const reference (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="141" column="5" bodyfile="src/enve_rib.cc" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="a00085_1aed5c4d8fd8ef8bf886fd0f6104a04856" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real const &amp;</type>
        <definition>real const  &amp; enve::rib::angle</definition>
        <argsstring>(void) const</argsstring>
        <name>angle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get angle coefficent scaling factor const reference (rad) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="145" column="5" bodyfile="src/enve_rib.cc" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="a00085_1a64c18ecdbd65aef499aa5d03353cb745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>real &amp;</type>
        <definition>real &amp; enve::rib::width</definition>
        <argsstring>(void)</argsstring>
        <name>width</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Set width coefficient scaling factor reference (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="149" column="5" bodyfile="src/enve_rib.cc" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="a00085_1a1d751f7fdfed182a58cf4f65db85e9d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>real &amp;</type>
        <definition>real &amp; enve::rib::angle</definition>
        <argsstring>(void)</argsstring>
        <name>angle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Set angle coefficient scaling factor reference (rad) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="153" column="5" bodyfile="src/enve_rib.cc" bodystart="201" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="a00085_1aefecf30015022cd81b3fec1b109c1d3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::isApprox</definition>
        <argsstring>(rib const &amp;rib_in, real tolerance=EPSILON_LOW) const</argsstring>
        <name>isApprox</name>
        <param>
          <type><ref refid="a00085" kindref="compound">rib</ref> const &amp;</type>
          <declname>rib_in</declname>
          <briefdescription><para>Input object </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_LOW</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if objects are (almost) equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="157" column="5" bodyfile="src/enve_rib.cc" bodystart="209" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="a00085_1ac5a66a14f8c8efa354219f0be1c3f9df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::envelopRadial</definition>
        <argsstring>(segment const &amp;segment_in, real &amp;radial_area, vec3 &amp;radial_normal, real tolerance=EPSILON_LOW) const</argsstring>
        <name>envelopRadial</name>
        <param>
          <type>segment const &amp;</type>
          <declname>segment_in</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>radial_area</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>radial_normal</declname>
          <briefdescription><para>Input segment </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_LOW</defval>
          <briefdescription><para>tolarance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if objects are (almost) equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="164" column="5" bodyfile="src/enve_rib.cc" bodystart="223" bodyend="266"/>
        <referencedby refid="a00093_1a1cd14845c1c2903eadb41d5a86a2627f" compoundref="a00032" startline="1301" endline="1345">enve::shell::envelopTriangle</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Rib for wheel representation. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>disk</label>
      </node>
      <node id="1">
        <label>enve::rib</label>
        <link refid="a00085"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>disk</label>
      </node>
      <node id="1">
        <label>enve::rib</label>
        <link refid="a00085"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/enve_rib.hh" line="54" column="3" bodyfile="include/enve_rib.hh" bodystart="55" bodyend="171"/>
    <listofallmembers>
      <member refid="a00085_1aed5c4d8fd8ef8bf886fd0f6104a04856" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>angle</name></member>
      <member refid="a00085_1a1d751f7fdfed182a58cf4f65db85e9d1" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>angle</name></member>
      <member refid="a00085_1a517c9a544cb726f5c510e466e332a44b" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>copy</name></member>
      <member refid="a00085_1ac5a66a14f8c8efa354219f0be1c3f9df" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>envelopRadial</name></member>
      <member refid="a00085_1aefecf30015022cd81b3fec1b109c1d3e" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>isApprox</name></member>
      <member refid="a00085_1a21be5d0b7ed69dfe64f6aa1f1a3e6703" prot="private" virt="non-virtual"><scope>enve::rib</scope><name>m_angle</name></member>
      <member refid="a00085_1a3ea19f42a9f1d36df36216bb8829b910" prot="private" virt="non-virtual"><scope>enve::rib</scope><name>m_width</name></member>
      <member refid="a00085_1a2d8ac0496517c3b9febd64ec962368bf" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>operator=</name></member>
      <member refid="a00085_1aaa9b09748c9ba3b5474eebaa2e847e4c" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>ptr</name></member>
      <member refid="a00085_1a1fcb2181e9529078fd9a602be72ecbf9" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00085_1a99e24d063ed6fa8bb4ec40bef6b1fff4" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00085_1a9b3bdb39690f8a07228dcfecd1d4948f" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00085_1acb5c230e80aedd3d6c20ac00075b9d44" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00085_1a709ecc6a1c0f7f3f3af0a08b0a83cac5" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00085_1a3eabe1238dd592e07cb8db78bd8b41b5" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00085_1ad3236099c3f1ccef9d18dcb227b6f11e" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00085_1ae838df721115c71e1355c92081eca8a6" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00085_1ae0cfc81388fe110c9e9776bdd448eb3d" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00085_1a51fe2388da331c3079f45f1655e86c6e" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>vecptr</name></member>
      <member refid="a00085_1ad858355272ad73057208b4052ddef9f2" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>width</name></member>
      <member refid="a00085_1a64c18ecdbd65aef499aa5d03353cb745" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>width</name></member>
      <member refid="a00085_1a9ae65f0bc0662f1856db0bb093991582" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>~rib</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
