<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="a00055" kind="class" language="C++" prot="public">
    <compoundname>enve::rib</compoundname>
    <basecompoundref prot="public" virt="non-virtual">disk</basecompoundref>
    <includes refid="a00002" local="no">enve_rib.hh</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a00055_1aaa9b09748c9ba3b5474eebaa2e847e4c" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="a00055" kindref="compound">rib</ref> const  &gt;</type>
        <definition>typedef std::shared_ptr&lt;rib const&gt; enve::rib::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <briefdescription>
<para>Pointer to rib object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="64" column="29" bodyfile="include/enve_rib.hh" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00055_1a51fe2388da331c3079f45f1655e86c6e" prot="public" static="no">
        <type>std::vector&lt; <ref refid="a00055_1aaa9b09748c9ba3b5474eebaa2e847e4c" kindref="member">rib::ptr</ref> &gt;</type>
        <definition>typedef std::vector&lt;rib::ptr&gt; enve::rib::vecptr</definition>
        <argsstring></argsstring>
        <name>vecptr</name>
        <briefdescription>
<para>Vector of pointers to rib objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="65" column="30" bodyfile="include/enve_rib.hh" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a00055_1a3ea19f42a9f1d36df36216bb8829b910" prot="private" static="no" mutable="no">
        <type>real</type>
        <definition>real enve::rib::m_width</definition>
        <argsstring></argsstring>
        <name>m_width</name>
        <briefdescription>
<para>Rib width (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="68" column="10" bodyfile="include/enve_rib.hh" bodystart="68" bodyend="-1"/>
        <referencedby refid="a00055_1a517c9a544cb726f5c510e466e332a44b" compoundref="a00026" startline="158" endline="166">copy</referencedby>
        <referencedby refid="a00055_1aefecf30015022cd81b3fec1b109c1d3e" compoundref="a00026" startline="205" endline="214">isApprox</referencedby>
        <referencedby refid="a00055_1a2d8ac0496517c3b9febd64ec962368bf" compoundref="a00026" startline="138" endline="153">operator=</referencedby>
        <referencedby refid="a00055_1ad858355272ad73057208b4052ddef9f2" compoundref="a00026" startline="171" endline="175">width</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00055_1a21be5d0b7ed69dfe64f6aa1f1a3e6703" prot="private" static="no" mutable="no">
        <type>real</type>
        <definition>real enve::rib::m_angle</definition>
        <argsstring></argsstring>
        <name>m_angle</name>
        <briefdescription>
<para>Rib inclination angle (rad) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="69" column="10" bodyfile="include/enve_rib.hh" bodystart="69" bodyend="-1"/>
        <referencedby refid="a00055_1aed5c4d8fd8ef8bf886fd0f6104a04856" compoundref="a00026" startline="180" endline="184">angle</referencedby>
        <referencedby refid="a00055_1a517c9a544cb726f5c510e466e332a44b" compoundref="a00026" startline="158" endline="166">copy</referencedby>
        <referencedby refid="a00055_1aefecf30015022cd81b3fec1b109c1d3e" compoundref="a00026" startline="205" endline="214">isApprox</referencedby>
        <referencedby refid="a00055_1a2d8ac0496517c3b9febd64ec962368bf" compoundref="a00026" startline="138" endline="153">operator=</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00055_1a9ae65f0bc0662f1856db0bb093991582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::~rib</definition>
        <argsstring>(void)</argsstring>
        <name>~rib</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Rib class destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="73" column="5" bodyfile="src/enve_rib.cc" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1a1fcb2181e9529078fd9a602be72ecbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(rib const &amp;)=default</argsstring>
        <name>rib</name>
        <param>
          <type><ref refid="a00055" kindref="compound">rib</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Rib copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="76" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1a99e24d063ed6fa8bb4ec40bef6b1fff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(rib &amp;&amp;)=default</argsstring>
        <name>rib</name>
        <param>
          <type><ref refid="a00055" kindref="compound">rib</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Rib move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="79" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1a9b3bdb39690f8a07228dcfecd1d4948f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(void)</argsstring>
        <name>rib</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Rib class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="82" column="5" bodyfile="src/enve_rib.cc" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1acb5c230e80aedd3d6c20ac00075b9d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(real radius, plane const &amp;plane, real width, real angle)</argsstring>
        <name>rib</name>
        <param>
          <type>real</type>
          <declname>radius</declname>
          <briefdescription><para>Input rib radius </para>
</briefdescription>
        </param>
        <param>
          <type>plane const &amp;</type>
          <declname>plane</declname>
          <briefdescription><para>Input rib laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>width</declname>
          <briefdescription><para>Input rib normal to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>angle</declname>
          <briefdescription><para>Input rib normal to the laying plane </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rib class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="85" column="5" bodyfile="src/enve_rib.cc" bodystart="65" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1a709ecc6a1c0f7f3f3af0a08b0a83cac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(real radius, plane const &amp;plane)</argsstring>
        <name>rib</name>
        <param>
          <type>real</type>
          <declname>radius</declname>
          <briefdescription><para>Input rib radius </para>
</briefdescription>
        </param>
        <param>
          <type>plane const &amp;</type>
          <declname>plane</declname>
          <briefdescription><para>Input rib laying plane </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rib class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="92" column="5" bodyfile="src/enve_rib.cc" bodystart="78" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1a3eabe1238dd592e07cb8db78bd8b41b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(real radius, point const &amp;center, vec3 const &amp;normal, real width, real angle)</argsstring>
        <name>rib</name>
        <param>
          <type>real</type>
          <declname>radius</declname>
          <briefdescription><para>Input rib radius </para>
</briefdescription>
        </param>
        <param>
          <type>point const &amp;</type>
          <declname>center</declname>
          <briefdescription><para>Input rib center </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 const &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Input rib normal to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>width</declname>
          <briefdescription><para>Input rib normal to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>angle</declname>
          <briefdescription><para>Input rib normal to the laying plane </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rib class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="97" column="5" bodyfile="src/enve_rib.cc" bodystart="89" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1ae838df721115c71e1355c92081eca8a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(real radius, real center_x, real center_y, real center_z, real normal_x, real normal_y, real normal_z, real width, real angle)</argsstring>
        <name>rib</name>
        <param>
          <type>real</type>
          <declname>radius</declname>
          <briefdescription><para>Input rib radius </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>center_x</declname>
          <briefdescription><para>Input rib center x value </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>center_y</declname>
          <briefdescription><para>Input rib center y value </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>center_z</declname>
          <briefdescription><para>Input rib center z value </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>normal_x</declname>
          <briefdescription><para>Input rib normal x value to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>normal_y</declname>
          <briefdescription><para>Input rib normal y value to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>normal_z</declname>
          <briefdescription><para>Input rib normal z value to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>width</declname>
          <briefdescription><para>Input rib normal to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>angle</declname>
          <briefdescription><para>Input rib normal to the laying plane </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rib class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="106" column="5" bodyfile="src/enve_rib.cc" bodystart="103" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1ae0cfc81388fe110c9e9776bdd448eb3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(real radius, real center_x, real center_y, real center_z, real normal_x, real normal_y, real normal_z)</argsstring>
        <name>rib</name>
        <param>
          <type>real</type>
          <declname>radius</declname>
          <briefdescription><para>Input rib radius </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>center_x</declname>
          <briefdescription><para>Input rib center x value </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>center_y</declname>
          <briefdescription><para>Input rib center y value </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>center_z</declname>
          <briefdescription><para>Input rib center z value </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>normal_x</declname>
          <briefdescription><para>Input rib normal x value to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>normal_y</declname>
          <briefdescription><para>Input rib normal y value to the laying plane </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>normal_z</declname>
          <briefdescription><para>Input rib normal z value to the laying plane </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rib class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="118" column="5" bodyfile="src/enve_rib.cc" bodystart="121" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1a2d8ac0496517c3b9febd64ec962368bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00055" kindref="compound">rib</ref> &amp;</type>
        <definition>rib &amp; enve::rib::operator=</definition>
        <argsstring>(rib const &amp;rib_in)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="a00055" kindref="compound">rib</ref> const &amp;</type>
          <declname>rib_in</declname>
          <briefdescription><para>Input rib object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Equality operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="129" column="5" bodyfile="src/enve_rib.cc" bodystart="138" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1a517c9a544cb726f5c510e466e332a44b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::rib::copy</definition>
        <argsstring>(rib const &amp;rib_in)</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="a00055" kindref="compound">rib</ref> const &amp;</type>
          <declname>rib_in</declname>
          <briefdescription><para>Input object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Copy rib object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="135" column="5" bodyfile="src/enve_rib.cc" bodystart="158" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1ad858355272ad73057208b4052ddef9f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real const &amp;</type>
        <definition>real const  &amp; enve::rib::width</definition>
        <argsstring>(void) const</argsstring>
        <name>width</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get width coefficent scaling factor const reference (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="141" column="5" bodyfile="src/enve_rib.cc" bodystart="171" bodyend="175"/>
        <referencedby refid="a00055_1a77b3731cd7c4a6b80d820983f8c127e7" compoundref="a00026" startline="267" endline="377">envelopGeometric</referencedby>
        <referencedby refid="a00055_1a5f936affe9258ab39fba8dbdbe3971fe" compoundref="a00026" startline="432" endline="489">envelopSampling</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00055_1aed5c4d8fd8ef8bf886fd0f6104a04856" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real const &amp;</type>
        <definition>real const  &amp; enve::rib::angle</definition>
        <argsstring>(void) const</argsstring>
        <name>angle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get angle coefficent scaling factor const reference (rad) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="145" column="5" bodyfile="src/enve_rib.cc" bodystart="180" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1a64c18ecdbd65aef499aa5d03353cb745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>real &amp;</type>
        <definition>real &amp; enve::rib::width</definition>
        <argsstring>(void)</argsstring>
        <name>width</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Set width coefficient scaling factor reference (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="149" column="5" bodyfile="src/enve_rib.cc" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1a1d751f7fdfed182a58cf4f65db85e9d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>real &amp;</type>
        <definition>real &amp; enve::rib::angle</definition>
        <argsstring>(void)</argsstring>
        <name>angle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Set angle coefficient scaling factor reference (rad) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="153" column="5" bodyfile="src/enve_rib.cc" bodystart="197" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1aefecf30015022cd81b3fec1b109c1d3e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::isApprox</definition>
        <argsstring>(rib const &amp;rib_in, real tolerance=EPSILON_LOW) const</argsstring>
        <name>isApprox</name>
        <param>
          <type><ref refid="a00055" kindref="compound">rib</ref> const &amp;</type>
          <declname>rib_in</declname>
          <briefdescription><para>Input object </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_LOW</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if objects are (almost) equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="157" column="5" bodyfile="src/enve_rib.cc" bodystart="205" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1af16111667f9849ec042456b68d985b46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::envelop</definition>
        <argsstring>(triangleground::vecptr const &amp;localGround, affine const &amp;affine_in, std::string const method, point &amp;contactPoint, vec3 &amp;contactNormal, real &amp;contactFriction, real &amp;contactDepth, real &amp;contactArea, real &amp;contactVolume) const</argsstring>
        <name>envelop</name>
        <param>
          <type><ref refid="a00067_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> const &amp;</type>
          <declname>localGround</declname>
          <briefdescription><para>Local triangles candidate list </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>Input 4x4 affine transformation affine_in </para>
</briefdescription>
        </param>
        <param>
          <type>std::string const</type>
          <declname>method</declname>
          <briefdescription><para>Enveloping model (choose from: &quot;geometric&quot; or &quot;sampling&quot;) </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>contactPoint</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>contactNormal</declname>
          <briefdescription><para>Contact normal </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactFriction</declname>
          <briefdescription><para>Contact friction </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactDepth</declname>
          <briefdescription><para>Contact depth </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactArea</declname>
          <briefdescription><para>Contact area </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactVolume</declname>
          <briefdescription><para>Contact volume </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate rib contact with flat ground. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="164" column="5" bodyfile="src/enve_rib.cc" bodystart="219" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1a288a8819deb5303f0fb50f6863987940" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::envelop</definition>
        <argsstring>(ground::flat const &amp;localGround, affine const &amp;affine_in, std::string const method, point &amp;contactPoint, vec3 &amp;contactNormal, real &amp;contactFriction, real &amp;contactDepth, real &amp;contactArea, real &amp;contactVolume) const</argsstring>
        <name>envelop</name>
        <param>
          <type><ref refid="a00047" kindref="compound">ground::flat</ref> const &amp;</type>
          <declname>localGround</declname>
          <briefdescription><para>Local flat ground object </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>Input 4x4 affine transformation affine_in </para>
</briefdescription>
        </param>
        <param>
          <type>std::string const</type>
          <declname>method</declname>
          <briefdescription><para>Enveloping model (choose from: &quot;geometric&quot; or &quot;sampling&quot;) </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>contactPoint</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>contactNormal</declname>
          <briefdescription><para>Contact normal </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactFriction</declname>
          <briefdescription><para>Contact friction </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactDepth</declname>
          <briefdescription><para>Contact depth </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactArea</declname>
          <briefdescription><para>Contact area </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactVolume</declname>
          <briefdescription><para>Contact volume </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate rib contact with flat ground. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="178" column="5" bodyfile="src/enve_rib.cc" bodystart="243" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1a77b3731cd7c4a6b80d820983f8c127e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::envelopGeometric</definition>
        <argsstring>(triangleground::vecptr const &amp;localGround, affine const &amp;affine_in, point &amp;contactPoint, vec3 &amp;contactNormal, real &amp;contactFriction, real &amp;contactDepth, real &amp;contactArea, real &amp;contactVolume) const</argsstring>
        <name>envelopGeometric</name>
        <param>
          <type><ref refid="a00067_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> const &amp;</type>
          <declname>localGround</declname>
          <briefdescription><para>Local triangles candidate list </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>Input 4x4 affine transformation </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>contactPoint</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>contactNormal</declname>
          <briefdescription><para>Contact normal </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactFriction</declname>
          <briefdescription><para>Contact friction </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactDepth</declname>
          <briefdescription><para>Contact depth </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactArea</declname>
          <briefdescription><para>Contact area </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactVolume</declname>
          <briefdescription><para>Contact volume </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate rib contact with flat ground (geometric enveloping model) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="192" column="5" bodyfile="src/enve_rib.cc" bodystart="267" bodyend="377"/>
        <referencedby refid="a00055_1af16111667f9849ec042456b68d985b46" compoundref="a00026" startline="219" endline="238">envelop</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00055_1a451da7c72dbe89b38dd2d0e4bbbe5db9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::envelopGeometric</definition>
        <argsstring>(ground::flat const &amp;localGround, affine const &amp;affine_in, point &amp;contactPoint, vec3 &amp;contactNormal, real &amp;contactFriction, real &amp;contactDepth, real &amp;contactArea, real &amp;contactVolume) const</argsstring>
        <name>envelopGeometric</name>
        <param>
          <type><ref refid="a00047" kindref="compound">ground::flat</ref> const &amp;</type>
          <declname>localGround</declname>
          <briefdescription><para>Local flat ground object </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>Input 4x4 affine transformation </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>contactPoint</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>contactNormal</declname>
          <briefdescription><para>Contact normal </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactFriction</declname>
          <briefdescription><para>Contact friction </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactDepth</declname>
          <briefdescription><para>Contact depth </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactArea</declname>
          <briefdescription><para>Contact area </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactVolume</declname>
          <briefdescription><para>Contact volume </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate rib contact with flat ground (geometric enveloping model) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="205" column="5" bodyfile="src/enve_rib.cc" bodystart="382" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="a00055_1a5f936affe9258ab39fba8dbdbe3971fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::envelopSampling</definition>
        <argsstring>(triangleground::vecptr const &amp;localGround, affine const &amp;affine_in, point &amp;contactPoint, vec3 &amp;contactNormal, real &amp;contactFriction, real &amp;contactDepth, real &amp;contactArea, real &amp;contactVolume) const</argsstring>
        <name>envelopSampling</name>
        <param>
          <type><ref refid="a00067_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> const &amp;</type>
          <declname>localGround</declname>
          <briefdescription><para>Local triangles candidate list </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>Input 4x4 affine transformation </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>contactPoint</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>contactNormal</declname>
          <briefdescription><para>Contact normal </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactFriction</declname>
          <briefdescription><para>Contact friction </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactDepth</declname>
          <briefdescription><para>Contact depth </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactArea</declname>
          <briefdescription><para>Contact area </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactVolume</declname>
          <briefdescription><para>Contact volume </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate rib contact with flat ground (sampling enveloping model) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="218" column="5" bodyfile="src/enve_rib.cc" bodystart="432" bodyend="489"/>
        <referencedby refid="a00055_1af16111667f9849ec042456b68d985b46" compoundref="a00026" startline="219" endline="238">envelop</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00055_1a8242799f879447ad9dbf012f5a630781" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::envelopSampling</definition>
        <argsstring>(ground::flat const &amp;localGround, affine const &amp;affine_in, point &amp;contactPoint, vec3 &amp;contactNormal, real &amp;contactFriction, real &amp;contactDepth, real &amp;contactArea, real &amp;contactVolume) const</argsstring>
        <name>envelopSampling</name>
        <param>
          <type><ref refid="a00047" kindref="compound">ground::flat</ref> const &amp;</type>
          <declname>localGround</declname>
          <briefdescription><para>Local flat ground object </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>Input 4x4 affine transformation </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>contactPoint</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>contactNormal</declname>
          <briefdescription><para>Contact normal </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactFriction</declname>
          <briefdescription><para>Contact friction </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactDepth</declname>
          <briefdescription><para>Contact depth </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactArea</declname>
          <briefdescription><para>Contact area </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactVolume</declname>
          <briefdescription><para>Contact volume </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate rib contact with flat ground (sampling enveloping model) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="231" column="5" bodyfile="src/enve_rib.cc" bodystart="494" bodyend="551"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="a00055_1a66b6099b1c7f6d5bb96108cf5d2276b9" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::samplingLine</definition>
        <argsstring>(triangleground::vecptr const &amp;localGround, point const &amp;origin, vec3 const &amp;direction, point &amp;contactPoint, vec3 &amp;contactNormal, real &amp;contactFriction) const</argsstring>
        <name>samplingLine</name>
        <param>
          <type><ref refid="a00067_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> const &amp;</type>
          <declname>localGround</declname>
          <briefdescription><para>Local triangles candidate list </para>
</briefdescription>
        </param>
        <param>
          <type>point const &amp;</type>
          <declname>origin</declname>
          <briefdescription><para>Sampling line origin </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 const &amp;</type>
          <declname>direction</declname>
          <briefdescription><para>Sampling line direction </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>contactPoint</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>contactNormal</declname>
          <briefdescription><para>Contact normal </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactFriction</declname>
          <briefdescription><para>Contact friction </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate contact through line intersection envelop model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="245" column="5" bodyfile="src/enve_rib.cc" bodystart="556" bodyend="620"/>
        <referencedby refid="a00055_1a5f936affe9258ab39fba8dbdbe3971fe" compoundref="a00026" startline="432" endline="489">envelopSampling</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00055_1ad3141e45ab81272c1bfa2de2a2b04e12" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::samplingLine</definition>
        <argsstring>(ground::flat const &amp;localGround, point const &amp;origin, vec3 const &amp;direction, point &amp;contactPoint, vec3 &amp;contactNormal, real &amp;contactFriction) const</argsstring>
        <name>samplingLine</name>
        <param>
          <type><ref refid="a00047" kindref="compound">ground::flat</ref> const &amp;</type>
          <declname>localGround</declname>
          <briefdescription><para>Local flat ground object </para>
</briefdescription>
        </param>
        <param>
          <type>point const &amp;</type>
          <declname>origin</declname>
          <briefdescription><para>Sampling line origin </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 const &amp;</type>
          <declname>direction</declname>
          <briefdescription><para>Sampling line direction </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>contactPoint</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>contactNormal</declname>
          <briefdescription><para>Contact normal </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contactFriction</declname>
          <briefdescription><para>Contact friction </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate contact through line intersection envelop model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_rib.hh" line="256" column="5" bodyfile="src/enve_rib.cc" bodystart="625" bodyend="645"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Rib for wheel representation. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>disk</label>
      </node>
      <node id="1">
        <label>enve::rib</label>
        <link refid="a00055"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>disk</label>
      </node>
      <node id="1">
        <label>enve::rib</label>
        <link refid="a00055"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/enve_rib.hh" line="61" column="3" bodyfile="include/enve_rib.hh" bodystart="62" bodyend="265"/>
    <listofallmembers>
      <member refid="a00055_1aed5c4d8fd8ef8bf886fd0f6104a04856" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>angle</name></member>
      <member refid="a00055_1a1d751f7fdfed182a58cf4f65db85e9d1" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>angle</name></member>
      <member refid="a00055_1a517c9a544cb726f5c510e466e332a44b" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>copy</name></member>
      <member refid="a00055_1af16111667f9849ec042456b68d985b46" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>envelop</name></member>
      <member refid="a00055_1a288a8819deb5303f0fb50f6863987940" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>envelop</name></member>
      <member refid="a00055_1a77b3731cd7c4a6b80d820983f8c127e7" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>envelopGeometric</name></member>
      <member refid="a00055_1a451da7c72dbe89b38dd2d0e4bbbe5db9" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>envelopGeometric</name></member>
      <member refid="a00055_1a5f936affe9258ab39fba8dbdbe3971fe" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>envelopSampling</name></member>
      <member refid="a00055_1a8242799f879447ad9dbf012f5a630781" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>envelopSampling</name></member>
      <member refid="a00055_1aefecf30015022cd81b3fec1b109c1d3e" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>isApprox</name></member>
      <member refid="a00055_1a21be5d0b7ed69dfe64f6aa1f1a3e6703" prot="private" virt="non-virtual"><scope>enve::rib</scope><name>m_angle</name></member>
      <member refid="a00055_1a3ea19f42a9f1d36df36216bb8829b910" prot="private" virt="non-virtual"><scope>enve::rib</scope><name>m_width</name></member>
      <member refid="a00055_1a2d8ac0496517c3b9febd64ec962368bf" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>operator=</name></member>
      <member refid="a00055_1aaa9b09748c9ba3b5474eebaa2e847e4c" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>ptr</name></member>
      <member refid="a00055_1a1fcb2181e9529078fd9a602be72ecbf9" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00055_1a99e24d063ed6fa8bb4ec40bef6b1fff4" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00055_1a9b3bdb39690f8a07228dcfecd1d4948f" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00055_1acb5c230e80aedd3d6c20ac00075b9d44" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00055_1a709ecc6a1c0f7f3f3af0a08b0a83cac5" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00055_1a3eabe1238dd592e07cb8db78bd8b41b5" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00055_1ae838df721115c71e1355c92081eca8a6" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00055_1ae0cfc81388fe110c9e9776bdd448eb3d" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00055_1a66b6099b1c7f6d5bb96108cf5d2276b9" prot="private" virt="non-virtual"><scope>enve::rib</scope><name>samplingLine</name></member>
      <member refid="a00055_1ad3141e45ab81272c1bfa2de2a2b04e12" prot="private" virt="non-virtual"><scope>enve::rib</scope><name>samplingLine</name></member>
      <member refid="a00055_1a51fe2388da331c3079f45f1655e86c6e" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>vecptr</name></member>
      <member refid="a00055_1ad858355272ad73057208b4052ddef9f2" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>width</name></member>
      <member refid="a00055_1a64c18ecdbd65aef499aa5d03353cb745" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>width</name></member>
      <member refid="a00055_1a9ae65f0bc0662f1856db0bb093991582" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>~rib</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
