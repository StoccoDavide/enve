<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="a00070" kind="class" language="C++" prot="public">
    <compoundname>enve::shell</compoundname>
    <includes refid="a00008" local="no">enve_shell.hh</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a00070_1af27992d971057759d268f102975d62fb" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="a00070" kindref="compound">shell</ref> const  &gt;</type>
        <definition>typedef std::shared_ptr&lt;shell const&gt; enve::shell::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <qualifiedname>enve::shell::ptr</qualifiedname>
        <briefdescription>
<para>Pointer to shell object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="62" column="29" bodyfile="include/enve_shell.hh" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00070_1a14b3fa61d852ebaabd3603818d74ca6a" prot="public" static="no">
        <type>std::vector&lt; <ref refid="a00070_1af27992d971057759d268f102975d62fb" kindref="member">shell::ptr</ref> &gt;</type>
        <definition>typedef std::vector&lt;shell::ptr&gt; enve::shell::vecptr</definition>
        <argsstring></argsstring>
        <name>vecptr</name>
        <qualifiedname>enve::shell::vecptr</qualifiedname>
        <briefdescription>
<para>Vector of pointers to shell objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="63" column="30" bodyfile="include/enve_shell.hh" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a00070_1a0fc8caf160157febbc5fa0ee0b4ea0ad" prot="private" static="no" mutable="no">
        <type>affine</type>
        <definition>affine enve::shell::m_affine</definition>
        <argsstring></argsstring>
        <name>m_affine</name>
        <qualifiedname>enve::shell::m_affine</qualifiedname>
        <briefdescription>
<para>Shell reference frame (ISO) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="66" column="38" bodyfile="include/enve_shell.hh" bodystart="66" bodyend="-1"/>
        <referencedby refid="a00070_1a3758f1248a4e9a9487682560d75ae823" compoundref="a00026" startline="420" endline="426">eulerAngles</referencedby>
        <referencedby refid="a00070_1ad49487850eb0510d7b068f91501ca836" compoundref="a00026" startline="325" endline="329">linear</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="926" endline="1031">print</referencedby>
        <referencedby refid="a00070_1a25ad9b63a2daea89ab6b17e949028d8d" compoundref="a00026" startline="305" endline="311">rotate</referencedby>
        <referencedby refid="a00070_1acd3e5c07070586785043b991f4ebcd3b" compoundref="a00026" startline="316" endline="320">rotation</referencedby>
        <referencedby refid="a00070_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" compoundref="a00026" startline="56" endline="70">shell</referencedby>
        <referencedby refid="a00070_1a5ea27e946e4bae2651823ff03a605665" compoundref="a00026" startline="334" endline="340">transform</referencedby>
        <referencedby refid="a00070_1ab8206d37a830c82ad372d3276556630a" compoundref="a00026" startline="356" endline="360">transformation</referencedby>
        <referencedby refid="a00070_1a812b5a7947d74eff88e5b9cfe24c9ef0" compoundref="a00026" startline="286" endline="291">translate</referencedby>
        <referencedby refid="a00070_1a3d0282a1133a19e3e1ae06f91b35b194" compoundref="a00026" startline="296" endline="300">translation</referencedby>
        <referencedby refid="a00070_1a2752d2f553b89f2b722c14f98380b025" compoundref="a00026" startline="451" endline="459">updateBBox</referencedby>
        <referencedby refid="a00070_1ad7868ccdd90b807c75684cb51c256d03" compoundref="a00026" startline="393" endline="397">x</referencedby>
        <referencedby refid="a00070_1a1de4c83db18282e37892c7adb0224232" compoundref="a00026" startline="402" endline="406">y</referencedby>
        <referencedby refid="a00070_1a79039f854236a5ae427da3f0868f988a" compoundref="a00026" startline="411" endline="415">z</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00070_1ac12fbcd8d579d4e0e6cb3744f27b3691" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="a00062" kindref="compound">rib</ref> &gt;</type>
        <definition>std::vector&lt;rib&gt; enve::shell::m_ribs</definition>
        <argsstring></argsstring>
        <name>m_ribs</name>
        <qualifiedname>enve::shell::m_ribs</qualifiedname>
        <briefdescription>
<para>Shell ribs vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="67" column="33" bodyfile="include/enve_shell.hh" bodystart="67" bodyend="-1"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="926" endline="1031">print</referencedby>
        <referencedby refid="a00070_1ae48557597d39b647eac55a03704bdfc3" compoundref="a00026" startline="898" endline="909">relativeAngles</referencedby>
        <referencedby refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" compoundref="a00026" startline="89" endline="133">resize</referencedby>
        <referencedby refid="a00070_1af3b256c4d6bb48cc12142e9e940d1b81" compoundref="a00026" startline="264" endline="270">ribAngle</referencedby>
        <referencedby refid="a00070_1ad8a3d3f336041aae315b43022a7dbc3c" compoundref="a00026" startline="242" endline="248">ribCenter</referencedby>
        <referencedby refid="a00070_1aadb3a2be11b94f1273596ed709fc9e23" compoundref="a00026" startline="231" endline="237">ribRadius</referencedby>
        <referencedby refid="a00070_1a43a508efabf7462e0fd13262a39a47b4" compoundref="a00026" startline="253" endline="259">ribWidth</referencedby>
        <referencedby refid="a00070_1ad9280ec1aea116a96674f6a1f9df7fe6" compoundref="a00026" startline="475" endline="519">setup</referencedby>
        <referencedby refid="a00070_1aaeafa8ac9f588ebdf3f2b8722dde9290" compoundref="a00026" startline="138" endline="142">size</referencedby>
        <referencedby refid="a00070_1a1eaaa97bbc0fd4bb414b3945857ac421" compoundref="a00026" startline="1036" endline="1077">updateRibsCandidates</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00070_1a442a1c35765c1b3c01a4e20772fddef9" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="a00066" kindref="compound">shape</ref> &gt;</type>
        <definition>std::shared_ptr&lt;shape&gt; enve::shell::m_shape</definition>
        <argsstring></argsstring>
        <name>m_shape</name>
        <qualifiedname>enve::shell::m_shape</qualifiedname>
        <briefdescription>
<para>Shell shape. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="68" column="31" bodyfile="include/enve_shell.hh" bodystart="68" bodyend="-1"/>
        <referencedby refid="a00070_1a968cb22f2dddc6ed28d29fe61bfb9f25" compoundref="a00026" startline="185" endline="191">checkWidthBound</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="926" endline="1031">print</referencedby>
        <referencedby refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" compoundref="a00026" startline="89" endline="133">resize</referencedby>
        <referencedby refid="a00070_1a4bbb973b459c409e07100b9f526d31f2" compoundref="a00026" startline="219" endline="226">surfaceAngle</referencedby>
        <referencedby refid="a00070_1a9ff4b3d279cf3bca199d71b6829bb10f" compoundref="a00026" startline="207" endline="214">surfaceDerivative</referencedby>
        <referencedby refid="a00070_1ae545ab83f69df117efd3aefc98905b58" compoundref="a00026" startline="158" endline="162">surfaceMaxRadius</referencedby>
        <referencedby refid="a00070_1a041572d89d883b768eb195b61775e99d" compoundref="a00026" startline="167" endline="171">surfaceMaxWidth</referencedby>
        <referencedby refid="a00070_1afdf0e745ae4a5dbbc3daca2af53cd2d1" compoundref="a00026" startline="196" endline="202">surfaceRadius</referencedby>
        <referencedby refid="a00070_1a72cfa8296a664a3d3b538f7c97f187a4" compoundref="a00026" startline="176" endline="180">surfaceWidth</referencedby>
        <referencedby refid="a00070_1a2752d2f553b89f2b722c14f98380b025" compoundref="a00026" startline="451" endline="459">updateBBox</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00070_1a1950f8b6966e0277bf7b9266bb8929af" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; aabb &gt;</type>
        <definition>std::shared_ptr&lt;aabb&gt; enve::shell::m_aabb</definition>
        <argsstring></argsstring>
        <name>m_aabb</name>
        <qualifiedname>enve::shell::m_aabb</qualifiedname>
        <briefdescription>
<para>Shell bounding aabb (must be transformed in the mesh reference frame before intersection!) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="69" column="32" bodyfile="include/enve_shell.hh" bodystart="69" bodyend="-1"/>
        <referencedby refid="a00070_1ac9d1d2c263ae78a9b221120262cd9454" compoundref="a00026" startline="442" endline="446">BBox</referencedby>
        <referencedby refid="a00070_1ad9280ec1aea116a96674f6a1f9df7fe6" compoundref="a00026" startline="475" endline="519">setup</referencedby>
        <referencedby refid="a00070_1a2752d2f553b89f2b722c14f98380b025" compoundref="a00026" startline="451" endline="459">updateBBox</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00070_1a9bd07491e1b481f02a5d7206b34cf346" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="a00058" kindref="compound">output</ref> &gt;</type>
        <definition>std::vector&lt;output&gt; enve::shell::m_out</definition>
        <argsstring></argsstring>
        <name>m_out</name>
        <qualifiedname>enve::shell::m_out</qualifiedname>
        <briefdescription>
<para>Contact parameters output vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="70" column="30" bodyfile="include/enve_shell.hh" bodystart="70" bodyend="-1"/>
        <referencedby refid="a00070_1a372bd928da48a2e10931a23dc1cbe74f" compoundref="a00026" startline="761" endline="769">contactArea</referencedby>
        <referencedby refid="a00070_1afff3c3cc1451ea7b5190fcab2faff08e" compoundref="a00026" startline="714" endline="730">contactDepth</referencedby>
        <referencedby refid="a00070_1ac4a93448b8ca9cc276c82c33870f1f2c" compoundref="a00026" startline="665" endline="683">contactFriction</referencedby>
        <referencedby refid="a00070_1ae5e77948a3b67e4d1456dd80fd6cff15" compoundref="a00026" startline="614" endline="634">contactNormal</referencedby>
        <referencedby refid="a00070_1a1117628a990224ce2537e5bcea64ce0f" compoundref="a00026" startline="565" endline="583">contactPoint</referencedby>
        <referencedby refid="a00070_1a927d071289063cf3e734dea433313a41" compoundref="a00026" startline="857" endline="867">contactPointAffine</referencedby>
        <referencedby refid="a00070_1af3f7914461cc4e806fe52ed6701a0f00" compoundref="a00026" startline="800" endline="808">contactVolume</referencedby>
        <referencedby refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" compoundref="a00026" startline="89" endline="133">resize</referencedby>
        <referencedby refid="a00070_1ad9280ec1aea116a96674f6a1f9df7fe6" compoundref="a00026" startline="475" endline="519">setup</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00070_1a0b5749ee6bdd624106639a620a87076d" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; size_t &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;size_t&gt; &gt; enve::shell::m_tris</definition>
        <argsstring></argsstring>
        <name>m_tris</name>
        <qualifiedname>enve::shell::m_tris</qualifiedname>
        <briefdescription>
<para>Candidates triangle vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="71" column="17" bodyfile="include/enve_shell.hh" bodystart="71" bodyend="-1"/>
        <referencedby refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" compoundref="a00026" startline="89" endline="133">resize</referencedby>
        <referencedby refid="a00070_1ad9280ec1aea116a96674f6a1f9df7fe6" compoundref="a00026" startline="475" endline="519">setup</referencedby>
        <referencedby refid="a00070_1a1eaaa97bbc0fd4bb414b3945857ac421" compoundref="a00026" startline="1036" endline="1077">updateRibsCandidates</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00070_1a9e3dfd623bc883cb0dbab5fdad026a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::~shell</definition>
        <argsstring>(void)</argsstring>
        <name>~shell</name>
        <qualifiedname>enve::shell::~shell</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Shell class destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="75" column="5" bodyfile="src/enve_shell.cc" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a7840e1d408713ab4eb4b91e5c3912e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(shell const &amp;)=delete</argsstring>
        <name>shell</name>
        <qualifiedname>enve::shell::shell</qualifiedname>
        <param>
          <type><ref refid="a00070" kindref="compound">shell</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Shell copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="78" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1afda23b623e717fdd16126eb5de7685e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(shell const &amp;&amp;)=delete</argsstring>
        <name>shell</name>
        <qualifiedname>enve::shell::shell</qualifiedname>
        <param>
          <type><ref refid="a00070" kindref="compound">shell</ref> const &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Shell move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="81" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(size_t size, real r_x, real m_x, real r_y, real m_y, real l_y)</argsstring>
        <name>shell</name>
        <qualifiedname>enve::shell::shell</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <briefdescription><para>Input ribs number </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>r_x</declname>
          <briefdescription><para>Input shell radius on x axis (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>m_x</declname>
          <briefdescription><para>Input shell curve degree for x axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>r_y</declname>
          <briefdescription><para>Input shell radius on y axis (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>m_y</declname>
          <briefdescription><para>Input shell curve degree for y axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>l_y</declname>
          <briefdescription><para>Input surface half width on y axis (m) </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Shell class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="84" column="5" bodyfile="src/enve_shell.cc" bodystart="56" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1af45510d7118c1f0aea21c2dc7bfcbeff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(size_t size, shape const &amp;shape_in)</argsstring>
        <name>shell</name>
        <qualifiedname>enve::shell::shell</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <briefdescription><para>Input ribs number </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00066" kindref="compound">shape</ref> const &amp;</type>
          <declname>shape_in</declname>
          <briefdescription><para>Input shape object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Shell class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="94" column="5" bodyfile="src/enve_shell.cc" bodystart="74" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::resize</definition>
        <argsstring>(size_t size)</argsstring>
        <name>resize</name>
        <qualifiedname>enve::shell::resize</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <briefdescription><para>Input ribs number </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Resize shell size, position and stored contact results. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="101" column="5" bodyfile="src/enve_shell.cc" bodystart="89" bodyend="133"/>
        <referencedby refid="a00070_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" compoundref="a00026" startline="56" endline="70">shell</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1aaeafa8ac9f588ebdf3f2b8722dde9290" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t enve::shell::size</definition>
        <argsstring>(void) const</argsstring>
        <name>size</name>
        <qualifiedname>enve::shell::size</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell ribs number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="107" column="5" bodyfile="src/enve_shell.cc" bodystart="138" bodyend="142"/>
        <referencedby refid="a00070_1a372bd928da48a2e10931a23dc1cbe74f" compoundref="a00026" startline="761" endline="769">contactArea</referencedby>
        <referencedby refid="a00070_1afff3c3cc1451ea7b5190fcab2faff08e" compoundref="a00026" startline="714" endline="730">contactDepth</referencedby>
        <referencedby refid="a00070_1ac4a93448b8ca9cc276c82c33870f1f2c" compoundref="a00026" startline="665" endline="683">contactFriction</referencedby>
        <referencedby refid="a00070_1ae5e77948a3b67e4d1456dd80fd6cff15" compoundref="a00026" startline="614" endline="634">contactNormal</referencedby>
        <referencedby refid="a00070_1a1117628a990224ce2537e5bcea64ce0f" compoundref="a00026" startline="565" endline="583">contactPoint</referencedby>
        <referencedby refid="a00070_1aa74194b2f8d72799adeb8a061edff043" compoundref="a00026" startline="872" endline="879">contactPointAffine</referencedby>
        <referencedby refid="a00070_1af3f7914461cc4e806fe52ed6701a0f00" compoundref="a00026" startline="800" endline="808">contactVolume</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="926" endline="1031">print</referencedby>
        <referencedby refid="a00070_1a23d2a9c7d4bc4b10558e05941582df2d" compoundref="a00026" startline="914" endline="921">relativeAngles</referencedby>
        <referencedby refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" compoundref="a00026" startline="89" endline="133">resize</referencedby>
        <referencedby refid="a00070_1ad9280ec1aea116a96674f6a1f9df7fe6" compoundref="a00026" startline="475" endline="519">setup</referencedby>
        <referencedby refid="a00070_1a1eaaa97bbc0fd4bb414b3945857ac421" compoundref="a00026" startline="1036" endline="1077">updateRibsCandidates</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ae545ab83f69df117efd3aefc98905b58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceMaxRadius</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceMaxRadius</name>
        <qualifiedname>enve::shell::surfaceMaxRadius</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell surface maximum radius (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="120" column="5" bodyfile="src/enve_shell.cc" bodystart="158" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a041572d89d883b768eb195b61775e99d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceMaxWidth</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceMaxWidth</name>
        <qualifiedname>enve::shell::surfaceMaxWidth</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell surface maximum width on y axis (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="124" column="5" bodyfile="src/enve_shell.cc" bodystart="167" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a72cfa8296a664a3d3b538f7c97f187a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceWidth</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceWidth</name>
        <qualifiedname>enve::shell::surfaceWidth</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell surface width (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="128" column="5" bodyfile="src/enve_shell.cc" bodystart="176" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a968cb22f2dddc6ed28d29fe61bfb9f25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::checkWidthBound</definition>
        <argsstring>(real y) const</argsstring>
        <name>checkWidthBound</name>
        <qualifiedname>enve::shell::checkWidthBound</qualifiedname>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get shell surface maximum width on reference (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="132" column="5" bodyfile="src/enve_shell.cc" bodystart="185" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1afdf0e745ae4a5dbbc3daca2af53cd2d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceRadius</definition>
        <argsstring>(real y) const</argsstring>
        <name>surfaceRadius</name>
        <qualifiedname>enve::shell::surfaceRadius</qualifiedname>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get shell surface of revolution rib radius at y axis coordinate (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="138" column="5" bodyfile="src/enve_shell.cc" bodystart="196" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a9ff4b3d279cf3bca199d71b6829bb10f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceDerivative</definition>
        <argsstring>(real y, real tolerance=EPSILON_MEDIUM) const</argsstring>
        <name>surfaceDerivative</name>
        <qualifiedname>enve::shell::surfaceDerivative</qualifiedname>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_MEDIUM</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get shell surface of revolution rib first derivative with respect to y coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="144" column="5" bodyfile="src/enve_shell.cc" bodystart="207" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a4bbb973b459c409e07100b9f526d31f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceAngle</definition>
        <argsstring>(real y, real tolerance=EPSILON_MEDIUM) const</argsstring>
        <name>surfaceAngle</name>
        <qualifiedname>enve::shell::surfaceAngle</qualifiedname>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_MEDIUM</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get shell surface of revolution rib angle with respect to y axis (rad) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="151" column="5" bodyfile="src/enve_shell.cc" bodystart="219" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1aadb3a2be11b94f1273596ed709fc9e23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::ribRadius</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>ribRadius</name>
        <qualifiedname>enve::shell::ribRadius</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input index </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th rib unloaded radius (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="158" column="5" bodyfile="src/enve_shell.cc" bodystart="231" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1ad8a3d3f336041aae315b43022a7dbc3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>point</type>
        <definition>point enve::shell::ribCenter</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>ribCenter</name>
        <qualifiedname>enve::shell::ribCenter</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input index </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th rib center (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="164" column="5" bodyfile="src/enve_shell.cc" bodystart="242" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a43a508efabf7462e0fd13262a39a47b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::ribWidth</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>ribWidth</name>
        <qualifiedname>enve::shell::ribWidth</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input index </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get rib width (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="170" column="5" bodyfile="src/enve_shell.cc" bodystart="253" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1af3b256c4d6bb48cc12142e9e940d1b81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::ribAngle</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>ribAngle</name>
        <qualifiedname>enve::shell::ribAngle</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input index </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get rib angle (rad) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="176" column="5" bodyfile="src/enve_shell.cc" bodystart="264" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a812b5a7947d74eff88e5b9cfe24c9ef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::translate</definition>
        <argsstring>(vec3 const &amp;vector_in)</argsstring>
        <name>translate</name>
        <qualifiedname>enve::shell::translate</qualifiedname>
        <param>
          <type>vec3 const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Translation vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Translate shell by vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="191" column="5" bodyfile="src/enve_shell.cc" bodystart="286" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a3d0282a1133a19e3e1ae06f91b35b194" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 enve::shell::translation</definition>
        <argsstring>(void) const</argsstring>
        <name>translation</name>
        <qualifiedname>enve::shell::translation</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns shell translation vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="197" column="5" bodyfile="src/enve_shell.cc" bodystart="296" bodyend="300"/>
        <referencedby refid="a00070_1a1eaaa97bbc0fd4bb414b3945857ac421" compoundref="a00026" startline="1036" endline="1077">updateRibsCandidates</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a25ad9b63a2daea89ab6b17e949028d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::rotate</definition>
        <argsstring>(real angle, vec3 const &amp;axis)</argsstring>
        <name>rotate</name>
        <qualifiedname>enve::shell::rotate</qualifiedname>
        <param>
          <type>real</type>
          <declname>angle</declname>
          <briefdescription><para>Input angle (rad) </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 const &amp;</type>
          <declname>axis</declname>
          <briefdescription><para>Input axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rotate shell by a rotation angle around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="201" column="5" bodyfile="src/enve_shell.cc" bodystart="305" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a5ac7dbea127c06ee266b08053d775387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::rotate</definition>
        <argsstring>(real angle, std::string const &amp;axis)</argsstring>
        <name>rotate</name>
        <qualifiedname>enve::shell::rotate</qualifiedname>
        <param>
          <type>real</type>
          <declname>angle</declname>
          <briefdescription><para>Input angle (rad) </para>
</briefdescription>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>axis</declname>
          <briefdescription><para>Input axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rotate shell by a rotation angle around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="208" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1acd3e5c07070586785043b991f4ebcd3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>mat3</type>
        <definition>mat3 enve::shell::rotation</definition>
        <argsstring>(void) const</argsstring>
        <name>rotation</name>
        <qualifiedname>enve::shell::rotation</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns shell rotation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="215" column="5" bodyfile="src/enve_shell.cc" bodystart="316" bodyend="320"/>
        <referencedby refid="a00070_1a34d0cda62f4f3f5ad7057222eed05fcf" compoundref="a00026" startline="884" endline="893">relativeAngles</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ad49487850eb0510d7b068f91501ca836" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>mat3</type>
        <definition>mat3 enve::shell::linear</definition>
        <argsstring>(void) const</argsstring>
        <name>linear</name>
        <qualifiedname>enve::shell::linear</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns shell linear matrix (rotation + scaling + shearing) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="219" column="5" bodyfile="src/enve_shell.cc" bodystart="325" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1af5191a07e4f5385296139baf44c74caa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::transform</definition>
        <argsstring>(affine const &amp;affine_in)</argsstring>
        <name>transform</name>
        <qualifiedname>enve::shell::transform</qualifiedname>
        <param>
          <type>affine const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>Input 4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set 4x4 affine transformation matrix <linebreak/>
Warning: Rotation matrix must be orthonormal! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="224" column="5" bodyfile="src/enve_shell.cc" bodystart="345" bodyend="351"/>
        <referencedby refid="a00070_1ad9280ec1aea116a96674f6a1f9df7fe6" compoundref="a00026" startline="475" endline="519">setup</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a5ea27e946e4bae2651823ff03a605665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::transform</definition>
        <argsstring>(mat4 const &amp;affine_in)</argsstring>
        <name>transform</name>
        <qualifiedname>enve::shell::transform</qualifiedname>
        <param>
          <type>mat4 const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>Input 4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set 4x4 affine transformation matrix <linebreak/>
Warning: Rotation matrix must be orthonormal! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="231" column="5" bodyfile="src/enve_shell.cc" bodystart="334" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1ab8206d37a830c82ad372d3276556630a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>affine const &amp;</type>
        <definition>affine const  &amp; enve::shell::transformation</definition>
        <argsstring>(void) const</argsstring>
        <name>transformation</name>
        <qualifiedname>enve::shell::transformation</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get 4x4 affine transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="237" column="5" bodyfile="src/enve_shell.cc" bodystart="356" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a64761619387af085656a4d5c3bf77cd2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::checkTransformation</definition>
        <argsstring>(mat4 const &amp;affine_in, real tolerance=EPSILON_LOW) const</argsstring>
        <name>checkTransformation</name>
        <qualifiedname>enve::shell::checkTransformation</qualifiedname>
        <param>
          <type>mat4 const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>Input 4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_LOW</defval>
          <briefdescription><para>Affine trasformation othonomality check tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if 4x4 affine transformation matrix is othornormal and right-handed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="241" column="5" bodyfile="src/enve_shell.cc" bodystart="365" bodyend="376"/>
        <referencedby refid="a00070_1abc165d9d4d52d4394f42018b6e901d5c" compoundref="a00026" startline="381" endline="388">checkTransformation</referencedby>
        <referencedby refid="a00070_1ad9280ec1aea116a96674f6a1f9df7fe6" compoundref="a00026" startline="475" endline="519">setup</referencedby>
        <referencedby refid="a00070_1a5ea27e946e4bae2651823ff03a605665" compoundref="a00026" startline="334" endline="340">transform</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1abc165d9d4d52d4394f42018b6e901d5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::checkTransformation</definition>
        <argsstring>(affine const &amp;affine_in, real tolerance=EPSILON_LOW) const</argsstring>
        <name>checkTransformation</name>
        <qualifiedname>enve::shell::checkTransformation</qualifiedname>
        <param>
          <type>affine const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>Input 4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_LOW</defval>
          <briefdescription><para>Affine trasformation othonomality check tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if 4x4 affine transformation matrix is othornormal and right-handed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="248" column="5" bodyfile="src/enve_shell.cc" bodystart="381" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1ad7868ccdd90b807c75684cb51c256d03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 enve::shell::x</definition>
        <argsstring>(void) const</argsstring>
        <name>x</name>
        <qualifiedname>enve::shell::x</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get x vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="255" column="5" bodyfile="src/enve_shell.cc" bodystart="393" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a1de4c83db18282e37892c7adb0224232" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 enve::shell::y</definition>
        <argsstring>(void) const</argsstring>
        <name>y</name>
        <qualifiedname>enve::shell::y</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get y vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="259" column="5" bodyfile="src/enve_shell.cc" bodystart="402" bodyend="406"/>
        <referencedby refid="a00070_1a9a42f5bfd1ee3bd424afd900d48cc2ba" compoundref="a00026" startline="839" endline="852">contactPointAffine</referencedby>
        <referencedby refid="a00070_1a1eaaa97bbc0fd4bb414b3945857ac421" compoundref="a00026" startline="1036" endline="1077">updateRibsCandidates</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a79039f854236a5ae427da3f0868f988a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 enve::shell::z</definition>
        <argsstring>(void) const</argsstring>
        <name>z</name>
        <qualifiedname>enve::shell::z</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get z vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="263" column="5" bodyfile="src/enve_shell.cc" bodystart="411" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a3758f1248a4e9a9487682560d75ae823" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::eulerAngles</definition>
        <argsstring>(vec3 &amp;angles) const</argsstring>
        <name>eulerAngles</name>
        <qualifiedname>enve::shell::eulerAngles</qualifiedname>
        <param>
          <type>vec3 &amp;</type>
          <declname>angles</declname>
          <briefdescription><para>Frame Euler angles </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current Euler angles (rad) <linebreak/>
WARNING: Rotation sequence ZXY! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="268" column="5" bodyfile="src/enve_shell.cc" bodystart="420" bodyend="426"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="926" endline="1031">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ac9d1d2c263ae78a9b221120262cd9454" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; aabb &gt;</type>
        <definition>std::shared_ptr&lt; aabb &gt; enve::shell::BBox</definition>
        <argsstring>(void) const</argsstring>
        <name>BBox</name>
        <qualifiedname>enve::shell::BBox</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell bonding aabb as object pointer vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="283" column="5" bodyfile="src/enve_shell.cc" bodystart="442" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a2752d2f553b89f2b722c14f98380b025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::updateBBox</definition>
        <argsstring>(void)</argsstring>
        <name>updateBBox</name>
        <qualifiedname>enve::shell::updateBBox</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Update shell bonding aabb. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="287" column="5" bodyfile="src/enve_shell.cc" bodystart="451" bodyend="459"/>
        <referencedby refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" compoundref="a00026" startline="89" endline="133">resize</referencedby>
        <referencedby refid="a00070_1ad9280ec1aea116a96674f6a1f9df7fe6" compoundref="a00026" startline="475" endline="519">setup</referencedby>
        <referencedby refid="a00070_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" compoundref="a00026" startline="56" endline="70">shell</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ad9280ec1aea116a96674f6a1f9df7fe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::setup</definition>
        <argsstring>(ground::mesh const &amp;ground, affine const &amp;affine_in, std::string const method, bool checkAffine=false, real tolerance=EPSILON_LOW)</argsstring>
        <name>setup</name>
        <qualifiedname>enve::shell::setup</qualifiedname>
        <param>
          <type><ref refid="a00054" kindref="compound">ground::mesh</ref> const &amp;</type>
          <declname>ground</declname>
          <briefdescription><para>Mesh ground object </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <param>
          <type>std::string const</type>
          <declname>method</declname>
          <briefdescription><para>Method name (choose from: &quot;geometric&quot; or &quot;sampling&quot;) </para>
</briefdescription>
        </param>
        <param>
          <type>bool</type>
          <declname>checkAffine</declname>
          <defval>false</defval>
          <briefdescription><para>Affine trasformation othonomality check </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_LOW</defval>
          <briefdescription><para>Affine trasformation othonomality check tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Update current shell position and find contact parameters (intersection with mesh) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="300" column="5" bodyfile="src/enve_shell.cc" bodystart="475" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a3246315053841cddc5aabdd01e2a66d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::setup</definition>
        <argsstring>(ground::flat const &amp;ground, affine const &amp;affine_in, std::string const method, bool checkAffine=false, real tolerance=EPSILON_LOW)</argsstring>
        <name>setup</name>
        <qualifiedname>enve::shell::setup</qualifiedname>
        <param>
          <type><ref refid="a00050" kindref="compound">ground::flat</ref> const &amp;</type>
          <declname>ground</declname>
          <briefdescription><para>Flat ground object </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>4x4 affine transformation </para>
</briefdescription>
        </param>
        <param>
          <type>std::string const</type>
          <declname>method</declname>
          <briefdescription><para>Method name (choose from: &quot;geometric&quot; or &quot;sampling&quot;) </para>
</briefdescription>
        </param>
        <param>
          <type>bool</type>
          <declname>checkAffine</declname>
          <defval>false</defval>
          <briefdescription><para>Affine trasformation othonomality check </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_LOW</defval>
          <briefdescription><para>Affine trasformation othonomality check tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Update current shell position and find contact parameters (intersection with plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="310" column="5" bodyfile="src/enve_shell.cc" bodystart="524" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a1117628a990224ce2537e5bcea64ce0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPoint</definition>
        <argsstring>(point &amp;point) const</argsstring>
        <name>contactPoint</name>
        <qualifiedname>enve::shell::contactPoint</qualifiedname>
        <param>
          <type>point &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="329" column="5" bodyfile="src/enve_shell.cc" bodystart="565" bodyend="583"/>
        <referencedby refid="a00070_1a9a42f5bfd1ee3bd424afd900d48cc2ba" compoundref="a00026" startline="839" endline="852">contactPointAffine</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="926" endline="1031">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a89109d80eb8c4365b5c7c3cc2a3946f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPoint</definition>
        <argsstring>(size_t i, point &amp;point) const</argsstring>
        <name>contactPoint</name>
        <qualifiedname>enve::shell::contactPoint</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="335" column="5" bodyfile="src/enve_shell.cc" bodystart="588" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a5e7cd77d99b01e92288fd0e5ed884bb6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPoint</definition>
        <argsstring>(std::vector&lt; point &gt; &amp;point) const</argsstring>
        <name>contactPoint</name>
        <qualifiedname>enve::shell::contactPoint</qualifiedname>
        <param>
          <type>std::vector&lt; point &gt; &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Contact points vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact points vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="342" column="5" bodyfile="src/enve_shell.cc" bodystart="600" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1ae5e77948a3b67e4d1456dd80fd6cff15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactNormal</definition>
        <argsstring>(vec3 &amp;normal) const</argsstring>
        <name>contactNormal</name>
        <qualifiedname>enve::shell::contactNormal</qualifiedname>
        <param>
          <type>vec3 &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Contact point normal direction </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact normal vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="348" column="5" bodyfile="src/enve_shell.cc" bodystart="614" bodyend="634"/>
        <referencedby refid="a00070_1a9a42f5bfd1ee3bd424afd900d48cc2ba" compoundref="a00026" startline="839" endline="852">contactPointAffine</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="926" endline="1031">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a3dc741308478849ef36b6b9622a48b62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactNormal</definition>
        <argsstring>(size_t i, vec3 &amp;normal) const</argsstring>
        <name>contactNormal</name>
        <qualifiedname>enve::shell::contactNormal</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Contact point normal direction </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact normal vector for the i-th rib. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="354" column="5" bodyfile="src/enve_shell.cc" bodystart="639" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a58b2d3b655d5959a02ddad029a7efe04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactNormal</definition>
        <argsstring>(std::vector&lt; vec3 &gt; &amp;normal) const</argsstring>
        <name>contactNormal</name>
        <qualifiedname>enve::shell::contactNormal</qualifiedname>
        <param>
          <type>std::vector&lt; vec3 &gt; &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Contact point normal direction vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact normal vectors vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="361" column="5" bodyfile="src/enve_shell.cc" bodystart="651" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1ac4a93448b8ca9cc276c82c33870f1f2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactFriction</definition>
        <argsstring>(real &amp;friction) const</argsstring>
        <name>contactFriction</name>
        <qualifiedname>enve::shell::contactFriction</qualifiedname>
        <param>
          <type>real &amp;</type>
          <declname>friction</declname>
          <briefdescription><para>Contact friction coefficient </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact friction coefficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="367" column="5" bodyfile="src/enve_shell.cc" bodystart="665" bodyend="683"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="926" endline="1031">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a1b1657dc9797369757849522b24b77ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactFriction</definition>
        <argsstring>(size_t i, real &amp;friction) const</argsstring>
        <name>contactFriction</name>
        <qualifiedname>enve::shell::contactFriction</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>friction</declname>
          <briefdescription><para>Contact friction coefficient </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th rib contact friction coefficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="373" column="5" bodyfile="src/enve_shell.cc" bodystart="688" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a03bd693acbd8bd238cddd162c055ec82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactFriction</definition>
        <argsstring>(std::vector&lt; real &gt; &amp;friction) const</argsstring>
        <name>contactFriction</name>
        <qualifiedname>enve::shell::contactFriction</qualifiedname>
        <param>
          <type>std::vector&lt; real &gt; &amp;</type>
          <declname>friction</declname>
          <briefdescription><para>Contact friction coefficient vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact friction coefficient vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="380" column="5" bodyfile="src/enve_shell.cc" bodystart="700" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1afff3c3cc1451ea7b5190fcab2faff08e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactDepth</definition>
        <argsstring>(real &amp;depth) const</argsstring>
        <name>contactDepth</name>
        <qualifiedname>enve::shell::contactDepth</qualifiedname>
        <param>
          <type>real &amp;</type>
          <declname>depth</declname>
          <briefdescription><para>Contact depth </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact depth at center point (m) (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="386" column="5" bodyfile="src/enve_shell.cc" bodystart="714" bodyend="730"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="926" endline="1031">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1af483b24e7b84b70766256eb4645eb09b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactDepth</definition>
        <argsstring>(size_t i, real &amp;depth) const</argsstring>
        <name>contactDepth</name>
        <qualifiedname>enve::shell::contactDepth</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>depth</declname>
          <briefdescription><para>Contact depth </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact depth at center point for the i-th rib (m) (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="392" column="5" bodyfile="src/enve_shell.cc" bodystart="735" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a4a17f4510dca5cf940fa1aff817d7192" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactDepth</definition>
        <argsstring>(std::vector&lt; real &gt; &amp;depth) const</argsstring>
        <name>contactDepth</name>
        <qualifiedname>enve::shell::contactDepth</qualifiedname>
        <param>
          <type>std::vector&lt; real &gt; &amp;</type>
          <declname>depth</declname>
          <briefdescription><para>Contact depth </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact depth vector (m) (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="399" column="5" bodyfile="src/enve_shell.cc" bodystart="747" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a372bd928da48a2e10931a23dc1cbe74f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactArea</definition>
        <argsstring>(real &amp;area) const</argsstring>
        <name>contactArea</name>
        <qualifiedname>enve::shell::contactArea</qualifiedname>
        <param>
          <type>real &amp;</type>
          <declname>area</declname>
          <briefdescription><para>Contact area </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact area (m^2) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="405" column="5" bodyfile="src/enve_shell.cc" bodystart="761" bodyend="769"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="926" endline="1031">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a2fea2339cd95016383e47918494c0a84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactArea</definition>
        <argsstring>(size_t i, real &amp;area) const</argsstring>
        <name>contactArea</name>
        <qualifiedname>enve::shell::contactArea</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>area</declname>
          <briefdescription><para>Contact area </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th rib contact area (m^2) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="411" column="5" bodyfile="src/enve_shell.cc" bodystart="774" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a1c40df577f1bd02722a2bc370985c9da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactArea</definition>
        <argsstring>(std::vector&lt; real &gt; &amp;area) const</argsstring>
        <name>contactArea</name>
        <qualifiedname>enve::shell::contactArea</qualifiedname>
        <param>
          <type>std::vector&lt; real &gt; &amp;</type>
          <declname>area</declname>
          <briefdescription><para>Contact area vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact area vector (m^2) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="418" column="5" bodyfile="src/enve_shell.cc" bodystart="786" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1af3f7914461cc4e806fe52ed6701a0f00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactVolume</definition>
        <argsstring>(real &amp;volume) const</argsstring>
        <name>contactVolume</name>
        <qualifiedname>enve::shell::contactVolume</qualifiedname>
        <param>
          <type>real &amp;</type>
          <declname>volume</declname>
          <briefdescription><para>Contact volume </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact volume (m^3) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="424" column="5" bodyfile="src/enve_shell.cc" bodystart="800" bodyend="808"/>
        <referencedby refid="a00070_1afff3c3cc1451ea7b5190fcab2faff08e" compoundref="a00026" startline="714" endline="730">contactDepth</referencedby>
        <referencedby refid="a00070_1ac4a93448b8ca9cc276c82c33870f1f2c" compoundref="a00026" startline="665" endline="683">contactFriction</referencedby>
        <referencedby refid="a00070_1ae5e77948a3b67e4d1456dd80fd6cff15" compoundref="a00026" startline="614" endline="634">contactNormal</referencedby>
        <referencedby refid="a00070_1a1117628a990224ce2537e5bcea64ce0f" compoundref="a00026" startline="565" endline="583">contactPoint</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="926" endline="1031">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ae37a629eec2a9160404bcc922bedf850" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactVolume</definition>
        <argsstring>(size_t i, real &amp;volume) const</argsstring>
        <name>contactVolume</name>
        <qualifiedname>enve::shell::contactVolume</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>volume</declname>
          <briefdescription><para>Contact volume </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th rib contact volume (m^3) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="430" column="5" bodyfile="src/enve_shell.cc" bodystart="813" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1aa31fb1eae3e748a610af52ab9421c65f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactVolume</definition>
        <argsstring>(std::vector&lt; real &gt; &amp;volume) const</argsstring>
        <name>contactVolume</name>
        <qualifiedname>enve::shell::contactVolume</qualifiedname>
        <param>
          <type>std::vector&lt; real &gt; &amp;</type>
          <declname>volume</declname>
          <briefdescription><para>Contact volume vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact volume vector (m^3) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="437" column="5" bodyfile="src/enve_shell.cc" bodystart="825" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a9a42f5bfd1ee3bd424afd900d48cc2ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointAffine</definition>
        <argsstring>(affine &amp;point_affine) const</argsstring>
        <name>contactPointAffine</name>
        <qualifiedname>enve::shell::contactPointAffine</qualifiedname>
        <param>
          <type>affine &amp;</type>
          <declname>point_affine</declname>
          <briefdescription><para>Contact point affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point 4x4 affine transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="443" column="5" bodyfile="src/enve_shell.cc" bodystart="839" bodyend="852"/>
        <referencedby refid="a00070_1aa74194b2f8d72799adeb8a061edff043" compoundref="a00026" startline="872" endline="879">contactPointAffine</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="926" endline="1031">print</referencedby>
        <referencedby refid="a00070_1a34d0cda62f4f3f5ad7057222eed05fcf" compoundref="a00026" startline="884" endline="893">relativeAngles</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a927d071289063cf3e734dea433313a41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointAffine</definition>
        <argsstring>(size_t i, affine &amp;point_affine) const</argsstring>
        <name>contactPointAffine</name>
        <qualifiedname>enve::shell::contactPointAffine</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>affine &amp;</type>
          <declname>point_affine</declname>
          <briefdescription><para>Contact point affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point 4x4 affine transformation matrix for the i-th rib. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="449" column="5" bodyfile="src/enve_shell.cc" bodystart="857" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1aa74194b2f8d72799adeb8a061edff043" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointAffine</definition>
        <argsstring>(std::vector&lt; affine &gt; &amp;point_affine) const</argsstring>
        <name>contactPointAffine</name>
        <qualifiedname>enve::shell::contactPointAffine</qualifiedname>
        <param>
          <type>std::vector&lt; affine &gt; &amp;</type>
          <declname>point_affine</declname>
          <briefdescription><para>Contact point affine transformation matrices vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point 4x4 affine transformation matrices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="456" column="5" bodyfile="src/enve_shell.cc" bodystart="872" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a34d0cda62f4f3f5ad7057222eed05fcf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::relativeAngles</definition>
        <argsstring>(vec3 &amp;angles) const</argsstring>
        <name>relativeAngles</name>
        <qualifiedname>enve::shell::relativeAngles</qualifiedname>
        <param>
          <type>vec3 &amp;</type>
          <declname>angles</declname>
          <briefdescription><para>Relative angles vector (rad) </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get shell relative angles (rad) <linebreak/>
WARNING: Rotation sequence ZXY! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="463" column="5" bodyfile="src/enve_shell.cc" bodystart="884" bodyend="893"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="926" endline="1031">print</referencedby>
        <referencedby refid="a00070_1a23d2a9c7d4bc4b10558e05941582df2d" compoundref="a00026" startline="914" endline="921">relativeAngles</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ae48557597d39b647eac55a03704bdfc3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::relativeAngles</definition>
        <argsstring>(size_t i, vec3 &amp;angles) const</argsstring>
        <name>relativeAngles</name>
        <qualifiedname>enve::shell::relativeAngles</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>angles</declname>
          <briefdescription><para>Relative angles vector (rad) </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get shell relative angles for the i-th rib (rad) <linebreak/>
WARNING: Rotation sequence ZXY! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="470" column="5" bodyfile="src/enve_shell.cc" bodystart="898" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a23d2a9c7d4bc4b10558e05941582df2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::relativeAngles</definition>
        <argsstring>(std::vector&lt; vec3 &gt; &amp;angles) const</argsstring>
        <name>relativeAngles</name>
        <qualifiedname>enve::shell::relativeAngles</qualifiedname>
        <param>
          <type>std::vector&lt; vec3 &gt; &amp;</type>
          <declname>angles</declname>
          <briefdescription><para>Relative angles vector (rad) </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get shell relative angles as vector (rad) <linebreak/>
WARNING: Rotation sequence ZXY! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="478" column="5" bodyfile="src/enve_shell.cc" bodystart="914" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a1a425eec93c459c7542b22b1c28c5417" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::print</definition>
        <argsstring>(out_stream &amp;os) const</argsstring>
        <name>print</name>
        <qualifiedname>enve::shell::print</qualifiedname>
        <param>
          <type>out_stream &amp;</type>
          <declname>os</declname>
          <briefdescription><para>Output stream type </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Print contact parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="484" column="5" bodyfile="src/enve_shell.cc" bodystart="926" bodyend="1031"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="a00070_1a1eaaa97bbc0fd4bb414b3945857ac421" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::updateRibsCandidates</definition>
        <argsstring>(triangleground::vecptr const &amp;localGround)</argsstring>
        <name>updateRibsCandidates</name>
        <qualifiedname>enve::shell::updateRibsCandidates</qualifiedname>
        <param>
          <type><ref refid="a00074_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> const &amp;</type>
          <declname>localGround</declname>
          <briefdescription><para>Local triangles candidate list </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Update the list of ribs candidates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="492" column="5" bodyfile="src/enve_shell.cc" bodystart="1036" bodyend="1077"/>
        <referencedby refid="a00070_1ad9280ec1aea116a96674f6a1f9df7fe6" compoundref="a00026" startline="475" endline="519">setup</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for ENVE shell. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/enve_shell.hh" line="59" column="3" bodyfile="include/enve_shell.hh" bodystart="60" bodyend="496"/>
    <listofallmembers>
      <member refid="a00070_1ac9d1d2c263ae78a9b221120262cd9454" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>BBox</name></member>
      <member refid="a00070_1a64761619387af085656a4d5c3bf77cd2" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>checkTransformation</name></member>
      <member refid="a00070_1abc165d9d4d52d4394f42018b6e901d5c" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>checkTransformation</name></member>
      <member refid="a00070_1a968cb22f2dddc6ed28d29fe61bfb9f25" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>checkWidthBound</name></member>
      <member refid="a00070_1a372bd928da48a2e10931a23dc1cbe74f" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactArea</name></member>
      <member refid="a00070_1a2fea2339cd95016383e47918494c0a84" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactArea</name></member>
      <member refid="a00070_1a1c40df577f1bd02722a2bc370985c9da" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactArea</name></member>
      <member refid="a00070_1afff3c3cc1451ea7b5190fcab2faff08e" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactDepth</name></member>
      <member refid="a00070_1af483b24e7b84b70766256eb4645eb09b" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactDepth</name></member>
      <member refid="a00070_1a4a17f4510dca5cf940fa1aff817d7192" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactDepth</name></member>
      <member refid="a00070_1ac4a93448b8ca9cc276c82c33870f1f2c" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactFriction</name></member>
      <member refid="a00070_1a1b1657dc9797369757849522b24b77ca" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactFriction</name></member>
      <member refid="a00070_1a03bd693acbd8bd238cddd162c055ec82" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactFriction</name></member>
      <member refid="a00070_1ae5e77948a3b67e4d1456dd80fd6cff15" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactNormal</name></member>
      <member refid="a00070_1a3dc741308478849ef36b6b9622a48b62" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactNormal</name></member>
      <member refid="a00070_1a58b2d3b655d5959a02ddad029a7efe04" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactNormal</name></member>
      <member refid="a00070_1a1117628a990224ce2537e5bcea64ce0f" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPoint</name></member>
      <member refid="a00070_1a89109d80eb8c4365b5c7c3cc2a3946f8" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPoint</name></member>
      <member refid="a00070_1a5e7cd77d99b01e92288fd0e5ed884bb6" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPoint</name></member>
      <member refid="a00070_1a9a42f5bfd1ee3bd424afd900d48cc2ba" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointAffine</name></member>
      <member refid="a00070_1a927d071289063cf3e734dea433313a41" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointAffine</name></member>
      <member refid="a00070_1aa74194b2f8d72799adeb8a061edff043" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointAffine</name></member>
      <member refid="a00070_1af3f7914461cc4e806fe52ed6701a0f00" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactVolume</name></member>
      <member refid="a00070_1ae37a629eec2a9160404bcc922bedf850" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactVolume</name></member>
      <member refid="a00070_1aa31fb1eae3e748a610af52ab9421c65f" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactVolume</name></member>
      <member refid="a00070_1a3758f1248a4e9a9487682560d75ae823" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>eulerAngles</name></member>
      <member refid="a00070_1ad49487850eb0510d7b068f91501ca836" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>linear</name></member>
      <member refid="a00070_1a1950f8b6966e0277bf7b9266bb8929af" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_aabb</name></member>
      <member refid="a00070_1a0fc8caf160157febbc5fa0ee0b4ea0ad" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_affine</name></member>
      <member refid="a00070_1a9bd07491e1b481f02a5d7206b34cf346" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_out</name></member>
      <member refid="a00070_1ac12fbcd8d579d4e0e6cb3744f27b3691" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_ribs</name></member>
      <member refid="a00070_1a442a1c35765c1b3c01a4e20772fddef9" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_shape</name></member>
      <member refid="a00070_1a0b5749ee6bdd624106639a620a87076d" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_tris</name></member>
      <member refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>print</name></member>
      <member refid="a00070_1af27992d971057759d268f102975d62fb" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ptr</name></member>
      <member refid="a00070_1a34d0cda62f4f3f5ad7057222eed05fcf" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>relativeAngles</name></member>
      <member refid="a00070_1ae48557597d39b647eac55a03704bdfc3" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>relativeAngles</name></member>
      <member refid="a00070_1a23d2a9c7d4bc4b10558e05941582df2d" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>relativeAngles</name></member>
      <member refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>resize</name></member>
      <member refid="a00070_1af3b256c4d6bb48cc12142e9e940d1b81" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ribAngle</name></member>
      <member refid="a00070_1ad8a3d3f336041aae315b43022a7dbc3c" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ribCenter</name></member>
      <member refid="a00070_1aadb3a2be11b94f1273596ed709fc9e23" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ribRadius</name></member>
      <member refid="a00070_1a43a508efabf7462e0fd13262a39a47b4" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ribWidth</name></member>
      <member refid="a00070_1a25ad9b63a2daea89ab6b17e949028d8d" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>rotate</name></member>
      <member refid="a00070_1a5ac7dbea127c06ee266b08053d775387" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>rotate</name></member>
      <member refid="a00070_1acd3e5c07070586785043b991f4ebcd3b" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>rotation</name></member>
      <member refid="a00070_1ad9280ec1aea116a96674f6a1f9df7fe6" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>setup</name></member>
      <member refid="a00070_1a3246315053841cddc5aabdd01e2a66d4" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>setup</name></member>
      <member refid="a00070_1a7840e1d408713ab4eb4b91e5c3912e07" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00070_1afda23b623e717fdd16126eb5de7685e0" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00070_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00070_1af45510d7118c1f0aea21c2dc7bfcbeff" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00070_1aaeafa8ac9f588ebdf3f2b8722dde9290" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>size</name></member>
      <member refid="a00070_1a4bbb973b459c409e07100b9f526d31f2" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceAngle</name></member>
      <member refid="a00070_1a9ff4b3d279cf3bca199d71b6829bb10f" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceDerivative</name></member>
      <member refid="a00070_1ae545ab83f69df117efd3aefc98905b58" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceMaxRadius</name></member>
      <member refid="a00070_1a041572d89d883b768eb195b61775e99d" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceMaxWidth</name></member>
      <member refid="a00070_1afdf0e745ae4a5dbbc3daca2af53cd2d1" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceRadius</name></member>
      <member refid="a00070_1a72cfa8296a664a3d3b538f7c97f187a4" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceWidth</name></member>
      <member refid="a00070_1af5191a07e4f5385296139baf44c74caa" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>transform</name></member>
      <member refid="a00070_1a5ea27e946e4bae2651823ff03a605665" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>transform</name></member>
      <member refid="a00070_1ab8206d37a830c82ad372d3276556630a" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>transformation</name></member>
      <member refid="a00070_1a812b5a7947d74eff88e5b9cfe24c9ef0" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>translate</name></member>
      <member refid="a00070_1a3d0282a1133a19e3e1ae06f91b35b194" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>translation</name></member>
      <member refid="a00070_1a2752d2f553b89f2b722c14f98380b025" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>updateBBox</name></member>
      <member refid="a00070_1a1eaaa97bbc0fd4bb414b3945857ac421" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>updateRibsCandidates</name></member>
      <member refid="a00070_1a14b3fa61d852ebaabd3603818d74ca6a" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>vecptr</name></member>
      <member refid="a00070_1ad7868ccdd90b807c75684cb51c256d03" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>x</name></member>
      <member refid="a00070_1a1de4c83db18282e37892c7adb0224232" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>y</name></member>
      <member refid="a00070_1a79039f854236a5ae427da3f0868f988a" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>z</name></member>
      <member refid="a00070_1a9e3dfd623bc883cb0dbab5fdad026a26" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>~shell</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
