<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="a00070" kind="class" language="C++" prot="public">
    <compoundname>enve::shell</compoundname>
    <includes refid="a00020" local="no">shell.hxx</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a00070_1af27992d971057759d268f102975d62fb" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="a00070" kindref="compound">shell</ref> const  &gt;</type>
        <definition>typedef std::shared_ptr&lt;shell const&gt; enve::shell::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <qualifiedname>enve::shell::ptr</qualifiedname>
        <briefdescription>
<para>Pointer to shell object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="48" column="29" bodyfile="src/enve/shell.hxx" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00070_1a14b3fa61d852ebaabd3603818d74ca6a" prot="public" static="no">
        <type>std::vector&lt; <ref refid="a00070_1af27992d971057759d268f102975d62fb" kindref="member">shell::ptr</ref> &gt;</type>
        <definition>typedef std::vector&lt;shell::ptr&gt; enve::shell::vecptr</definition>
        <argsstring></argsstring>
        <name>vecptr</name>
        <qualifiedname>enve::shell::vecptr</qualifiedname>
        <briefdescription>
<para>Vector of pointers to shell objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="49" column="30" bodyfile="src/enve/shell.hxx" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a00070_1a0fc8caf160157febbc5fa0ee0b4ea0ad" prot="private" static="no" mutable="no">
        <type>affine</type>
        <definition>affine enve::shell::m_affine</definition>
        <argsstring></argsstring>
        <name>m_affine</name>
        <qualifiedname>enve::shell::m_affine</qualifiedname>
        <briefdescription>
<para>Shell reference frame (ISO) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="52" column="41" bodyfile="src/enve/shell.hxx" bodystart="52" bodyend="-1"/>
        <referencedby refid="a00070_1a3758f1248a4e9a9487682560d75ae823" compoundref="a00026" startline="398" endline="404">eulerAngles</referencedby>
        <referencedby refid="a00070_1ad49487850eb0510d7b068f91501ca836" compoundref="a00026" startline="315" endline="319">linear</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="906" endline="1013">print</referencedby>
        <referencedby refid="a00070_1a25ad9b63a2daea89ab6b17e949028d8d" compoundref="a00026" startline="295" endline="301">rotate</referencedby>
        <referencedby refid="a00070_1acd3e5c07070586785043b991f4ebcd3b" compoundref="a00026" startline="306" endline="310">rotation</referencedby>
        <referencedby refid="a00070_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" compoundref="a00026" startline="41" endline="55">shell</referencedby>
        <referencedby refid="a00070_1aa0639ac180bf0d51fdbd254e4494db3e" compoundref="a00026" startline="324" endline="330">transform</referencedby>
        <referencedby refid="a00070_1ab8206d37a830c82ad372d3276556630a" compoundref="a00026" startline="335" endline="339">transformation</referencedby>
        <referencedby refid="a00070_1aa251db96c6db18b89408028c070426bf" compoundref="a00026" startline="276" endline="281">translate</referencedby>
        <referencedby refid="a00070_1a3d0282a1133a19e3e1ae06f91b35b194" compoundref="a00026" startline="286" endline="290">translation</referencedby>
        <referencedby refid="a00070_1a2752d2f553b89f2b722c14f98380b025" compoundref="a00026" startline="429" endline="437">updateBBox</referencedby>
        <referencedby refid="a00070_1ad7868ccdd90b807c75684cb51c256d03" compoundref="a00026" startline="371" endline="375">x</referencedby>
        <referencedby refid="a00070_1a1de4c83db18282e37892c7adb0224232" compoundref="a00026" startline="380" endline="384">y</referencedby>
        <referencedby refid="a00070_1a79039f854236a5ae427da3f0868f988a" compoundref="a00026" startline="389" endline="393">z</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00070_1ac12fbcd8d579d4e0e6cb3744f27b3691" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="a00062" kindref="compound">rib</ref> &gt;</type>
        <definition>std::vector&lt;rib&gt; enve::shell::m_ribs</definition>
        <argsstring></argsstring>
        <name>m_ribs</name>
        <qualifiedname>enve::shell::m_ribs</qualifiedname>
        <briefdescription>
<para>Shell ribs vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="53" column="36" bodyfile="src/enve/shell.hxx" bodystart="53" bodyend="-1"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="906" endline="1013">print</referencedby>
        <referencedby refid="a00070_1ae48557597d39b647eac55a03704bdfc3" compoundref="a00026" startline="878" endline="889">relativeAngles</referencedby>
        <referencedby refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" compoundref="a00026" startline="74" endline="123">resize</referencedby>
        <referencedby refid="a00070_1af3b256c4d6bb48cc12142e9e940d1b81" compoundref="a00026" startline="254" endline="260">ribAngle</referencedby>
        <referencedby refid="a00070_1ad8a3d3f336041aae315b43022a7dbc3c" compoundref="a00026" startline="232" endline="238">ribCenter</referencedby>
        <referencedby refid="a00070_1aadb3a2be11b94f1273596ed709fc9e23" compoundref="a00026" startline="221" endline="227">ribRadius</referencedby>
        <referencedby refid="a00070_1a43a508efabf7462e0fd13262a39a47b4" compoundref="a00026" startline="243" endline="249">ribWidth</referencedby>
        <referencedby refid="a00070_1ad38f267f9406df88069c28969d52eef8" compoundref="a00026" startline="453" endline="491">setup</referencedby>
        <referencedby refid="a00070_1aaeafa8ac9f588ebdf3f2b8722dde9290" compoundref="a00026" startline="128" endline="132">size</referencedby>
        <referencedby refid="a00070_1a478059b1c43cfd0988ac3de656cb382b" compoundref="a00026" startline="1018" endline="1059">updateRibsCandidates</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00070_1a442a1c35765c1b3c01a4e20772fddef9" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="a00066" kindref="compound">shape</ref> &gt;</type>
        <definition>std::shared_ptr&lt;shape&gt; enve::shell::m_shape</definition>
        <argsstring></argsstring>
        <name>m_shape</name>
        <qualifiedname>enve::shell::m_shape</qualifiedname>
        <briefdescription>
<para>Shell shape. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="54" column="34" bodyfile="src/enve/shell.hxx" bodystart="54" bodyend="-1"/>
        <referencedby refid="a00070_1a968cb22f2dddc6ed28d29fe61bfb9f25" compoundref="a00026" startline="175" endline="181">checkWidthBound</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="906" endline="1013">print</referencedby>
        <referencedby refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" compoundref="a00026" startline="74" endline="123">resize</referencedby>
        <referencedby refid="a00070_1a4bbb973b459c409e07100b9f526d31f2" compoundref="a00026" startline="209" endline="216">surfaceAngle</referencedby>
        <referencedby refid="a00070_1a9ff4b3d279cf3bca199d71b6829bb10f" compoundref="a00026" startline="197" endline="204">surfaceDerivative</referencedby>
        <referencedby refid="a00070_1ae545ab83f69df117efd3aefc98905b58" compoundref="a00026" startline="148" endline="152">surfaceMaxRadius</referencedby>
        <referencedby refid="a00070_1a041572d89d883b768eb195b61775e99d" compoundref="a00026" startline="157" endline="161">surfaceMaxWidth</referencedby>
        <referencedby refid="a00070_1afdf0e745ae4a5dbbc3daca2af53cd2d1" compoundref="a00026" startline="186" endline="192">surfaceRadius</referencedby>
        <referencedby refid="a00070_1a72cfa8296a664a3d3b538f7c97f187a4" compoundref="a00026" startline="166" endline="170">surfaceWidth</referencedby>
        <referencedby refid="a00070_1a2752d2f553b89f2b722c14f98380b025" compoundref="a00026" startline="429" endline="437">updateBBox</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00070_1a1950f8b6966e0277bf7b9266bb8929af" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; aabb &gt;</type>
        <definition>std::shared_ptr&lt;aabb&gt; enve::shell::m_aabb</definition>
        <argsstring></argsstring>
        <name>m_aabb</name>
        <qualifiedname>enve::shell::m_aabb</qualifiedname>
        <briefdescription>
<para>Shell bounding aabb (must be transformed in the mesh reference frame before intersection!) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="55" column="35" bodyfile="src/enve/shell.hxx" bodystart="55" bodyend="-1"/>
        <referencedby refid="a00070_1ac9d1d2c263ae78a9b221120262cd9454" compoundref="a00026" startline="420" endline="424">BBox</referencedby>
        <referencedby refid="a00070_1ad38f267f9406df88069c28969d52eef8" compoundref="a00026" startline="453" endline="491">setup</referencedby>
        <referencedby refid="a00070_1a2752d2f553b89f2b722c14f98380b025" compoundref="a00026" startline="429" endline="437">updateBBox</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00070_1a9bd07491e1b481f02a5d7206b34cf346" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="a00058" kindref="compound">output</ref> &gt;</type>
        <definition>std::vector&lt;output&gt; enve::shell::m_out</definition>
        <argsstring></argsstring>
        <name>m_out</name>
        <qualifiedname>enve::shell::m_out</qualifiedname>
        <briefdescription>
<para>Contact parameters output vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="56" column="33" bodyfile="src/enve/shell.hxx" bodystart="56" bodyend="-1"/>
        <referencedby refid="a00070_1a372bd928da48a2e10931a23dc1cbe74f" compoundref="a00026" startline="739" endline="747">contactArea</referencedby>
        <referencedby refid="a00070_1afff3c3cc1451ea7b5190fcab2faff08e" compoundref="a00026" startline="689" endline="708">contactDepth</referencedby>
        <referencedby refid="a00070_1ac4a93448b8ca9cc276c82c33870f1f2c" compoundref="a00026" startline="637" endline="658">contactFriction</referencedby>
        <referencedby refid="a00070_1ae5e77948a3b67e4d1456dd80fd6cff15" compoundref="a00026" startline="583" endline="606">contactNormal</referencedby>
        <referencedby refid="a00070_1a1117628a990224ce2537e5bcea64ce0f" compoundref="a00026" startline="531" endline="552">contactPoint</referencedby>
        <referencedby refid="a00070_1a81452c44502522b33b842665a34cd351" compoundref="a00026" startline="836" endline="847">contactPointAffine</referencedby>
        <referencedby refid="a00070_1af3f7914461cc4e806fe52ed6701a0f00" compoundref="a00026" startline="778" endline="786">contactVolume</referencedby>
        <referencedby refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" compoundref="a00026" startline="74" endline="123">resize</referencedby>
        <referencedby refid="a00070_1ad38f267f9406df88069c28969d52eef8" compoundref="a00026" startline="453" endline="491">setup</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00070_1ae0b076c6c3e3fcb5a8857ee32d271012" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="a00074_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> &gt;</type>
        <definition>std::vector&lt;triangleground::vecptr&gt; enve::shell::m_candidates</definition>
        <argsstring></argsstring>
        <name>m_candidates</name>
        <qualifiedname>enve::shell::m_candidates</qualifiedname>
        <briefdescription>
<para>Candidates triangle vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="57" column="17" bodyfile="src/enve/shell.hxx" bodystart="57" bodyend="-1"/>
        <referencedby refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" compoundref="a00026" startline="74" endline="123">resize</referencedby>
        <referencedby refid="a00070_1ad38f267f9406df88069c28969d52eef8" compoundref="a00026" startline="453" endline="491">setup</referencedby>
        <referencedby refid="a00070_1a478059b1c43cfd0988ac3de656cb382b" compoundref="a00026" startline="1018" endline="1059">updateRibsCandidates</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00070_1a7840e1d408713ab4eb4b91e5c3912e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(shell const &amp;)=delete</argsstring>
        <name>shell</name>
        <qualifiedname>enve::shell::shell</qualifiedname>
        <param>
          <type><ref refid="a00070" kindref="compound">shell</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Shell copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="61" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a357daba48d94b16c8158af6bd5f2e8bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(shell &amp;&amp;)=delete</argsstring>
        <name>shell</name>
        <qualifiedname>enve::shell::shell</qualifiedname>
        <param>
          <type><ref refid="a00070" kindref="compound">shell</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Shell move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="64" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a297a8edd6d4b0976c988632c17fe3a9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00070" kindref="compound">shell</ref> &amp;</type>
        <definition>shell &amp; enve::shell::operator=</definition>
        <argsstring>(const shell &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>enve::shell::operator=</qualifiedname>
        <param>
          <type>const <ref refid="a00070" kindref="compound">shell</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Shell assignment operator <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="67" column="12"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a2d08f242d26599ce1369d965bf670270" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00070" kindref="compound">shell</ref> &amp;</type>
        <definition>shell &amp; enve::shell::operator=</definition>
        <argsstring>(shell &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>enve::shell::operator=</qualifiedname>
        <param>
          <type><ref refid="a00070" kindref="compound">shell</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Shell move assignment operator <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="70" column="12"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a523401b2c365390fca0a8a42a6c25be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::~shell</definition>
        <argsstring>(void)=default</argsstring>
        <name>~shell</name>
        <qualifiedname>enve::shell::~shell</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Shell class destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="73" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(size_t size, real r_x, real m_x, real r_y, real m_y, real l_y)</argsstring>
        <name>shell</name>
        <qualifiedname>enve::shell::shell</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <briefdescription><para>Input ribs number </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>r_x</declname>
          <briefdescription><para>Input shell radius on x axis (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>m_x</declname>
          <briefdescription><para>Input shell curve degree for x axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>r_y</declname>
          <briefdescription><para>Input shell radius on y axis (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>m_y</declname>
          <briefdescription><para>Input shell curve degree for y axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>l_y</declname>
          <briefdescription><para>Input surface half width on y axis (m) </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Shell class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="76" column="5" bodyfile="src/shell.cc" bodystart="41" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1ac3701a314a6491753133bdd9e36f54b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(size_t size, shape const &amp;shape_obj)</argsstring>
        <name>shell</name>
        <qualifiedname>enve::shell::shell</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <briefdescription><para>Input ribs number </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00066" kindref="compound">shape</ref> const &amp;</type>
          <declname>shape_obj</declname>
          <briefdescription><para>Input shape object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Shell class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="86" column="5" bodyfile="src/shell.cc" bodystart="59" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::resize</definition>
        <argsstring>(size_t size)</argsstring>
        <name>resize</name>
        <qualifiedname>enve::shell::resize</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <briefdescription><para>Input ribs number </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Resize shell size, position and stored contact results. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="93" column="5" bodyfile="src/shell.cc" bodystart="74" bodyend="123"/>
        <referencedby refid="a00070_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" compoundref="a00026" startline="41" endline="55">shell</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1aaeafa8ac9f588ebdf3f2b8722dde9290" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t enve::shell::size</definition>
        <argsstring>(void) const</argsstring>
        <name>size</name>
        <qualifiedname>enve::shell::size</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell ribs number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="99" column="5" bodyfile="src/shell.cc" bodystart="128" bodyend="132"/>
        <referencedby refid="a00070_1a372bd928da48a2e10931a23dc1cbe74f" compoundref="a00026" startline="739" endline="747">contactArea</referencedby>
        <referencedby refid="a00070_1afff3c3cc1451ea7b5190fcab2faff08e" compoundref="a00026" startline="689" endline="708">contactDepth</referencedby>
        <referencedby refid="a00070_1ac4a93448b8ca9cc276c82c33870f1f2c" compoundref="a00026" startline="637" endline="658">contactFriction</referencedby>
        <referencedby refid="a00070_1ae5e77948a3b67e4d1456dd80fd6cff15" compoundref="a00026" startline="583" endline="606">contactNormal</referencedby>
        <referencedby refid="a00070_1a1117628a990224ce2537e5bcea64ce0f" compoundref="a00026" startline="531" endline="552">contactPoint</referencedby>
        <referencedby refid="a00070_1a6116bf00919b1d950827b0458de414cd" compoundref="a00026" startline="852" endline="859">contactPointAffine</referencedby>
        <referencedby refid="a00070_1af3f7914461cc4e806fe52ed6701a0f00" compoundref="a00026" startline="778" endline="786">contactVolume</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="906" endline="1013">print</referencedby>
        <referencedby refid="a00070_1a23d2a9c7d4bc4b10558e05941582df2d" compoundref="a00026" startline="894" endline="901">relativeAngles</referencedby>
        <referencedby refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" compoundref="a00026" startline="74" endline="123">resize</referencedby>
        <referencedby refid="a00070_1ad38f267f9406df88069c28969d52eef8" compoundref="a00026" startline="453" endline="491">setup</referencedby>
        <referencedby refid="a00070_1a478059b1c43cfd0988ac3de656cb382b" compoundref="a00026" startline="1018" endline="1059">updateRibsCandidates</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ae545ab83f69df117efd3aefc98905b58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceMaxRadius</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceMaxRadius</name>
        <qualifiedname>enve::shell::surfaceMaxRadius</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell surface maximum radius (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="112" column="5" bodyfile="src/shell.cc" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a041572d89d883b768eb195b61775e99d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceMaxWidth</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceMaxWidth</name>
        <qualifiedname>enve::shell::surfaceMaxWidth</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell surface maximum width on y axis (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="117" column="5" bodyfile="src/shell.cc" bodystart="157" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a72cfa8296a664a3d3b538f7c97f187a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceWidth</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceWidth</name>
        <qualifiedname>enve::shell::surfaceWidth</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell surface width (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="122" column="5" bodyfile="src/shell.cc" bodystart="166" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a968cb22f2dddc6ed28d29fe61bfb9f25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::checkWidthBound</definition>
        <argsstring>(real y) const</argsstring>
        <name>checkWidthBound</name>
        <qualifiedname>enve::shell::checkWidthBound</qualifiedname>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get shell surface maximum width on reference (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="127" column="5" bodyfile="src/shell.cc" bodystart="175" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1afdf0e745ae4a5dbbc3daca2af53cd2d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceRadius</definition>
        <argsstring>(real y) const</argsstring>
        <name>surfaceRadius</name>
        <qualifiedname>enve::shell::surfaceRadius</qualifiedname>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get shell surface of revolution rib radius at y axis coordinate (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="133" column="5" bodyfile="src/shell.cc" bodystart="186" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a9ff4b3d279cf3bca199d71b6829bb10f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceDerivative</definition>
        <argsstring>(real y, real tolerance=EPSILON_MEDIUM) const</argsstring>
        <name>surfaceDerivative</name>
        <qualifiedname>enve::shell::surfaceDerivative</qualifiedname>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_MEDIUM</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get shell surface of revolution rib first derivative with respect to y coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="139" column="5" bodyfile="src/shell.cc" bodystart="197" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a4bbb973b459c409e07100b9f526d31f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceAngle</definition>
        <argsstring>(real y, real tolerance=EPSILON_MEDIUM) const</argsstring>
        <name>surfaceAngle</name>
        <qualifiedname>enve::shell::surfaceAngle</qualifiedname>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_MEDIUM</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get shell surface of revolution rib angle with respect to y axis (rad) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="146" column="5" bodyfile="src/shell.cc" bodystart="209" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1aadb3a2be11b94f1273596ed709fc9e23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::ribRadius</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>ribRadius</name>
        <qualifiedname>enve::shell::ribRadius</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input index </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th rib unloaded radius (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="153" column="5" bodyfile="src/shell.cc" bodystart="221" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1ad8a3d3f336041aae315b43022a7dbc3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>point</type>
        <definition>point enve::shell::ribCenter</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>ribCenter</name>
        <qualifiedname>enve::shell::ribCenter</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input index </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th rib center (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="159" column="5" bodyfile="src/shell.cc" bodystart="232" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a43a508efabf7462e0fd13262a39a47b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::ribWidth</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>ribWidth</name>
        <qualifiedname>enve::shell::ribWidth</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input index </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get rib width (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="165" column="5" bodyfile="src/shell.cc" bodystart="243" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1af3b256c4d6bb48cc12142e9e940d1b81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::ribAngle</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>ribAngle</name>
        <qualifiedname>enve::shell::ribAngle</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input index </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get rib angle (rad) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="171" column="5" bodyfile="src/shell.cc" bodystart="254" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1aa251db96c6db18b89408028c070426bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::translate</definition>
        <argsstring>(vec3 const &amp;vector)</argsstring>
        <name>translate</name>
        <qualifiedname>enve::shell::translate</qualifiedname>
        <param>
          <type>vec3 const &amp;</type>
          <declname>vector</declname>
          <briefdescription><para>Translation vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Translate shell by vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="186" column="5" bodyfile="src/shell.cc" bodystart="276" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a3d0282a1133a19e3e1ae06f91b35b194" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 enve::shell::translation</definition>
        <argsstring>(void) const</argsstring>
        <name>translation</name>
        <qualifiedname>enve::shell::translation</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns shell translation vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="192" column="5" bodyfile="src/shell.cc" bodystart="286" bodyend="290"/>
        <referencedby refid="a00070_1a478059b1c43cfd0988ac3de656cb382b" compoundref="a00026" startline="1018" endline="1059">updateRibsCandidates</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a25ad9b63a2daea89ab6b17e949028d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::rotate</definition>
        <argsstring>(real angle, vec3 const &amp;axis)</argsstring>
        <name>rotate</name>
        <qualifiedname>enve::shell::rotate</qualifiedname>
        <param>
          <type>real</type>
          <declname>angle</declname>
          <briefdescription><para>Input angle (rad) </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 const &amp;</type>
          <declname>axis</declname>
          <briefdescription><para>Input axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rotate shell by a rotation angle around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="197" column="5" bodyfile="src/shell.cc" bodystart="295" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a5ac7dbea127c06ee266b08053d775387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::rotate</definition>
        <argsstring>(real angle, std::string const &amp;axis)</argsstring>
        <name>rotate</name>
        <qualifiedname>enve::shell::rotate</qualifiedname>
        <param>
          <type>real</type>
          <declname>angle</declname>
          <briefdescription><para>Input angle (rad) </para>
</briefdescription>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>axis</declname>
          <briefdescription><para>Input axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rotate shell by a rotation angle around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="204" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1acd3e5c07070586785043b991f4ebcd3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>mat3</type>
        <definition>mat3 enve::shell::rotation</definition>
        <argsstring>(void) const</argsstring>
        <name>rotation</name>
        <qualifiedname>enve::shell::rotation</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns shell rotation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="211" column="5" bodyfile="src/shell.cc" bodystart="306" bodyend="310"/>
        <referencedby refid="a00070_1a34d0cda62f4f3f5ad7057222eed05fcf" compoundref="a00026" startline="864" endline="873">relativeAngles</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ad49487850eb0510d7b068f91501ca836" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>mat3</type>
        <definition>mat3 enve::shell::linear</definition>
        <argsstring>(void) const</argsstring>
        <name>linear</name>
        <qualifiedname>enve::shell::linear</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns shell linear matrix (rotation + scaling + shearing) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="216" column="5" bodyfile="src/shell.cc" bodystart="315" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1aa0639ac180bf0d51fdbd254e4494db3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::transform</definition>
        <argsstring>(affine const &amp;pose)</argsstring>
        <name>transform</name>
        <qualifiedname>enve::shell::transform</qualifiedname>
        <param>
          <type>affine const &amp;</type>
          <declname>pose</declname>
          <briefdescription><para>Input 4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set 4x4 affine transformation matrix <linebreak/>
Warning: Rotation matrix must be orthonormal! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="222" column="5" bodyfile="src/shell.cc" bodystart="324" bodyend="330"/>
        <referencedby refid="a00070_1ad38f267f9406df88069c28969d52eef8" compoundref="a00026" startline="453" endline="491">setup</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1aa9e3499b27a48163cf2c3ec44f930813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::transform</definition>
        <argsstring>(mat4 const &amp;pose)</argsstring>
        <name>transform</name>
        <qualifiedname>enve::shell::transform</qualifiedname>
        <param>
          <type>mat4 const &amp;</type>
          <declname>pose</declname>
          <briefdescription><para>Input 4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set 4x4 affine transformation matrix <linebreak/>
Warning: Rotation matrix must be orthonormal! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="229" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1ab8206d37a830c82ad372d3276556630a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>affine const &amp;</type>
        <definition>affine const  &amp; enve::shell::transformation</definition>
        <argsstring>(void) const</argsstring>
        <name>transformation</name>
        <qualifiedname>enve::shell::transformation</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get 4x4 affine transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="235" column="5" bodyfile="src/shell.cc" bodystart="335" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a9dfbf114a6470507835525791f1e98c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::checkTransformation</definition>
        <argsstring>(mat4 const &amp;pose, real tolerance=EPSILON_LOW) const</argsstring>
        <name>checkTransformation</name>
        <qualifiedname>enve::shell::checkTransformation</qualifiedname>
        <param>
          <type>mat4 const &amp;</type>
          <declname>pose</declname>
          <briefdescription><para>Input 4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_LOW</defval>
          <briefdescription><para>Affine trasformation othonomality check tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if 4x4 affine transformation matrix is othornormal and right-handed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="240" column="5" bodyfile="src/shell.cc" bodystart="344" bodyend="354"/>
        <referencedby refid="a00070_1a5330f87f27d94320663c28136796bf11" compoundref="a00026" startline="359" endline="366">checkTransformation</referencedby>
        <referencedby refid="a00070_1aa0639ac180bf0d51fdbd254e4494db3e" compoundref="a00026" startline="324" endline="330">transform</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a5330f87f27d94320663c28136796bf11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::checkTransformation</definition>
        <argsstring>(affine const &amp;pose, real tolerance=EPSILON_LOW) const</argsstring>
        <name>checkTransformation</name>
        <qualifiedname>enve::shell::checkTransformation</qualifiedname>
        <param>
          <type>affine const &amp;</type>
          <declname>pose</declname>
          <briefdescription><para>Input 4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_LOW</defval>
          <briefdescription><para>Affine trasformation othonomality check tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if 4x4 affine transformation matrix is othornormal and right-handed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="247" column="5" bodyfile="src/shell.cc" bodystart="359" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1ad7868ccdd90b807c75684cb51c256d03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 enve::shell::x</definition>
        <argsstring>(void) const</argsstring>
        <name>x</name>
        <qualifiedname>enve::shell::x</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get x vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="254" column="5" bodyfile="src/shell.cc" bodystart="371" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a1de4c83db18282e37892c7adb0224232" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 enve::shell::y</definition>
        <argsstring>(void) const</argsstring>
        <name>y</name>
        <qualifiedname>enve::shell::y</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get y vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="259" column="5" bodyfile="src/shell.cc" bodystart="380" bodyend="384"/>
        <referencedby refid="a00070_1aaf965391008cf6ff7d7e92502377e72b" compoundref="a00026" startline="817" endline="831">contactPointAffine</referencedby>
        <referencedby refid="a00070_1a478059b1c43cfd0988ac3de656cb382b" compoundref="a00026" startline="1018" endline="1059">updateRibsCandidates</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a79039f854236a5ae427da3f0868f988a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 enve::shell::z</definition>
        <argsstring>(void) const</argsstring>
        <name>z</name>
        <qualifiedname>enve::shell::z</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get z vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="264" column="5" bodyfile="src/shell.cc" bodystart="389" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a3758f1248a4e9a9487682560d75ae823" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::eulerAngles</definition>
        <argsstring>(vec3 &amp;angles) const</argsstring>
        <name>eulerAngles</name>
        <qualifiedname>enve::shell::eulerAngles</qualifiedname>
        <param>
          <type>vec3 &amp;</type>
          <declname>angles</declname>
          <briefdescription><para>Frame Euler angles </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current Euler angles (rad) <linebreak/>
WARNING: Rotation sequence ZXY! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="270" column="5" bodyfile="src/shell.cc" bodystart="398" bodyend="404"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="906" endline="1013">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ac9d1d2c263ae78a9b221120262cd9454" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; aabb &gt;</type>
        <definition>std::shared_ptr&lt; aabb &gt; enve::shell::BBox</definition>
        <argsstring>(void) const</argsstring>
        <name>BBox</name>
        <qualifiedname>enve::shell::BBox</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell bonding aabb as object pointer vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="285" column="5" bodyfile="src/shell.cc" bodystart="420" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a2752d2f553b89f2b722c14f98380b025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::updateBBox</definition>
        <argsstring>(void)</argsstring>
        <name>updateBBox</name>
        <qualifiedname>enve::shell::updateBBox</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Update shell bonding aabb. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="289" column="5" bodyfile="src/shell.cc" bodystart="429" bodyend="437"/>
        <referencedby refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" compoundref="a00026" startline="74" endline="123">resize</referencedby>
        <referencedby refid="a00070_1ad38f267f9406df88069c28969d52eef8" compoundref="a00026" startline="453" endline="491">setup</referencedby>
        <referencedby refid="a00070_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" compoundref="a00026" startline="41" endline="55">shell</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ad38f267f9406df88069c28969d52eef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::setup</definition>
        <argsstring>(ground::mesh const &amp;ground, affine const &amp;pose, std::string const method)</argsstring>
        <name>setup</name>
        <qualifiedname>enve::shell::setup</qualifiedname>
        <param>
          <type><ref refid="a00054" kindref="compound">ground::mesh</ref> const &amp;</type>
          <declname>ground</declname>
          <briefdescription><para>Mesh ground object </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>pose</declname>
          <briefdescription><para>4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <param>
          <type>std::string const</type>
          <declname>method</declname>
          <briefdescription><para>Method name (choose from: &quot;geometric&quot; or &quot;sampling&quot;) </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Update current shell position and find contact parameters (intersection with mesh) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="302" column="5" bodyfile="src/shell.cc" bodystart="453" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a82dfe49dcfa0f331affb18576f2a3246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::setup</definition>
        <argsstring>(ground::flat const &amp;ground, affine const &amp;pose, std::string const method)</argsstring>
        <name>setup</name>
        <qualifiedname>enve::shell::setup</qualifiedname>
        <param>
          <type><ref refid="a00050" kindref="compound">ground::flat</ref> const &amp;</type>
          <declname>ground</declname>
          <briefdescription><para>Flat ground object </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>pose</declname>
          <briefdescription><para>4x4 affine transformation </para>
</briefdescription>
        </param>
        <param>
          <type>std::string const</type>
          <declname>method</declname>
          <briefdescription><para>Method name (choose from: &quot;geometric&quot; or &quot;sampling&quot;) </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Update current shell position and find contact parameters (intersection with plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="310" column="5" bodyfile="src/shell.cc" bodystart="496" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a1117628a990224ce2537e5bcea64ce0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPoint</definition>
        <argsstring>(point &amp;point) const</argsstring>
        <name>contactPoint</name>
        <qualifiedname>enve::shell::contactPoint</qualifiedname>
        <param>
          <type>point &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="327" column="5" bodyfile="src/shell.cc" bodystart="531" bodyend="552"/>
        <referencedby refid="a00070_1aaf965391008cf6ff7d7e92502377e72b" compoundref="a00026" startline="817" endline="831">contactPointAffine</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="906" endline="1013">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a89109d80eb8c4365b5c7c3cc2a3946f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPoint</definition>
        <argsstring>(size_t i, point &amp;point) const</argsstring>
        <name>contactPoint</name>
        <qualifiedname>enve::shell::contactPoint</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="333" column="5" bodyfile="src/shell.cc" bodystart="557" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a5e7cd77d99b01e92288fd0e5ed884bb6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPoint</definition>
        <argsstring>(std::vector&lt; point &gt; &amp;point) const</argsstring>
        <name>contactPoint</name>
        <qualifiedname>enve::shell::contactPoint</qualifiedname>
        <param>
          <type>std::vector&lt; point &gt; &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Contact points vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact points vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="340" column="5" bodyfile="src/shell.cc" bodystart="569" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1ae5e77948a3b67e4d1456dd80fd6cff15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactNormal</definition>
        <argsstring>(vec3 &amp;normal) const</argsstring>
        <name>contactNormal</name>
        <qualifiedname>enve::shell::contactNormal</qualifiedname>
        <param>
          <type>vec3 &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Contact point normal direction </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact normal vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="346" column="5" bodyfile="src/shell.cc" bodystart="583" bodyend="606"/>
        <referencedby refid="a00070_1aaf965391008cf6ff7d7e92502377e72b" compoundref="a00026" startline="817" endline="831">contactPointAffine</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="906" endline="1013">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a3dc741308478849ef36b6b9622a48b62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactNormal</definition>
        <argsstring>(size_t i, vec3 &amp;normal) const</argsstring>
        <name>contactNormal</name>
        <qualifiedname>enve::shell::contactNormal</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Contact point normal direction </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact normal vector for the i-th rib. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="352" column="5" bodyfile="src/shell.cc" bodystart="611" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a58b2d3b655d5959a02ddad029a7efe04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactNormal</definition>
        <argsstring>(std::vector&lt; vec3 &gt; &amp;normal) const</argsstring>
        <name>contactNormal</name>
        <qualifiedname>enve::shell::contactNormal</qualifiedname>
        <param>
          <type>std::vector&lt; vec3 &gt; &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Contact point normal direction vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact normal vectors vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="359" column="5" bodyfile="src/shell.cc" bodystart="623" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1ac4a93448b8ca9cc276c82c33870f1f2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactFriction</definition>
        <argsstring>(real &amp;friction) const</argsstring>
        <name>contactFriction</name>
        <qualifiedname>enve::shell::contactFriction</qualifiedname>
        <param>
          <type>real &amp;</type>
          <declname>friction</declname>
          <briefdescription><para>Contact friction coefficient </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact friction coefficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="365" column="5" bodyfile="src/shell.cc" bodystart="637" bodyend="658"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="906" endline="1013">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a1b1657dc9797369757849522b24b77ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactFriction</definition>
        <argsstring>(size_t i, real &amp;friction) const</argsstring>
        <name>contactFriction</name>
        <qualifiedname>enve::shell::contactFriction</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>friction</declname>
          <briefdescription><para>Contact friction coefficient </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th rib contact friction coefficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="371" column="5" bodyfile="src/shell.cc" bodystart="663" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a03bd693acbd8bd238cddd162c055ec82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactFriction</definition>
        <argsstring>(std::vector&lt; real &gt; &amp;friction) const</argsstring>
        <name>contactFriction</name>
        <qualifiedname>enve::shell::contactFriction</qualifiedname>
        <param>
          <type>std::vector&lt; real &gt; &amp;</type>
          <declname>friction</declname>
          <briefdescription><para>Contact friction coefficient vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact friction coefficient vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="378" column="5" bodyfile="src/shell.cc" bodystart="675" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1afff3c3cc1451ea7b5190fcab2faff08e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactDepth</definition>
        <argsstring>(real &amp;depth) const</argsstring>
        <name>contactDepth</name>
        <qualifiedname>enve::shell::contactDepth</qualifiedname>
        <param>
          <type>real &amp;</type>
          <declname>depth</declname>
          <briefdescription><para>Contact depth </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact depth at center point (m) (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="384" column="5" bodyfile="src/shell.cc" bodystart="689" bodyend="708"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="906" endline="1013">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1af483b24e7b84b70766256eb4645eb09b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactDepth</definition>
        <argsstring>(size_t i, real &amp;depth) const</argsstring>
        <name>contactDepth</name>
        <qualifiedname>enve::shell::contactDepth</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>depth</declname>
          <briefdescription><para>Contact depth </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact depth at center point for the i-th rib (m) (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="390" column="5" bodyfile="src/shell.cc" bodystart="713" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a4a17f4510dca5cf940fa1aff817d7192" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactDepth</definition>
        <argsstring>(std::vector&lt; real &gt; &amp;depth) const</argsstring>
        <name>contactDepth</name>
        <qualifiedname>enve::shell::contactDepth</qualifiedname>
        <param>
          <type>std::vector&lt; real &gt; &amp;</type>
          <declname>depth</declname>
          <briefdescription><para>Contact depth </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact depth vector (m) (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="397" column="5" bodyfile="src/shell.cc" bodystart="725" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a372bd928da48a2e10931a23dc1cbe74f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactArea</definition>
        <argsstring>(real &amp;area) const</argsstring>
        <name>contactArea</name>
        <qualifiedname>enve::shell::contactArea</qualifiedname>
        <param>
          <type>real &amp;</type>
          <declname>area</declname>
          <briefdescription><para>Contact area </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact area (m^2) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="403" column="5" bodyfile="src/shell.cc" bodystart="739" bodyend="747"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="906" endline="1013">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a2fea2339cd95016383e47918494c0a84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactArea</definition>
        <argsstring>(size_t i, real &amp;area) const</argsstring>
        <name>contactArea</name>
        <qualifiedname>enve::shell::contactArea</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>area</declname>
          <briefdescription><para>Contact area </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th rib contact area (m^2) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="409" column="5" bodyfile="src/shell.cc" bodystart="752" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a1c40df577f1bd02722a2bc370985c9da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactArea</definition>
        <argsstring>(std::vector&lt; real &gt; &amp;area) const</argsstring>
        <name>contactArea</name>
        <qualifiedname>enve::shell::contactArea</qualifiedname>
        <param>
          <type>std::vector&lt; real &gt; &amp;</type>
          <declname>area</declname>
          <briefdescription><para>Contact area vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact area vector (m^2) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="416" column="5" bodyfile="src/shell.cc" bodystart="764" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1af3f7914461cc4e806fe52ed6701a0f00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactVolume</definition>
        <argsstring>(real &amp;volume) const</argsstring>
        <name>contactVolume</name>
        <qualifiedname>enve::shell::contactVolume</qualifiedname>
        <param>
          <type>real &amp;</type>
          <declname>volume</declname>
          <briefdescription><para>Contact volume </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact volume (m^3) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="422" column="5" bodyfile="src/shell.cc" bodystart="778" bodyend="786"/>
        <referencedby refid="a00070_1afff3c3cc1451ea7b5190fcab2faff08e" compoundref="a00026" startline="689" endline="708">contactDepth</referencedby>
        <referencedby refid="a00070_1ac4a93448b8ca9cc276c82c33870f1f2c" compoundref="a00026" startline="637" endline="658">contactFriction</referencedby>
        <referencedby refid="a00070_1ae5e77948a3b67e4d1456dd80fd6cff15" compoundref="a00026" startline="583" endline="606">contactNormal</referencedby>
        <referencedby refid="a00070_1a1117628a990224ce2537e5bcea64ce0f" compoundref="a00026" startline="531" endline="552">contactPoint</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="906" endline="1013">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ae37a629eec2a9160404bcc922bedf850" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactVolume</definition>
        <argsstring>(size_t i, real &amp;volume) const</argsstring>
        <name>contactVolume</name>
        <qualifiedname>enve::shell::contactVolume</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>volume</declname>
          <briefdescription><para>Contact volume </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th rib contact volume (m^3) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="428" column="5" bodyfile="src/shell.cc" bodystart="791" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1aa31fb1eae3e748a610af52ab9421c65f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactVolume</definition>
        <argsstring>(std::vector&lt; real &gt; &amp;volume) const</argsstring>
        <name>contactVolume</name>
        <qualifiedname>enve::shell::contactVolume</qualifiedname>
        <param>
          <type>std::vector&lt; real &gt; &amp;</type>
          <declname>volume</declname>
          <briefdescription><para>Contact volume vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact volume vector (m^3) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="435" column="5" bodyfile="src/shell.cc" bodystart="803" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1aaf965391008cf6ff7d7e92502377e72b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointAffine</definition>
        <argsstring>(affine &amp;pose) const</argsstring>
        <name>contactPointAffine</name>
        <qualifiedname>enve::shell::contactPointAffine</qualifiedname>
        <param>
          <type>affine &amp;</type>
          <declname>pose</declname>
          <briefdescription><para>Contact point affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point 4x4 affine transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="441" column="5" bodyfile="src/shell.cc" bodystart="817" bodyend="831"/>
        <referencedby refid="a00070_1a6116bf00919b1d950827b0458de414cd" compoundref="a00026" startline="852" endline="859">contactPointAffine</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="906" endline="1013">print</referencedby>
        <referencedby refid="a00070_1a34d0cda62f4f3f5ad7057222eed05fcf" compoundref="a00026" startline="864" endline="873">relativeAngles</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a81452c44502522b33b842665a34cd351" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointAffine</definition>
        <argsstring>(size_t i, affine &amp;pose) const</argsstring>
        <name>contactPointAffine</name>
        <qualifiedname>enve::shell::contactPointAffine</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>affine &amp;</type>
          <declname>pose</declname>
          <briefdescription><para>Contact point affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point 4x4 affine transformation matrix for the i-th rib. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="447" column="5" bodyfile="src/shell.cc" bodystart="836" bodyend="847"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a6116bf00919b1d950827b0458de414cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointAffine</definition>
        <argsstring>(std::vector&lt; affine &gt; &amp;pose) const</argsstring>
        <name>contactPointAffine</name>
        <qualifiedname>enve::shell::contactPointAffine</qualifiedname>
        <param>
          <type>std::vector&lt; affine &gt; &amp;</type>
          <declname>pose</declname>
          <briefdescription><para>Contact point affine transformation matrices vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point 4x4 affine transformation matrices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="454" column="5" bodyfile="src/shell.cc" bodystart="852" bodyend="859"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a34d0cda62f4f3f5ad7057222eed05fcf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::relativeAngles</definition>
        <argsstring>(vec3 &amp;angles) const</argsstring>
        <name>relativeAngles</name>
        <qualifiedname>enve::shell::relativeAngles</qualifiedname>
        <param>
          <type>vec3 &amp;</type>
          <declname>angles</declname>
          <briefdescription><para>Relative angles vector (rad) </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get shell relative angles (rad) <linebreak/>
WARNING: Rotation sequence ZXY! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="461" column="5" bodyfile="src/shell.cc" bodystart="864" bodyend="873"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="906" endline="1013">print</referencedby>
        <referencedby refid="a00070_1a23d2a9c7d4bc4b10558e05941582df2d" compoundref="a00026" startline="894" endline="901">relativeAngles</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ae48557597d39b647eac55a03704bdfc3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::relativeAngles</definition>
        <argsstring>(size_t i, vec3 &amp;angles) const</argsstring>
        <name>relativeAngles</name>
        <qualifiedname>enve::shell::relativeAngles</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>angles</declname>
          <briefdescription><para>Relative angles vector (rad) </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get shell relative angles for the i-th rib (rad) <linebreak/>
WARNING: Rotation sequence ZXY! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="468" column="5" bodyfile="src/shell.cc" bodystart="878" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a23d2a9c7d4bc4b10558e05941582df2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::relativeAngles</definition>
        <argsstring>(std::vector&lt; vec3 &gt; &amp;angles) const</argsstring>
        <name>relativeAngles</name>
        <qualifiedname>enve::shell::relativeAngles</qualifiedname>
        <param>
          <type>std::vector&lt; vec3 &gt; &amp;</type>
          <declname>angles</declname>
          <briefdescription><para>Relative angles vector (rad) </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get shell relative angles as vector (rad) <linebreak/>
WARNING: Rotation sequence ZXY! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="476" column="5" bodyfile="src/shell.cc" bodystart="894" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a1a425eec93c459c7542b22b1c28c5417" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::print</definition>
        <argsstring>(out_stream &amp;os) const</argsstring>
        <name>print</name>
        <qualifiedname>enve::shell::print</qualifiedname>
        <param>
          <type>out_stream &amp;</type>
          <declname>os</declname>
          <briefdescription><para>Output stream type </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Print contact parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="482" column="5" bodyfile="src/shell.cc" bodystart="906" bodyend="1013"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="a00070_1a478059b1c43cfd0988ac3de656cb382b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::updateRibsCandidates</definition>
        <argsstring>(triangleground::vecptr const &amp;local_ground)</argsstring>
        <name>updateRibsCandidates</name>
        <qualifiedname>enve::shell::updateRibsCandidates</qualifiedname>
        <param>
          <type><ref refid="a00074_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> const &amp;</type>
          <declname>local_ground</declname>
          <briefdescription><para>Local triangles candidate list </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Update the list of ribs candidates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/shell.hxx" line="489" column="5" bodyfile="src/shell.cc" bodystart="1018" bodyend="1059"/>
        <referencedby refid="a00070_1ad38f267f9406df88069c28969d52eef8" compoundref="a00026" startline="453" endline="491">setup</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for ENVE shell. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>affine</label>
      </node>
      <node id="1">
        <label>enve::shell</label>
        <link refid="a00070"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_affine</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/enve/shell.hxx" line="45" column="3" bodyfile="src/enve/shell.hxx" bodystart="46" bodyend="493"/>
    <listofallmembers>
      <member refid="a00070_1ac9d1d2c263ae78a9b221120262cd9454" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>BBox</name></member>
      <member refid="a00070_1a9dfbf114a6470507835525791f1e98c3" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>checkTransformation</name></member>
      <member refid="a00070_1a5330f87f27d94320663c28136796bf11" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>checkTransformation</name></member>
      <member refid="a00070_1a968cb22f2dddc6ed28d29fe61bfb9f25" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>checkWidthBound</name></member>
      <member refid="a00070_1a372bd928da48a2e10931a23dc1cbe74f" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactArea</name></member>
      <member refid="a00070_1a2fea2339cd95016383e47918494c0a84" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactArea</name></member>
      <member refid="a00070_1a1c40df577f1bd02722a2bc370985c9da" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactArea</name></member>
      <member refid="a00070_1afff3c3cc1451ea7b5190fcab2faff08e" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactDepth</name></member>
      <member refid="a00070_1af483b24e7b84b70766256eb4645eb09b" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactDepth</name></member>
      <member refid="a00070_1a4a17f4510dca5cf940fa1aff817d7192" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactDepth</name></member>
      <member refid="a00070_1ac4a93448b8ca9cc276c82c33870f1f2c" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactFriction</name></member>
      <member refid="a00070_1a1b1657dc9797369757849522b24b77ca" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactFriction</name></member>
      <member refid="a00070_1a03bd693acbd8bd238cddd162c055ec82" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactFriction</name></member>
      <member refid="a00070_1ae5e77948a3b67e4d1456dd80fd6cff15" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactNormal</name></member>
      <member refid="a00070_1a3dc741308478849ef36b6b9622a48b62" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactNormal</name></member>
      <member refid="a00070_1a58b2d3b655d5959a02ddad029a7efe04" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactNormal</name></member>
      <member refid="a00070_1a1117628a990224ce2537e5bcea64ce0f" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPoint</name></member>
      <member refid="a00070_1a89109d80eb8c4365b5c7c3cc2a3946f8" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPoint</name></member>
      <member refid="a00070_1a5e7cd77d99b01e92288fd0e5ed884bb6" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPoint</name></member>
      <member refid="a00070_1aaf965391008cf6ff7d7e92502377e72b" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointAffine</name></member>
      <member refid="a00070_1a81452c44502522b33b842665a34cd351" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointAffine</name></member>
      <member refid="a00070_1a6116bf00919b1d950827b0458de414cd" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointAffine</name></member>
      <member refid="a00070_1af3f7914461cc4e806fe52ed6701a0f00" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactVolume</name></member>
      <member refid="a00070_1ae37a629eec2a9160404bcc922bedf850" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactVolume</name></member>
      <member refid="a00070_1aa31fb1eae3e748a610af52ab9421c65f" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactVolume</name></member>
      <member refid="a00070_1a3758f1248a4e9a9487682560d75ae823" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>eulerAngles</name></member>
      <member refid="a00070_1ad49487850eb0510d7b068f91501ca836" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>linear</name></member>
      <member refid="a00070_1a1950f8b6966e0277bf7b9266bb8929af" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_aabb</name></member>
      <member refid="a00070_1a0fc8caf160157febbc5fa0ee0b4ea0ad" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_affine</name></member>
      <member refid="a00070_1ae0b076c6c3e3fcb5a8857ee32d271012" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_candidates</name></member>
      <member refid="a00070_1a9bd07491e1b481f02a5d7206b34cf346" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_out</name></member>
      <member refid="a00070_1ac12fbcd8d579d4e0e6cb3744f27b3691" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_ribs</name></member>
      <member refid="a00070_1a442a1c35765c1b3c01a4e20772fddef9" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_shape</name></member>
      <member refid="a00070_1a297a8edd6d4b0976c988632c17fe3a9f" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>operator=</name></member>
      <member refid="a00070_1a2d08f242d26599ce1369d965bf670270" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>operator=</name></member>
      <member refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>print</name></member>
      <member refid="a00070_1af27992d971057759d268f102975d62fb" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ptr</name></member>
      <member refid="a00070_1a34d0cda62f4f3f5ad7057222eed05fcf" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>relativeAngles</name></member>
      <member refid="a00070_1ae48557597d39b647eac55a03704bdfc3" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>relativeAngles</name></member>
      <member refid="a00070_1a23d2a9c7d4bc4b10558e05941582df2d" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>relativeAngles</name></member>
      <member refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>resize</name></member>
      <member refid="a00070_1af3b256c4d6bb48cc12142e9e940d1b81" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ribAngle</name></member>
      <member refid="a00070_1ad8a3d3f336041aae315b43022a7dbc3c" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ribCenter</name></member>
      <member refid="a00070_1aadb3a2be11b94f1273596ed709fc9e23" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ribRadius</name></member>
      <member refid="a00070_1a43a508efabf7462e0fd13262a39a47b4" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ribWidth</name></member>
      <member refid="a00070_1a25ad9b63a2daea89ab6b17e949028d8d" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>rotate</name></member>
      <member refid="a00070_1a5ac7dbea127c06ee266b08053d775387" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>rotate</name></member>
      <member refid="a00070_1acd3e5c07070586785043b991f4ebcd3b" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>rotation</name></member>
      <member refid="a00070_1ad38f267f9406df88069c28969d52eef8" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>setup</name></member>
      <member refid="a00070_1a82dfe49dcfa0f331affb18576f2a3246" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>setup</name></member>
      <member refid="a00070_1a7840e1d408713ab4eb4b91e5c3912e07" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00070_1a357daba48d94b16c8158af6bd5f2e8bb" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00070_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00070_1ac3701a314a6491753133bdd9e36f54b9" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00070_1aaeafa8ac9f588ebdf3f2b8722dde9290" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>size</name></member>
      <member refid="a00070_1a4bbb973b459c409e07100b9f526d31f2" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceAngle</name></member>
      <member refid="a00070_1a9ff4b3d279cf3bca199d71b6829bb10f" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceDerivative</name></member>
      <member refid="a00070_1ae545ab83f69df117efd3aefc98905b58" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceMaxRadius</name></member>
      <member refid="a00070_1a041572d89d883b768eb195b61775e99d" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceMaxWidth</name></member>
      <member refid="a00070_1afdf0e745ae4a5dbbc3daca2af53cd2d1" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceRadius</name></member>
      <member refid="a00070_1a72cfa8296a664a3d3b538f7c97f187a4" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceWidth</name></member>
      <member refid="a00070_1aa0639ac180bf0d51fdbd254e4494db3e" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>transform</name></member>
      <member refid="a00070_1aa9e3499b27a48163cf2c3ec44f930813" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>transform</name></member>
      <member refid="a00070_1ab8206d37a830c82ad372d3276556630a" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>transformation</name></member>
      <member refid="a00070_1aa251db96c6db18b89408028c070426bf" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>translate</name></member>
      <member refid="a00070_1a3d0282a1133a19e3e1ae06f91b35b194" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>translation</name></member>
      <member refid="a00070_1a2752d2f553b89f2b722c14f98380b025" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>updateBBox</name></member>
      <member refid="a00070_1a478059b1c43cfd0988ac3de656cb382b" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>updateRibsCandidates</name></member>
      <member refid="a00070_1a14b3fa61d852ebaabd3603818d74ca6a" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>vecptr</name></member>
      <member refid="a00070_1ad7868ccdd90b807c75684cb51c256d03" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>x</name></member>
      <member refid="a00070_1a1de4c83db18282e37892c7adb0224232" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>y</name></member>
      <member refid="a00070_1a79039f854236a5ae427da3f0868f988a" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>z</name></member>
      <member refid="a00070_1a523401b2c365390fca0a8a42a6c25be4" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>~shell</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
