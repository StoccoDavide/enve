<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="a00070" kind="class" language="C++" prot="public">
    <compoundname>enve::shell</compoundname>
    <includes refid="a00008" local="no">enve_shell.hh</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a00070_1af27992d971057759d268f102975d62fb" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="a00070" kindref="compound">shell</ref> const  &gt;</type>
        <definition>typedef std::shared_ptr&lt;shell const&gt; enve::shell::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <briefdescription>
<para>Pointer to shell object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="70" column="29" bodyfile="include/enve_shell.hh" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00070_1a14b3fa61d852ebaabd3603818d74ca6a" prot="public" static="no">
        <type>std::vector&lt; <ref refid="a00070_1af27992d971057759d268f102975d62fb" kindref="member">shell::ptr</ref> &gt;</type>
        <definition>typedef std::vector&lt;shell::ptr&gt; enve::shell::vecptr</definition>
        <argsstring></argsstring>
        <name>vecptr</name>
        <briefdescription>
<para>Vector of pointers to shell objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="71" column="30" bodyfile="include/enve_shell.hh" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a00070_1a0fc8caf160157febbc5fa0ee0b4ea0ad" prot="private" static="no" mutable="no">
        <type>affine</type>
        <definition>affine enve::shell::m_affine</definition>
        <argsstring></argsstring>
        <name>m_affine</name>
        <briefdescription>
<para>Shell reference frame (ISO) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="74" column="28" bodyfile="include/enve_shell.hh" bodystart="74" bodyend="-1"/>
        <referencedby refid="a00070_1a3758f1248a4e9a9487682560d75ae823" compoundref="a00026" startline="404" endline="410">eulerAngles</referencedby>
        <referencedby refid="a00070_1ad49487850eb0510d7b068f91501ca836" compoundref="a00026" startline="311" endline="315">linear</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="894" endline="997">print</referencedby>
        <referencedby refid="a00070_1a25ad9b63a2daea89ab6b17e949028d8d" compoundref="a00026" startline="291" endline="297">rotate</referencedby>
        <referencedby refid="a00070_1acd3e5c07070586785043b991f4ebcd3b" compoundref="a00026" startline="302" endline="306">rotation</referencedby>
        <referencedby refid="a00070_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" compoundref="a00026" startline="56" endline="70">shell</referencedby>
        <referencedby refid="a00070_1a5ea27e946e4bae2651823ff03a605665" compoundref="a00026" startline="320" endline="326">transform</referencedby>
        <referencedby refid="a00070_1ab8206d37a830c82ad372d3276556630a" compoundref="a00026" startline="342" endline="346">transformation</referencedby>
        <referencedby refid="a00070_1a812b5a7947d74eff88e5b9cfe24c9ef0" compoundref="a00026" startline="272" endline="277">translate</referencedby>
        <referencedby refid="a00070_1a3d0282a1133a19e3e1ae06f91b35b194" compoundref="a00026" startline="282" endline="286">translation</referencedby>
        <referencedby refid="a00070_1a2752d2f553b89f2b722c14f98380b025" compoundref="a00026" startline="435" endline="443">updateBBox</referencedby>
        <referencedby refid="a00070_1ad7868ccdd90b807c75684cb51c256d03" compoundref="a00026" startline="377" endline="381">x</referencedby>
        <referencedby refid="a00070_1a1de4c83db18282e37892c7adb0224232" compoundref="a00026" startline="386" endline="390">y</referencedby>
        <referencedby refid="a00070_1a79039f854236a5ae427da3f0868f988a" compoundref="a00026" startline="395" endline="399">z</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00070_1ac12fbcd8d579d4e0e6cb3744f27b3691" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="a00062" kindref="compound">rib</ref> &gt;</type>
        <definition>std::vector&lt;rib&gt; enve::shell::m_ribs</definition>
        <argsstring></argsstring>
        <name>m_ribs</name>
        <briefdescription>
<para>Shell ribs vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="75" column="23" bodyfile="include/enve_shell.hh" bodystart="75" bodyend="-1"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="894" endline="997">print</referencedby>
        <referencedby refid="a00070_1ae48557597d39b647eac55a03704bdfc3" compoundref="a00026" startline="866" endline="877">relativeAngles</referencedby>
        <referencedby refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" compoundref="a00026" startline="89" endline="119">resize</referencedby>
        <referencedby refid="a00070_1af3b256c4d6bb48cc12142e9e940d1b81" compoundref="a00026" startline="250" endline="256">ribAngle</referencedby>
        <referencedby refid="a00070_1ad8a3d3f336041aae315b43022a7dbc3c" compoundref="a00026" startline="228" endline="234">ribCenter</referencedby>
        <referencedby refid="a00070_1aadb3a2be11b94f1273596ed709fc9e23" compoundref="a00026" startline="217" endline="223">ribRadius</referencedby>
        <referencedby refid="a00070_1a43a508efabf7462e0fd13262a39a47b4" compoundref="a00026" startline="239" endline="245">ribWidth</referencedby>
        <referencedby refid="a00070_1ad2f17102d34fe2239688b38bede9868b" compoundref="a00026" startline="459" endline="498">setup</referencedby>
        <referencedby refid="a00070_1aaeafa8ac9f588ebdf3f2b8722dde9290" compoundref="a00026" startline="124" endline="128">size</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00070_1a442a1c35765c1b3c01a4e20772fddef9" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="a00066" kindref="compound">shape</ref> &gt;</type>
        <definition>std::shared_ptr&lt;shape&gt; enve::shell::m_shape</definition>
        <argsstring></argsstring>
        <name>m_shape</name>
        <briefdescription>
<para>Shell shape. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="76" column="21" bodyfile="include/enve_shell.hh" bodystart="76" bodyend="-1"/>
        <referencedby refid="a00070_1a968cb22f2dddc6ed28d29fe61bfb9f25" compoundref="a00026" startline="171" endline="177">checkWidthBound</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="894" endline="997">print</referencedby>
        <referencedby refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" compoundref="a00026" startline="89" endline="119">resize</referencedby>
        <referencedby refid="a00070_1a4bbb973b459c409e07100b9f526d31f2" compoundref="a00026" startline="205" endline="212">surfaceAngle</referencedby>
        <referencedby refid="a00070_1a9ff4b3d279cf3bca199d71b6829bb10f" compoundref="a00026" startline="193" endline="200">surfaceDerivative</referencedby>
        <referencedby refid="a00070_1ae545ab83f69df117efd3aefc98905b58" compoundref="a00026" startline="144" endline="148">surfaceMaxRadius</referencedby>
        <referencedby refid="a00070_1a041572d89d883b768eb195b61775e99d" compoundref="a00026" startline="153" endline="157">surfaceMaxWidth</referencedby>
        <referencedby refid="a00070_1afdf0e745ae4a5dbbc3daca2af53cd2d1" compoundref="a00026" startline="182" endline="188">surfaceRadius</referencedby>
        <referencedby refid="a00070_1a72cfa8296a664a3d3b538f7c97f187a4" compoundref="a00026" startline="162" endline="166">surfaceWidth</referencedby>
        <referencedby refid="a00070_1a2752d2f553b89f2b722c14f98380b025" compoundref="a00026" startline="435" endline="443">updateBBox</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00070_1a1950f8b6966e0277bf7b9266bb8929af" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; aabb &gt;</type>
        <definition>std::shared_ptr&lt;aabb&gt; enve::shell::m_aabb</definition>
        <argsstring></argsstring>
        <name>m_aabb</name>
        <briefdescription>
<para>Shell bounding aabb (must be transformed in the mesh reference frame before intersection!) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="77" column="22" bodyfile="include/enve_shell.hh" bodystart="77" bodyend="-1"/>
        <referencedby refid="a00070_1ac9d1d2c263ae78a9b221120262cd9454" compoundref="a00026" startline="426" endline="430">BBox</referencedby>
        <referencedby refid="a00070_1ad2f17102d34fe2239688b38bede9868b" compoundref="a00026" startline="459" endline="498">setup</referencedby>
        <referencedby refid="a00070_1a2752d2f553b89f2b722c14f98380b025" compoundref="a00026" startline="435" endline="443">updateBBox</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00070_1a9bd07491e1b481f02a5d7206b34cf346" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="a00058" kindref="compound">output</ref> &gt;</type>
        <definition>std::vector&lt;output&gt; enve::shell::m_out</definition>
        <argsstring></argsstring>
        <name>m_out</name>
        <briefdescription>
<para>Contact parameters output vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="78" column="20" bodyfile="include/enve_shell.hh" bodystart="78" bodyend="-1"/>
        <referencedby refid="a00070_1a372bd928da48a2e10931a23dc1cbe74f" compoundref="a00026" startline="736" endline="744">contactArea</referencedby>
        <referencedby refid="a00070_1afff3c3cc1451ea7b5190fcab2faff08e" compoundref="a00026" startline="689" endline="705">contactDepth</referencedby>
        <referencedby refid="a00070_1ac4a93448b8ca9cc276c82c33870f1f2c" compoundref="a00026" startline="642" endline="660">contactFriction</referencedby>
        <referencedby refid="a00070_1ae5e77948a3b67e4d1456dd80fd6cff15" compoundref="a00026" startline="591" endline="611">contactNormal</referencedby>
        <referencedby refid="a00070_1a1117628a990224ce2537e5bcea64ce0f" compoundref="a00026" startline="542" endline="560">contactPoint</referencedby>
        <referencedby refid="a00070_1a927d071289063cf3e734dea433313a41" compoundref="a00026" startline="827" endline="836">contactPointAffine</referencedby>
        <referencedby refid="a00070_1af3f7914461cc4e806fe52ed6701a0f00" compoundref="a00026" startline="773" endline="781">contactVolume</referencedby>
        <referencedby refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" compoundref="a00026" startline="89" endline="119">resize</referencedby>
        <referencedby refid="a00070_1ad2f17102d34fe2239688b38bede9868b" compoundref="a00026" startline="459" endline="498">setup</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00070_1a9e3dfd623bc883cb0dbab5fdad026a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::~shell</definition>
        <argsstring>(void)</argsstring>
        <name>~shell</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Shell class destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="82" column="5" bodyfile="src/enve_shell.cc" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a7840e1d408713ab4eb4b91e5c3912e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(shell const &amp;)=delete</argsstring>
        <name>shell</name>
        <param>
          <type><ref refid="a00070" kindref="compound">shell</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Shell copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="85" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1afda23b623e717fdd16126eb5de7685e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(shell const &amp;&amp;)=delete</argsstring>
        <name>shell</name>
        <param>
          <type><ref refid="a00070" kindref="compound">shell</ref> const &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Shell move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="88" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(size_t size, real r_x, real m_x, real r_y, real m_y, real l_y)</argsstring>
        <name>shell</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <briefdescription><para>Input ribs number </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>r_x</declname>
          <briefdescription><para>Input shell radius on x axis (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>m_x</declname>
          <briefdescription><para>Input shell curve degree for x axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>r_y</declname>
          <briefdescription><para>Input shell radius on y axis (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>m_y</declname>
          <briefdescription><para>Input shell curve degree for y axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>l_y</declname>
          <briefdescription><para>Input surface half width on y axis (m) </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Shell class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="91" column="5" bodyfile="src/enve_shell.cc" bodystart="56" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1af45510d7118c1f0aea21c2dc7bfcbeff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(size_t size, shape const &amp;shape_in)</argsstring>
        <name>shell</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <briefdescription><para>Input ribs number </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00066" kindref="compound">shape</ref> const &amp;</type>
          <declname>shape_in</declname>
          <briefdescription><para>Input shape object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Shell class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="101" column="5" bodyfile="src/enve_shell.cc" bodystart="74" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::resize</definition>
        <argsstring>(size_t size)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <briefdescription><para>Input ribs number </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Resize shell size, position and stored contact results. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="108" column="5" bodyfile="src/enve_shell.cc" bodystart="89" bodyend="119"/>
        <referencedby refid="a00070_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" compoundref="a00026" startline="56" endline="70">shell</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1aaeafa8ac9f588ebdf3f2b8722dde9290" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t enve::shell::size</definition>
        <argsstring>(void) const</argsstring>
        <name>size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell ribs number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="114" column="5" bodyfile="src/enve_shell.cc" bodystart="124" bodyend="128"/>
        <referencedby refid="a00070_1a372bd928da48a2e10931a23dc1cbe74f" compoundref="a00026" startline="736" endline="744">contactArea</referencedby>
        <referencedby refid="a00070_1afff3c3cc1451ea7b5190fcab2faff08e" compoundref="a00026" startline="689" endline="705">contactDepth</referencedby>
        <referencedby refid="a00070_1ac4a93448b8ca9cc276c82c33870f1f2c" compoundref="a00026" startline="642" endline="660">contactFriction</referencedby>
        <referencedby refid="a00070_1ae5e77948a3b67e4d1456dd80fd6cff15" compoundref="a00026" startline="591" endline="611">contactNormal</referencedby>
        <referencedby refid="a00070_1a1117628a990224ce2537e5bcea64ce0f" compoundref="a00026" startline="542" endline="560">contactPoint</referencedby>
        <referencedby refid="a00070_1aa74194b2f8d72799adeb8a061edff043" compoundref="a00026" startline="841" endline="847">contactPointAffine</referencedby>
        <referencedby refid="a00070_1af3f7914461cc4e806fe52ed6701a0f00" compoundref="a00026" startline="773" endline="781">contactVolume</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="894" endline="997">print</referencedby>
        <referencedby refid="a00070_1a23d2a9c7d4bc4b10558e05941582df2d" compoundref="a00026" startline="882" endline="889">relativeAngles</referencedby>
        <referencedby refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" compoundref="a00026" startline="89" endline="119">resize</referencedby>
        <referencedby refid="a00070_1ad2f17102d34fe2239688b38bede9868b" compoundref="a00026" startline="459" endline="498">setup</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ae545ab83f69df117efd3aefc98905b58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceMaxRadius</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceMaxRadius</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell surface maximum radius (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="127" column="5" bodyfile="src/enve_shell.cc" bodystart="144" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a041572d89d883b768eb195b61775e99d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceMaxWidth</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceMaxWidth</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell surface maximum width on y axis (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="131" column="5" bodyfile="src/enve_shell.cc" bodystart="153" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a72cfa8296a664a3d3b538f7c97f187a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceWidth</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceWidth</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell surface width (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="135" column="5" bodyfile="src/enve_shell.cc" bodystart="162" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a968cb22f2dddc6ed28d29fe61bfb9f25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::checkWidthBound</definition>
        <argsstring>(real y) const</argsstring>
        <name>checkWidthBound</name>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get shell surface maximum width on reference (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="139" column="5" bodyfile="src/enve_shell.cc" bodystart="171" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1afdf0e745ae4a5dbbc3daca2af53cd2d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceRadius</definition>
        <argsstring>(real y) const</argsstring>
        <name>surfaceRadius</name>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get shell surface of revolution rib radius at y axis coordinate (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="145" column="5" bodyfile="src/enve_shell.cc" bodystart="182" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a9ff4b3d279cf3bca199d71b6829bb10f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceDerivative</definition>
        <argsstring>(real y, real tolerance=EPSILON_MEDIUM) const</argsstring>
        <name>surfaceDerivative</name>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_MEDIUM</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get shell surface of revolution rib first derivative with respect to y coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="151" column="5" bodyfile="src/enve_shell.cc" bodystart="193" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a4bbb973b459c409e07100b9f526d31f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceAngle</definition>
        <argsstring>(real y, real tolerance=EPSILON_MEDIUM) const</argsstring>
        <name>surfaceAngle</name>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_MEDIUM</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get shell surface of revolution rib angle with respect to y axis (rad) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="158" column="5" bodyfile="src/enve_shell.cc" bodystart="205" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1aadb3a2be11b94f1273596ed709fc9e23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::ribRadius</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>ribRadius</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input index </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th rib unloaded radius (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="165" column="5" bodyfile="src/enve_shell.cc" bodystart="217" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1ad8a3d3f336041aae315b43022a7dbc3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>point</type>
        <definition>point enve::shell::ribCenter</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>ribCenter</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input index </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th rib unloaded radius (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="171" column="5" bodyfile="src/enve_shell.cc" bodystart="228" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a43a508efabf7462e0fd13262a39a47b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::ribWidth</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>ribWidth</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input index </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get rib width (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="177" column="5" bodyfile="src/enve_shell.cc" bodystart="239" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1af3b256c4d6bb48cc12142e9e940d1b81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::ribAngle</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>ribAngle</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input index </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get rib angle (rad) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="183" column="5" bodyfile="src/enve_shell.cc" bodystart="250" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a812b5a7947d74eff88e5b9cfe24c9ef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::translate</definition>
        <argsstring>(vec3 const &amp;vector_in)</argsstring>
        <name>translate</name>
        <param>
          <type>vec3 const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Translation vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Translate shell by vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="198" column="5" bodyfile="src/enve_shell.cc" bodystart="272" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a3d0282a1133a19e3e1ae06f91b35b194" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 enve::shell::translation</definition>
        <argsstring>(void) const</argsstring>
        <name>translation</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns shell translation vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="204" column="5" bodyfile="src/enve_shell.cc" bodystart="282" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a25ad9b63a2daea89ab6b17e949028d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::rotate</definition>
        <argsstring>(real angle, vec3 const &amp;axis)</argsstring>
        <name>rotate</name>
        <param>
          <type>real</type>
          <declname>angle</declname>
          <briefdescription><para>Input angle (rad) </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 const &amp;</type>
          <declname>axis</declname>
          <briefdescription><para>Input axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rotate shell by a rotation angle around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="208" column="5" bodyfile="src/enve_shell.cc" bodystart="291" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a5ac7dbea127c06ee266b08053d775387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::rotate</definition>
        <argsstring>(real angle, std::string const &amp;axis)</argsstring>
        <name>rotate</name>
        <param>
          <type>real</type>
          <declname>angle</declname>
          <briefdescription><para>Input angle (rad) </para>
</briefdescription>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>axis</declname>
          <briefdescription><para>Input axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rotate shell by a rotation angle around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="215" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1acd3e5c07070586785043b991f4ebcd3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>mat3</type>
        <definition>mat3 enve::shell::rotation</definition>
        <argsstring>(void) const</argsstring>
        <name>rotation</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns shell rotation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="222" column="5" bodyfile="src/enve_shell.cc" bodystart="302" bodyend="306"/>
        <referencedby refid="a00070_1a34d0cda62f4f3f5ad7057222eed05fcf" compoundref="a00026" startline="852" endline="861">relativeAngles</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ad49487850eb0510d7b068f91501ca836" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>mat3</type>
        <definition>mat3 enve::shell::linear</definition>
        <argsstring>(void) const</argsstring>
        <name>linear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns shell linear matrix (rotation + scaling + shearing) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="226" column="5" bodyfile="src/enve_shell.cc" bodystart="311" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1af5191a07e4f5385296139baf44c74caa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::transform</definition>
        <argsstring>(affine const &amp;affine_in)</argsstring>
        <name>transform</name>
        <param>
          <type>affine const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>Input 4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set 4x4 affine transformation matrix <linebreak/>
Warning: Rotation matrix must be orthonormal! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="231" column="5" bodyfile="src/enve_shell.cc" bodystart="331" bodyend="337"/>
        <referencedby refid="a00070_1ad2f17102d34fe2239688b38bede9868b" compoundref="a00026" startline="459" endline="498">setup</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a5ea27e946e4bae2651823ff03a605665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::transform</definition>
        <argsstring>(mat4 const &amp;affine_in)</argsstring>
        <name>transform</name>
        <param>
          <type>mat4 const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>Input 4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set 4x4 affine transformation matrix <linebreak/>
Warning: Rotation matrix must be orthonormal! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="238" column="5" bodyfile="src/enve_shell.cc" bodystart="320" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1ab8206d37a830c82ad372d3276556630a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>affine const &amp;</type>
        <definition>affine const  &amp; enve::shell::transformation</definition>
        <argsstring>(void) const</argsstring>
        <name>transformation</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get 4x4 affine transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="244" column="5" bodyfile="src/enve_shell.cc" bodystart="342" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a47cae6494f70886cd2a201251fecb32c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::checkTransformation</definition>
        <argsstring>(mat4 const &amp;affine_in) const</argsstring>
        <name>checkTransformation</name>
        <param>
          <type>mat4 const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>Input 4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if 4x4 affine transformation matrix is othornormal and right-handed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="248" column="5" bodyfile="src/enve_shell.cc" bodystart="351" bodyend="361"/>
        <referencedby refid="a00070_1ae3ec347179adeeb7d1fb03cd7eed2f7c" compoundref="a00026" startline="366" endline="372">checkTransformation</referencedby>
        <referencedby refid="a00070_1ad2f17102d34fe2239688b38bede9868b" compoundref="a00026" startline="459" endline="498">setup</referencedby>
        <referencedby refid="a00070_1a5ea27e946e4bae2651823ff03a605665" compoundref="a00026" startline="320" endline="326">transform</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ae3ec347179adeeb7d1fb03cd7eed2f7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::checkTransformation</definition>
        <argsstring>(affine const &amp;affine_in) const</argsstring>
        <name>checkTransformation</name>
        <param>
          <type>affine const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>Input 4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if 4x4 affine transformation matrix is othornormal and right-handed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="254" column="5" bodyfile="src/enve_shell.cc" bodystart="366" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1ad7868ccdd90b807c75684cb51c256d03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 enve::shell::x</definition>
        <argsstring>(void) const</argsstring>
        <name>x</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get x vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="260" column="5" bodyfile="src/enve_shell.cc" bodystart="377" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a1de4c83db18282e37892c7adb0224232" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 enve::shell::y</definition>
        <argsstring>(void) const</argsstring>
        <name>y</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get y vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="264" column="5" bodyfile="src/enve_shell.cc" bodystart="386" bodyend="390"/>
        <referencedby refid="a00070_1a9a42f5bfd1ee3bd424afd900d48cc2ba" compoundref="a00026" startline="810" endline="822">contactPointAffine</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a79039f854236a5ae427da3f0868f988a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 enve::shell::z</definition>
        <argsstring>(void) const</argsstring>
        <name>z</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get z vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="268" column="5" bodyfile="src/enve_shell.cc" bodystart="395" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a3758f1248a4e9a9487682560d75ae823" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::eulerAngles</definition>
        <argsstring>(vec3 &amp;angles) const</argsstring>
        <name>eulerAngles</name>
        <param>
          <type>vec3 &amp;</type>
          <declname>angles</declname>
          <briefdescription><para>Frame Euler angles </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current Euler angles (rad) <linebreak/>
WARNING: Rotation sequence ZXY! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="273" column="5" bodyfile="src/enve_shell.cc" bodystart="404" bodyend="410"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="894" endline="997">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ac9d1d2c263ae78a9b221120262cd9454" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; aabb &gt;</type>
        <definition>std::shared_ptr&lt; aabb &gt; enve::shell::BBox</definition>
        <argsstring>(void) const</argsstring>
        <name>BBox</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell bonding aabb as object pointer vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="288" column="5" bodyfile="src/enve_shell.cc" bodystart="426" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a2752d2f553b89f2b722c14f98380b025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::updateBBox</definition>
        <argsstring>(void)</argsstring>
        <name>updateBBox</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Update shell bonding aabb. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="292" column="5" bodyfile="src/enve_shell.cc" bodystart="435" bodyend="443"/>
        <referencedby refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" compoundref="a00026" startline="89" endline="119">resize</referencedby>
        <referencedby refid="a00070_1ad2f17102d34fe2239688b38bede9868b" compoundref="a00026" startline="459" endline="498">setup</referencedby>
        <referencedby refid="a00070_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" compoundref="a00026" startline="56" endline="70">shell</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ad2f17102d34fe2239688b38bede9868b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::setup</definition>
        <argsstring>(ground::mesh const &amp;ground, affine const &amp;affine_in, std::string const method)</argsstring>
        <name>setup</name>
        <param>
          <type><ref refid="a00054" kindref="compound">ground::mesh</ref> const &amp;</type>
          <declname>ground</declname>
          <briefdescription><para>ENVE mesh object (ground) </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <param>
          <type>std::string const</type>
          <declname>method</declname>
          <briefdescription><para>Method name (choose from: &quot;geometric&quot; or &quot;sampling&quot;) </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Update current shell position and find contact parameters (intersection with mesh) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="305" column="5" bodyfile="src/enve_shell.cc" bodystart="459" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a6776c577268f032d0d158f74cc431d99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::setup</definition>
        <argsstring>(ground::flat const &amp;ground, affine const &amp;affine_in, std::string const method)</argsstring>
        <name>setup</name>
        <param>
          <type><ref refid="a00050" kindref="compound">ground::flat</ref> const &amp;</type>
          <declname>ground</declname>
          <briefdescription><para>ENVE flat object (ground) </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>affine_in</declname>
          <briefdescription><para>4x4 affine transformation </para>
</briefdescription>
        </param>
        <param>
          <type>std::string const</type>
          <declname>method</declname>
          <briefdescription><para>Method name (choose from: &quot;geometric&quot; or &quot;sampling&quot;) </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Update current shell position and find contact parameters (intersection with plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="313" column="5" bodyfile="src/enve_shell.cc" bodystart="503" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a1117628a990224ce2537e5bcea64ce0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPoint</definition>
        <argsstring>(point &amp;point) const</argsstring>
        <name>contactPoint</name>
        <param>
          <type>point &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="330" column="5" bodyfile="src/enve_shell.cc" bodystart="542" bodyend="560"/>
        <referencedby refid="a00070_1a9a42f5bfd1ee3bd424afd900d48cc2ba" compoundref="a00026" startline="810" endline="822">contactPointAffine</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="894" endline="997">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a89109d80eb8c4365b5c7c3cc2a3946f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPoint</definition>
        <argsstring>(size_t i, point &amp;point) const</argsstring>
        <name>contactPoint</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="336" column="5" bodyfile="src/enve_shell.cc" bodystart="565" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a5e7cd77d99b01e92288fd0e5ed884bb6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPoint</definition>
        <argsstring>(std::vector&lt; point &gt; &amp;point) const</argsstring>
        <name>contactPoint</name>
        <param>
          <type>std::vector&lt; point &gt; &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Contact points vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact points vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="343" column="5" bodyfile="src/enve_shell.cc" bodystart="577" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1ae5e77948a3b67e4d1456dd80fd6cff15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactNormal</definition>
        <argsstring>(vec3 &amp;normal) const</argsstring>
        <name>contactNormal</name>
        <param>
          <type>vec3 &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Contact point normal direction </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact normal vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="349" column="5" bodyfile="src/enve_shell.cc" bodystart="591" bodyend="611"/>
        <referencedby refid="a00070_1a9a42f5bfd1ee3bd424afd900d48cc2ba" compoundref="a00026" startline="810" endline="822">contactPointAffine</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="894" endline="997">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a3dc741308478849ef36b6b9622a48b62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactNormal</definition>
        <argsstring>(size_t i, vec3 &amp;normal) const</argsstring>
        <name>contactNormal</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Contact point normal direction </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact normal vector for the i-th rib. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="355" column="5" bodyfile="src/enve_shell.cc" bodystart="616" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a58b2d3b655d5959a02ddad029a7efe04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactNormal</definition>
        <argsstring>(std::vector&lt; vec3 &gt; &amp;normal) const</argsstring>
        <name>contactNormal</name>
        <param>
          <type>std::vector&lt; vec3 &gt; &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Contact point normal direction vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact normal vectors vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="362" column="5" bodyfile="src/enve_shell.cc" bodystart="628" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1ac4a93448b8ca9cc276c82c33870f1f2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactFriction</definition>
        <argsstring>(real &amp;friction) const</argsstring>
        <name>contactFriction</name>
        <param>
          <type>real &amp;</type>
          <declname>friction</declname>
          <briefdescription><para>Contact friction coefficient </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact friction coefficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="368" column="5" bodyfile="src/enve_shell.cc" bodystart="642" bodyend="660"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="894" endline="997">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a1b1657dc9797369757849522b24b77ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactFriction</definition>
        <argsstring>(size_t i, real &amp;friction) const</argsstring>
        <name>contactFriction</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>friction</declname>
          <briefdescription><para>Contact friction coefficient </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th rib contact friction coefficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="374" column="5" bodyfile="src/enve_shell.cc" bodystart="665" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a03bd693acbd8bd238cddd162c055ec82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactFriction</definition>
        <argsstring>(std::vector&lt; real &gt; &amp;friction) const</argsstring>
        <name>contactFriction</name>
        <param>
          <type>std::vector&lt; real &gt; &amp;</type>
          <declname>friction</declname>
          <briefdescription><para>Contact friction coefficient vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact friction coefficient vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="381" column="5" bodyfile="src/enve_shell.cc" bodystart="676" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1afff3c3cc1451ea7b5190fcab2faff08e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactDepth</definition>
        <argsstring>(real &amp;depth) const</argsstring>
        <name>contactDepth</name>
        <param>
          <type>real &amp;</type>
          <declname>depth</declname>
          <briefdescription><para>Contact depth </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact depth at center point (m) (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="387" column="5" bodyfile="src/enve_shell.cc" bodystart="689" bodyend="705"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="894" endline="997">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1af483b24e7b84b70766256eb4645eb09b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactDepth</definition>
        <argsstring>(size_t i, real &amp;depth) const</argsstring>
        <name>contactDepth</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>depth</declname>
          <briefdescription><para>Contact depth </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact depth at center point for the i-th rib (m) (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="393" column="5" bodyfile="src/enve_shell.cc" bodystart="710" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a4a17f4510dca5cf940fa1aff817d7192" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactDepth</definition>
        <argsstring>(std::vector&lt; real &gt; &amp;depth) const</argsstring>
        <name>contactDepth</name>
        <param>
          <type>std::vector&lt; real &gt; &amp;</type>
          <declname>depth</declname>
          <briefdescription><para>Contact depth </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact depth vector (m) (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="400" column="5" bodyfile="src/enve_shell.cc" bodystart="722" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a372bd928da48a2e10931a23dc1cbe74f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactArea</definition>
        <argsstring>(real &amp;area) const</argsstring>
        <name>contactArea</name>
        <param>
          <type>real &amp;</type>
          <declname>area</declname>
          <briefdescription><para>Contact area </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact area (m^2) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="406" column="5" bodyfile="src/enve_shell.cc" bodystart="736" bodyend="744"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="894" endline="997">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a2fea2339cd95016383e47918494c0a84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactArea</definition>
        <argsstring>(size_t i, real &amp;area) const</argsstring>
        <name>contactArea</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>area</declname>
          <briefdescription><para>Contact area </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th rib contact area (m^2) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="412" column="5" bodyfile="src/enve_shell.cc" bodystart="749" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a1c40df577f1bd02722a2bc370985c9da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactArea</definition>
        <argsstring>(std::vector&lt; real &gt; &amp;area) const</argsstring>
        <name>contactArea</name>
        <param>
          <type>std::vector&lt; real &gt; &amp;</type>
          <declname>area</declname>
          <briefdescription><para>Contact area vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact area vector (m^2) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="419" column="5" bodyfile="src/enve_shell.cc" bodystart="760" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1af3f7914461cc4e806fe52ed6701a0f00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactVolume</definition>
        <argsstring>(real &amp;volume) const</argsstring>
        <name>contactVolume</name>
        <param>
          <type>real &amp;</type>
          <declname>volume</declname>
          <briefdescription><para>Contact volume </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact volume (m^3) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="425" column="5" bodyfile="src/enve_shell.cc" bodystart="773" bodyend="781"/>
        <referencedby refid="a00070_1afff3c3cc1451ea7b5190fcab2faff08e" compoundref="a00026" startline="689" endline="705">contactDepth</referencedby>
        <referencedby refid="a00070_1ac4a93448b8ca9cc276c82c33870f1f2c" compoundref="a00026" startline="642" endline="660">contactFriction</referencedby>
        <referencedby refid="a00070_1ae5e77948a3b67e4d1456dd80fd6cff15" compoundref="a00026" startline="591" endline="611">contactNormal</referencedby>
        <referencedby refid="a00070_1a1117628a990224ce2537e5bcea64ce0f" compoundref="a00026" startline="542" endline="560">contactPoint</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="894" endline="997">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ae37a629eec2a9160404bcc922bedf850" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactVolume</definition>
        <argsstring>(size_t i, real &amp;volume) const</argsstring>
        <name>contactVolume</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>volume</declname>
          <briefdescription><para>Contact volume </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th rib contact volume (m^3) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="431" column="5" bodyfile="src/enve_shell.cc" bodystart="786" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1aa31fb1eae3e748a610af52ab9421c65f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactVolume</definition>
        <argsstring>(std::vector&lt; real &gt; &amp;volume) const</argsstring>
        <name>contactVolume</name>
        <param>
          <type>std::vector&lt; real &gt; &amp;</type>
          <declname>volume</declname>
          <briefdescription><para>Contact volume vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact volume vector (m^3) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="438" column="5" bodyfile="src/enve_shell.cc" bodystart="797" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a9a42f5bfd1ee3bd424afd900d48cc2ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointAffine</definition>
        <argsstring>(affine &amp;point_affine) const</argsstring>
        <name>contactPointAffine</name>
        <param>
          <type>affine &amp;</type>
          <declname>point_affine</declname>
          <briefdescription><para>Contact point affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point 4x4 affine transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="444" column="5" bodyfile="src/enve_shell.cc" bodystart="810" bodyend="822"/>
        <referencedby refid="a00070_1aa74194b2f8d72799adeb8a061edff043" compoundref="a00026" startline="841" endline="847">contactPointAffine</referencedby>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="894" endline="997">print</referencedby>
        <referencedby refid="a00070_1a34d0cda62f4f3f5ad7057222eed05fcf" compoundref="a00026" startline="852" endline="861">relativeAngles</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1a927d071289063cf3e734dea433313a41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointAffine</definition>
        <argsstring>(size_t i, affine &amp;point_affine) const</argsstring>
        <name>contactPointAffine</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>affine &amp;</type>
          <declname>point_affine</declname>
          <briefdescription><para>Contact point affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point 4x4 affine transformation matrix for the i-th rib. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="450" column="5" bodyfile="src/enve_shell.cc" bodystart="827" bodyend="836"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1aa74194b2f8d72799adeb8a061edff043" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointAffine</definition>
        <argsstring>(std::vector&lt; affine &gt; &amp;point_affine) const</argsstring>
        <name>contactPointAffine</name>
        <param>
          <type>std::vector&lt; affine &gt; &amp;</type>
          <declname>point_affine</declname>
          <briefdescription><para>Contact point affine transformation matrices vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point 4x4 affine transformation matrices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="457" column="5" bodyfile="src/enve_shell.cc" bodystart="841" bodyend="847"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a34d0cda62f4f3f5ad7057222eed05fcf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::relativeAngles</definition>
        <argsstring>(vec3 &amp;angles) const</argsstring>
        <name>relativeAngles</name>
        <param>
          <type>vec3 &amp;</type>
          <declname>angles</declname>
          <briefdescription><para>Relative angles vector (rad) </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get shell relative angles (rad) <linebreak/>
WARNING: Rotation sequence ZXY! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="464" column="5" bodyfile="src/enve_shell.cc" bodystart="852" bodyend="861"/>
        <referencedby refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00026" startline="894" endline="997">print</referencedby>
        <referencedby refid="a00070_1a23d2a9c7d4bc4b10558e05941582df2d" compoundref="a00026" startline="882" endline="889">relativeAngles</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00070_1ae48557597d39b647eac55a03704bdfc3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::relativeAngles</definition>
        <argsstring>(size_t i, vec3 &amp;angles) const</argsstring>
        <name>relativeAngles</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>angles</declname>
          <briefdescription><para>Relative angles vector (rad) </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get shell relative angles for the i-th rib (rad) <linebreak/>
WARNING: Rotation sequence ZXY! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="471" column="5" bodyfile="src/enve_shell.cc" bodystart="866" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a23d2a9c7d4bc4b10558e05941582df2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::relativeAngles</definition>
        <argsstring>(std::vector&lt; vec3 &gt; &amp;angles) const</argsstring>
        <name>relativeAngles</name>
        <param>
          <type>std::vector&lt; vec3 &gt; &amp;</type>
          <declname>angles</declname>
          <briefdescription><para>Relative angles vector (rad) </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get shell relative angles as vector (rad) <linebreak/>
WARNING: Rotation sequence ZXY! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="479" column="5" bodyfile="src/enve_shell.cc" bodystart="882" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="a00070_1a1a425eec93c459c7542b22b1c28c5417" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::print</definition>
        <argsstring>(out_stream &amp;os) const</argsstring>
        <name>print</name>
        <param>
          <type>out_stream &amp;</type>
          <declname>os</declname>
          <briefdescription><para>Output stream type </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Print contact parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="485" column="5" bodyfile="src/enve_shell.cc" bodystart="894" bodyend="997"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for ENVE shell. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/enve_shell.hh" line="67" column="3" bodyfile="include/enve_shell.hh" bodystart="68" bodyend="489"/>
    <listofallmembers>
      <member refid="a00070_1ac9d1d2c263ae78a9b221120262cd9454" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>BBox</name></member>
      <member refid="a00070_1a47cae6494f70886cd2a201251fecb32c" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>checkTransformation</name></member>
      <member refid="a00070_1ae3ec347179adeeb7d1fb03cd7eed2f7c" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>checkTransformation</name></member>
      <member refid="a00070_1a968cb22f2dddc6ed28d29fe61bfb9f25" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>checkWidthBound</name></member>
      <member refid="a00070_1a372bd928da48a2e10931a23dc1cbe74f" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactArea</name></member>
      <member refid="a00070_1a2fea2339cd95016383e47918494c0a84" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactArea</name></member>
      <member refid="a00070_1a1c40df577f1bd02722a2bc370985c9da" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactArea</name></member>
      <member refid="a00070_1afff3c3cc1451ea7b5190fcab2faff08e" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactDepth</name></member>
      <member refid="a00070_1af483b24e7b84b70766256eb4645eb09b" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactDepth</name></member>
      <member refid="a00070_1a4a17f4510dca5cf940fa1aff817d7192" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactDepth</name></member>
      <member refid="a00070_1ac4a93448b8ca9cc276c82c33870f1f2c" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactFriction</name></member>
      <member refid="a00070_1a1b1657dc9797369757849522b24b77ca" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactFriction</name></member>
      <member refid="a00070_1a03bd693acbd8bd238cddd162c055ec82" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactFriction</name></member>
      <member refid="a00070_1ae5e77948a3b67e4d1456dd80fd6cff15" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactNormal</name></member>
      <member refid="a00070_1a3dc741308478849ef36b6b9622a48b62" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactNormal</name></member>
      <member refid="a00070_1a58b2d3b655d5959a02ddad029a7efe04" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactNormal</name></member>
      <member refid="a00070_1a1117628a990224ce2537e5bcea64ce0f" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPoint</name></member>
      <member refid="a00070_1a89109d80eb8c4365b5c7c3cc2a3946f8" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPoint</name></member>
      <member refid="a00070_1a5e7cd77d99b01e92288fd0e5ed884bb6" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPoint</name></member>
      <member refid="a00070_1a9a42f5bfd1ee3bd424afd900d48cc2ba" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointAffine</name></member>
      <member refid="a00070_1a927d071289063cf3e734dea433313a41" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointAffine</name></member>
      <member refid="a00070_1aa74194b2f8d72799adeb8a061edff043" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointAffine</name></member>
      <member refid="a00070_1af3f7914461cc4e806fe52ed6701a0f00" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactVolume</name></member>
      <member refid="a00070_1ae37a629eec2a9160404bcc922bedf850" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactVolume</name></member>
      <member refid="a00070_1aa31fb1eae3e748a610af52ab9421c65f" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactVolume</name></member>
      <member refid="a00070_1a3758f1248a4e9a9487682560d75ae823" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>eulerAngles</name></member>
      <member refid="a00070_1ad49487850eb0510d7b068f91501ca836" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>linear</name></member>
      <member refid="a00070_1a1950f8b6966e0277bf7b9266bb8929af" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_aabb</name></member>
      <member refid="a00070_1a0fc8caf160157febbc5fa0ee0b4ea0ad" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_affine</name></member>
      <member refid="a00070_1a9bd07491e1b481f02a5d7206b34cf346" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_out</name></member>
      <member refid="a00070_1ac12fbcd8d579d4e0e6cb3744f27b3691" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_ribs</name></member>
      <member refid="a00070_1a442a1c35765c1b3c01a4e20772fddef9" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_shape</name></member>
      <member refid="a00070_1a1a425eec93c459c7542b22b1c28c5417" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>print</name></member>
      <member refid="a00070_1af27992d971057759d268f102975d62fb" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ptr</name></member>
      <member refid="a00070_1a34d0cda62f4f3f5ad7057222eed05fcf" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>relativeAngles</name></member>
      <member refid="a00070_1ae48557597d39b647eac55a03704bdfc3" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>relativeAngles</name></member>
      <member refid="a00070_1a23d2a9c7d4bc4b10558e05941582df2d" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>relativeAngles</name></member>
      <member refid="a00070_1a6cc65cd4e09e7a33148e16e9a0971b20" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>resize</name></member>
      <member refid="a00070_1af3b256c4d6bb48cc12142e9e940d1b81" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ribAngle</name></member>
      <member refid="a00070_1ad8a3d3f336041aae315b43022a7dbc3c" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ribCenter</name></member>
      <member refid="a00070_1aadb3a2be11b94f1273596ed709fc9e23" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ribRadius</name></member>
      <member refid="a00070_1a43a508efabf7462e0fd13262a39a47b4" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ribWidth</name></member>
      <member refid="a00070_1a25ad9b63a2daea89ab6b17e949028d8d" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>rotate</name></member>
      <member refid="a00070_1a5ac7dbea127c06ee266b08053d775387" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>rotate</name></member>
      <member refid="a00070_1acd3e5c07070586785043b991f4ebcd3b" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>rotation</name></member>
      <member refid="a00070_1ad2f17102d34fe2239688b38bede9868b" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>setup</name></member>
      <member refid="a00070_1a6776c577268f032d0d158f74cc431d99" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>setup</name></member>
      <member refid="a00070_1a7840e1d408713ab4eb4b91e5c3912e07" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00070_1afda23b623e717fdd16126eb5de7685e0" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00070_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00070_1af45510d7118c1f0aea21c2dc7bfcbeff" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00070_1aaeafa8ac9f588ebdf3f2b8722dde9290" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>size</name></member>
      <member refid="a00070_1a4bbb973b459c409e07100b9f526d31f2" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceAngle</name></member>
      <member refid="a00070_1a9ff4b3d279cf3bca199d71b6829bb10f" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceDerivative</name></member>
      <member refid="a00070_1ae545ab83f69df117efd3aefc98905b58" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceMaxRadius</name></member>
      <member refid="a00070_1a041572d89d883b768eb195b61775e99d" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceMaxWidth</name></member>
      <member refid="a00070_1afdf0e745ae4a5dbbc3daca2af53cd2d1" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceRadius</name></member>
      <member refid="a00070_1a72cfa8296a664a3d3b538f7c97f187a4" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceWidth</name></member>
      <member refid="a00070_1af5191a07e4f5385296139baf44c74caa" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>transform</name></member>
      <member refid="a00070_1a5ea27e946e4bae2651823ff03a605665" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>transform</name></member>
      <member refid="a00070_1ab8206d37a830c82ad372d3276556630a" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>transformation</name></member>
      <member refid="a00070_1a812b5a7947d74eff88e5b9cfe24c9ef0" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>translate</name></member>
      <member refid="a00070_1a3d0282a1133a19e3e1ae06f91b35b194" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>translation</name></member>
      <member refid="a00070_1a2752d2f553b89f2b722c14f98380b025" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>updateBBox</name></member>
      <member refid="a00070_1a14b3fa61d852ebaabd3603818d74ca6a" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>vecptr</name></member>
      <member refid="a00070_1ad7868ccdd90b807c75684cb51c256d03" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>x</name></member>
      <member refid="a00070_1a1de4c83db18282e37892c7adb0224232" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>y</name></member>
      <member refid="a00070_1a79039f854236a5ae427da3f0868f988a" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>z</name></member>
      <member refid="a00070_1a9e3dfd623bc883cb0dbab5fdad026a26" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>~shell</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
