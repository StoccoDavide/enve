<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="a00062" kind="class" language="C++" prot="public">
    <compoundname>enve::rib</compoundname>
    <basecompoundref prot="public" virt="non-virtual">disk</basecompoundref>
    <includes refid="a00005" local="no">rib.hxx</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a00062_1aaa9b09748c9ba3b5474eebaa2e847e4c" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="a00062" kindref="compound">rib</ref> const  &gt;</type>
        <definition>typedef std::shared_ptr&lt;rib const&gt; enve::rib::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <qualifiedname>enve::rib::ptr</qualifiedname>
        <briefdescription>
<para>Pointer to rib object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="47" column="29" bodyfile="src/enve/rib.hxx" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00062_1a51fe2388da331c3079f45f1655e86c6e" prot="public" static="no">
        <type>std::vector&lt; <ref refid="a00062_1aaa9b09748c9ba3b5474eebaa2e847e4c" kindref="member">rib::ptr</ref> &gt;</type>
        <definition>typedef std::vector&lt;rib::ptr&gt; enve::rib::vecptr</definition>
        <argsstring></argsstring>
        <name>vecptr</name>
        <qualifiedname>enve::rib::vecptr</qualifiedname>
        <briefdescription>
<para>Vector of pointers to rib objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="48" column="30" bodyfile="src/enve/rib.hxx" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a00062_1ae183581c6b8c47117a5b3062277832c8" prot="private" static="no" mutable="no">
        <type>integer</type>
        <definition>integer enve::rib::m_id</definition>
        <argsstring></argsstring>
        <name>m_id</name>
        <qualifiedname>enve::rib::m_id</qualifiedname>
        <briefdescription>
<para>ID (-) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="51" column="13" bodyfile="src/enve/rib.hxx" bodystart="51" bodyend="-1"/>
        <referencedby refid="a00062_1a470f3b6fe33d31947be93bc27e0c61ce" compoundref="a00029" startline="70" endline="78">copy</referencedby>
        <referencedby refid="a00062_1ac0d6905715c5f1c07b29a165a04fcf4a" compoundref="a00029" startline="117" endline="128">isApprox</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00062_1a6a0a95e191fd3ae417e0102a6df0ed34" prot="private" static="no" mutable="no">
        <type>real</type>
        <definition>real enve::rib::m_y</definition>
        <argsstring></argsstring>
        <name>m_y</name>
        <qualifiedname>enve::rib::m_y</qualifiedname>
        <briefdescription>
<para>Y-axis component (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="52" column="13" bodyfile="src/enve/rib.hxx" bodystart="52" bodyend="-1"/>
        <referencedby refid="a00062_1ac0d6905715c5f1c07b29a165a04fcf4a" compoundref="a00029" startline="117" endline="128">isApprox</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00062_1a3ea19f42a9f1d36df36216bb8829b910" prot="private" static="no" mutable="no">
        <type>real</type>
        <definition>real enve::rib::m_width</definition>
        <argsstring></argsstring>
        <name>m_width</name>
        <qualifiedname>enve::rib::m_width</qualifiedname>
        <briefdescription>
<para>Width (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="53" column="13" bodyfile="src/enve/rib.hxx" bodystart="53" bodyend="-1"/>
        <referencedby refid="a00062_1a470f3b6fe33d31947be93bc27e0c61ce" compoundref="a00029" startline="70" endline="78">copy</referencedby>
        <referencedby refid="a00062_1a663d27b7262157bb9b68ab6df9937daf" compoundref="a00029" startline="199" endline="318">envelopGeometric</referencedby>
        <referencedby refid="a00062_1af64457341d85970f76d522f1af0e5d33" compoundref="a00029" startline="371" endline="436">envelopSampling</referencedby>
        <referencedby refid="a00062_1ac0d6905715c5f1c07b29a165a04fcf4a" compoundref="a00029" startline="117" endline="128">isApprox</referencedby>
        <referencedby refid="a00062_1ad858355272ad73057208b4052ddef9f2" compoundref="a00029" startline="83" endline="87">width</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00062_1a21be5d0b7ed69dfe64f6aa1f1a3e6703" prot="private" static="no" mutable="no">
        <type>real</type>
        <definition>real enve::rib::m_angle</definition>
        <argsstring></argsstring>
        <name>m_angle</name>
        <qualifiedname>enve::rib::m_angle</qualifiedname>
        <briefdescription>
<para>Inclination angle (rad) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="54" column="13" bodyfile="src/enve/rib.hxx" bodystart="54" bodyend="-1"/>
        <referencedby refid="a00062_1aed5c4d8fd8ef8bf886fd0f6104a04856" compoundref="a00029" startline="92" endline="96">angle</referencedby>
        <referencedby refid="a00062_1a470f3b6fe33d31947be93bc27e0c61ce" compoundref="a00029" startline="70" endline="78">copy</referencedby>
        <referencedby refid="a00062_1ac0d6905715c5f1c07b29a165a04fcf4a" compoundref="a00029" startline="117" endline="128">isApprox</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00062_1a1fcb2181e9529078fd9a602be72ecbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(rib const &amp;)=default</argsstring>
        <name>rib</name>
        <qualifiedname>enve::rib::rib</qualifiedname>
        <param>
          <type><ref refid="a00062" kindref="compound">rib</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Rib copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="58" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1a99e24d063ed6fa8bb4ec40bef6b1fff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(rib &amp;&amp;)=default</argsstring>
        <name>rib</name>
        <qualifiedname>enve::rib::rib</qualifiedname>
        <param>
          <type><ref refid="a00062" kindref="compound">rib</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Rib move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="61" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1a1562903aea9ae0d8f146c8dc825ad9e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00062" kindref="compound">rib</ref> &amp;</type>
        <definition>rib &amp; enve::rib::operator=</definition>
        <argsstring>(const rib &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>enve::rib::operator=</qualifiedname>
        <param>
          <type>const <ref refid="a00062" kindref="compound">rib</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Rib assignment operator <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="64" column="10"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1ad49469738126307166c822eada5d40a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="a00062" kindref="compound">rib</ref> &amp;</type>
        <definition>rib &amp; enve::rib::operator=</definition>
        <argsstring>(rib &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>enve::rib::operator=</qualifiedname>
        <param>
          <type><ref refid="a00062" kindref="compound">rib</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Rib move assignment operator <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="67" column="10"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1a0b78477444d94f8f402bafd21d25275c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::~rib</definition>
        <argsstring>(void) override=default</argsstring>
        <name>~rib</name>
        <qualifiedname>enve::rib::~rib</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Rib class destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="70" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1a9b3bdb39690f8a07228dcfecd1d4948f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(void)</argsstring>
        <name>rib</name>
        <qualifiedname>enve::rib::rib</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Rib class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="73" column="5" bodyfile="src/rib.cc" bodystart="41" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1ada4ea5a519f287ae6888d6fe7e845d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::rib::rib</definition>
        <argsstring>(integer id, real radius, real y, real width, real angle)</argsstring>
        <name>rib</name>
        <qualifiedname>enve::rib::rib</qualifiedname>
        <param>
          <type>integer</type>
          <declname>id</declname>
          <briefdescription><para>ID (-) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>radius</declname>
          <briefdescription><para>Radius (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Laying plane (-) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>width</declname>
          <briefdescription><para>Width (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>angle</declname>
          <briefdescription><para>inclination angle (rad) </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rib class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="76" column="5" bodyfile="src/rib.cc" bodystart="52" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1a470f3b6fe33d31947be93bc27e0c61ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::rib::copy</definition>
        <argsstring>(rib const &amp;rib_obj)</argsstring>
        <name>copy</name>
        <qualifiedname>enve::rib::copy</qualifiedname>
        <param>
          <type><ref refid="a00062" kindref="compound">rib</ref> const &amp;</type>
          <declname>rib_obj</declname>
          <briefdescription><para>Input object </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Copy rib object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="86" column="5" bodyfile="src/rib.cc" bodystart="70" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1ac0d6905715c5f1c07b29a165a04fcf4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::isApprox</definition>
        <argsstring>(rib const &amp;rib_obj, real tolerance=EPSILON_LOW) const</argsstring>
        <name>isApprox</name>
        <qualifiedname>enve::rib::isApprox</qualifiedname>
        <param>
          <type><ref refid="a00062" kindref="compound">rib</ref> const &amp;</type>
          <declname>rib_obj</declname>
          <briefdescription><para>Input object </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_LOW</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if objects are (almost) equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="92" column="5" bodyfile="src/rib.cc" bodystart="117" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1a93f47710d48a551ff9290ab215d9cee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>integer &amp;</type>
        <definition>integer &amp; enve::rib::id</definition>
        <argsstring>(void)</argsstring>
        <name>id</name>
        <qualifiedname>enve::rib::id</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get ID reference (-) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="99" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1a31571ada460d860edf87bc9c82151084" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>integer const &amp;</type>
        <definition>integer const  &amp; enve::rib::id</definition>
        <argsstring>(void) const</argsstring>
        <name>id</name>
        <qualifiedname>enve::rib::id</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get ID const reference (-) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="103" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1a64c18ecdbd65aef499aa5d03353cb745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>real &amp;</type>
        <definition>real &amp; enve::rib::width</definition>
        <argsstring>(void)</argsstring>
        <name>width</name>
        <qualifiedname>enve::rib::width</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get width coefficient scaling factor reference (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="108" column="5" bodyfile="src/rib.cc" bodystart="101" bodyend="104"/>
        <referencedby refid="a00062_1a663d27b7262157bb9b68ab6df9937daf" compoundref="a00029" startline="199" endline="318">envelopGeometric</referencedby>
        <referencedby refid="a00062_1af64457341d85970f76d522f1af0e5d33" compoundref="a00029" startline="371" endline="436">envelopSampling</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00062_1ad858355272ad73057208b4052ddef9f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real const &amp;</type>
        <definition>real const  &amp; enve::rib::width</definition>
        <argsstring>(void) const</argsstring>
        <name>width</name>
        <qualifiedname>enve::rib::width</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get width coefficent scaling factor const reference (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="112" column="5" bodyfile="src/rib.cc" bodystart="83" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1a1d751f7fdfed182a58cf4f65db85e9d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>real &amp;</type>
        <definition>real &amp; enve::rib::angle</definition>
        <argsstring>(void)</argsstring>
        <name>angle</name>
        <qualifiedname>enve::rib::angle</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get angle coefficient scaling factor reference (rad) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="117" column="5" bodyfile="src/rib.cc" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1aed5c4d8fd8ef8bf886fd0f6104a04856" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real const &amp;</type>
        <definition>real const  &amp; enve::rib::angle</definition>
        <argsstring>(void) const</argsstring>
        <name>angle</name>
        <qualifiedname>enve::rib::angle</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get angle coefficent scaling factor const reference (rad) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="121" column="5" bodyfile="src/rib.cc" bodystart="92" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1a4b11fa74ab70a387864d8120234dd059" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::envelop</definition>
        <argsstring>(affine const &amp;pose, output &amp;out) const</argsstring>
        <name>envelop</name>
        <qualifiedname>enve::rib::envelop</qualifiedname>
        <param>
          <type>affine const &amp;</type>
          <declname>pose</declname>
          <briefdescription><para>Input 4x4 affine transformation pose </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00058" kindref="compound">output</ref> &amp;</type>
          <declname>out</declname>
          <briefdescription><para>Rib contact parameters output </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate rib contact with no ground. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="126" column="5" bodyfile="src/rib.cc" bodystart="179" bodyend="194"/>
        <referencedby refid="a00062_1a663d27b7262157bb9b68ab6df9937daf" compoundref="a00029" startline="199" endline="318">envelopGeometric</referencedby>
        <referencedby refid="a00062_1af64457341d85970f76d522f1af0e5d33" compoundref="a00029" startline="371" endline="436">envelopSampling</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00062_1a68e3721d3e250a1106d0ae1dbc34dc29" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::envelop</definition>
        <argsstring>(triangleground::vecptr const &amp;ground, affine const &amp;pose, std::string const method, output &amp;out) const</argsstring>
        <name>envelop</name>
        <qualifiedname>enve::rib::envelop</qualifiedname>
        <param>
          <type><ref refid="a00074_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> const &amp;</type>
          <declname>ground</declname>
          <briefdescription><para>Local triangles candidate list </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>pose</declname>
          <briefdescription><para>Input 4x4 affine transformation pose </para>
</briefdescription>
        </param>
        <param>
          <type>std::string const</type>
          <declname>method</declname>
          <briefdescription><para>Enveloping model (choose from: &quot;geometric&quot; or &quot;sampling&quot;) </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00058" kindref="compound">output</ref> &amp;</type>
          <declname>out</declname>
          <briefdescription><para>Rib contact parameters output </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate rib contact with flat ground. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="133" column="5" bodyfile="src/rib.cc" bodystart="133" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1aa232cf3d6903a9d95b4db6b48389dadd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::envelop</definition>
        <argsstring>(ground::flat const &amp;ground, affine const &amp;pose, std::string const method, output &amp;out) const</argsstring>
        <name>envelop</name>
        <qualifiedname>enve::rib::envelop</qualifiedname>
        <param>
          <type><ref refid="a00050" kindref="compound">ground::flat</ref> const &amp;</type>
          <declname>ground</declname>
          <briefdescription><para>Local flat ground object </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>pose</declname>
          <briefdescription><para>Input 4x4 affine transformation pose </para>
</briefdescription>
        </param>
        <param>
          <type>std::string const</type>
          <declname>method</declname>
          <briefdescription><para>Enveloping model (choose from: &quot;geometric&quot; or &quot;sampling&quot;) </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00058" kindref="compound">output</ref> &amp;</type>
          <declname>out</declname>
          <briefdescription><para>Rib contact parameters output </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate rib contact with flat ground. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="142" column="5" bodyfile="src/rib.cc" bodystart="156" bodyend="174"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="a00062_1a663d27b7262157bb9b68ab6df9937daf" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::envelopGeometric</definition>
        <argsstring>(triangleground::vecptr const &amp;ground, affine const &amp;pose, output &amp;out) const</argsstring>
        <name>envelopGeometric</name>
        <qualifiedname>enve::rib::envelopGeometric</qualifiedname>
        <param>
          <type><ref refid="a00074_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> const &amp;</type>
          <declname>ground</declname>
          <briefdescription><para>Local triangles candidate list </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>pose</declname>
          <briefdescription><para>Input 4x4 affine transformation </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00058" kindref="compound">output</ref> &amp;</type>
          <declname>out</declname>
          <briefdescription><para>Rib contact parameters output </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate rib contact with flat ground (geometric enveloping model) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="152" column="5" bodyfile="src/rib.cc" bodystart="199" bodyend="318"/>
        <referencedby refid="a00062_1a68e3721d3e250a1106d0ae1dbc34dc29" compoundref="a00029" startline="133" endline="151">envelop</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00062_1ade819ddc7d9c84dda92570948e8f6886" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::envelopGeometric</definition>
        <argsstring>(ground::flat const &amp;ground, affine const &amp;pose, output &amp;out) const</argsstring>
        <name>envelopGeometric</name>
        <qualifiedname>enve::rib::envelopGeometric</qualifiedname>
        <param>
          <type><ref refid="a00050" kindref="compound">ground::flat</ref> const &amp;</type>
          <declname>ground</declname>
          <briefdescription><para>Local flat ground object </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>pose</declname>
          <briefdescription><para>Input 4x4 affine transformation </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00058" kindref="compound">output</ref> &amp;</type>
          <declname>out</declname>
          <briefdescription><para>Rib contact parameters output </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate rib contact with flat ground (geometric enveloping model) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="160" column="5" bodyfile="src/rib.cc" bodystart="323" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1af64457341d85970f76d522f1af0e5d33" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::envelopSampling</definition>
        <argsstring>(triangleground::vecptr const &amp;ground, affine const &amp;pose, output &amp;out) const</argsstring>
        <name>envelopSampling</name>
        <qualifiedname>enve::rib::envelopSampling</qualifiedname>
        <param>
          <type><ref refid="a00074_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> const &amp;</type>
          <declname>ground</declname>
          <briefdescription><para>Local triangles candidate list </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>pose</declname>
          <briefdescription><para>Input 4x4 affine transformation </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00058" kindref="compound">output</ref> &amp;</type>
          <declname>out</declname>
          <briefdescription><para>Rib contact parameters output </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate rib contact with flat ground (sampling enveloping model) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="168" column="5" bodyfile="src/rib.cc" bodystart="371" bodyend="436"/>
        <referencedby refid="a00062_1a68e3721d3e250a1106d0ae1dbc34dc29" compoundref="a00029" startline="133" endline="151">envelop</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00062_1ad383b675fe2a65b36875961d716b0d4e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::envelopSampling</definition>
        <argsstring>(ground::flat const &amp;ground, affine const &amp;pose, output &amp;out) const</argsstring>
        <name>envelopSampling</name>
        <qualifiedname>enve::rib::envelopSampling</qualifiedname>
        <param>
          <type><ref refid="a00050" kindref="compound">ground::flat</ref> const &amp;</type>
          <declname>ground</declname>
          <briefdescription><para>Local flat ground object </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>pose</declname>
          <briefdescription><para>Input 4x4 affine transformation </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00058" kindref="compound">output</ref> &amp;</type>
          <declname>out</declname>
          <briefdescription><para>Rib contact parameters output </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate rib contact with flat ground (sampling enveloping model) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="176" column="5" bodyfile="src/rib.cc" bodystart="441" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="a00062_1aa8950c06a7767305b147516e6a4a3fbf" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::samplingLine</definition>
        <argsstring>(triangleground::vecptr const &amp;ground, line const &amp;sampling_line, point &amp;contact_point, real &amp;contact_friction) const</argsstring>
        <name>samplingLine</name>
        <qualifiedname>enve::rib::samplingLine</qualifiedname>
        <param>
          <type><ref refid="a00074_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> const &amp;</type>
          <declname>ground</declname>
          <briefdescription><para>Local triangles candidate list </para>
</briefdescription>
        </param>
        <param>
          <type>line const &amp;</type>
          <declname>sampling_line</declname>
          <briefdescription><para>Sampling line </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>contact_point</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contact_friction</declname>
          <briefdescription><para>Contact friction </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate contact through line intersection envelop model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="184" column="5" bodyfile="src/rib.cc" bodystart="511" bodyend="575"/>
        <referencedby refid="a00062_1af64457341d85970f76d522f1af0e5d33" compoundref="a00029" startline="371" endline="436">envelopSampling</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00062_1afa291da78999d0064e66fa5b565d6f75" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::rib::samplingLine</definition>
        <argsstring>(ground::flat const &amp;ground, line const &amp;sampling_line, point &amp;contact_point, real &amp;contact_friction) const</argsstring>
        <name>samplingLine</name>
        <qualifiedname>enve::rib::samplingLine</qualifiedname>
        <param>
          <type><ref refid="a00050" kindref="compound">ground::flat</ref> const &amp;</type>
          <declname>ground</declname>
          <briefdescription><para>Local flat ground object </para>
</briefdescription>
        </param>
        <param>
          <type>line const &amp;</type>
          <declname>sampling_line</declname>
          <briefdescription><para>Sampling line </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>contact_point</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>contact_friction</declname>
          <briefdescription><para>Contact friction </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate contact through line intersection envelop model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/enve/rib.hxx" line="193" column="5" bodyfile="src/rib.cc" bodystart="580" bodyend="597"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Rib for wheel representation. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>disk</label>
      </node>
      <node id="1">
        <label>enve::rib</label>
        <link refid="a00062"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>disk</label>
      </node>
      <node id="3">
        <label>integer</label>
      </node>
      <node id="4">
        <label>real</label>
      </node>
      <node id="1">
        <label>enve::rib</label>
        <link refid="a00062"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_id</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_angle</edgelabel>
          <edgelabel>m_width</edgelabel>
          <edgelabel>m_y</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/enve/rib.hxx" line="44" column="3" bodyfile="src/enve/rib.hxx" bodystart="45" bodyend="200"/>
    <listofallmembers>
      <member refid="a00062_1a1d751f7fdfed182a58cf4f65db85e9d1" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>angle</name></member>
      <member refid="a00062_1aed5c4d8fd8ef8bf886fd0f6104a04856" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>angle</name></member>
      <member refid="a00062_1a470f3b6fe33d31947be93bc27e0c61ce" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>copy</name></member>
      <member refid="a00062_1a4b11fa74ab70a387864d8120234dd059" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>envelop</name></member>
      <member refid="a00062_1a68e3721d3e250a1106d0ae1dbc34dc29" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>envelop</name></member>
      <member refid="a00062_1aa232cf3d6903a9d95b4db6b48389dadd" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>envelop</name></member>
      <member refid="a00062_1a663d27b7262157bb9b68ab6df9937daf" prot="private" virt="non-virtual"><scope>enve::rib</scope><name>envelopGeometric</name></member>
      <member refid="a00062_1ade819ddc7d9c84dda92570948e8f6886" prot="private" virt="non-virtual"><scope>enve::rib</scope><name>envelopGeometric</name></member>
      <member refid="a00062_1af64457341d85970f76d522f1af0e5d33" prot="private" virt="non-virtual"><scope>enve::rib</scope><name>envelopSampling</name></member>
      <member refid="a00062_1ad383b675fe2a65b36875961d716b0d4e" prot="private" virt="non-virtual"><scope>enve::rib</scope><name>envelopSampling</name></member>
      <member refid="a00062_1a93f47710d48a551ff9290ab215d9cee5" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>id</name></member>
      <member refid="a00062_1a31571ada460d860edf87bc9c82151084" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>id</name></member>
      <member refid="a00062_1ac0d6905715c5f1c07b29a165a04fcf4a" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>isApprox</name></member>
      <member refid="a00062_1a21be5d0b7ed69dfe64f6aa1f1a3e6703" prot="private" virt="non-virtual"><scope>enve::rib</scope><name>m_angle</name></member>
      <member refid="a00062_1ae183581c6b8c47117a5b3062277832c8" prot="private" virt="non-virtual"><scope>enve::rib</scope><name>m_id</name></member>
      <member refid="a00062_1a3ea19f42a9f1d36df36216bb8829b910" prot="private" virt="non-virtual"><scope>enve::rib</scope><name>m_width</name></member>
      <member refid="a00062_1a6a0a95e191fd3ae417e0102a6df0ed34" prot="private" virt="non-virtual"><scope>enve::rib</scope><name>m_y</name></member>
      <member refid="a00062_1a1562903aea9ae0d8f146c8dc825ad9e6" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>operator=</name></member>
      <member refid="a00062_1ad49469738126307166c822eada5d40a4" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>operator=</name></member>
      <member refid="a00062_1aaa9b09748c9ba3b5474eebaa2e847e4c" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>ptr</name></member>
      <member refid="a00062_1a1fcb2181e9529078fd9a602be72ecbf9" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00062_1a99e24d063ed6fa8bb4ec40bef6b1fff4" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00062_1a9b3bdb39690f8a07228dcfecd1d4948f" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00062_1ada4ea5a519f287ae6888d6fe7e845d7e" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>rib</name></member>
      <member refid="a00062_1aa8950c06a7767305b147516e6a4a3fbf" prot="private" virt="non-virtual"><scope>enve::rib</scope><name>samplingLine</name></member>
      <member refid="a00062_1afa291da78999d0064e66fa5b565d6f75" prot="private" virt="non-virtual"><scope>enve::rib</scope><name>samplingLine</name></member>
      <member refid="a00062_1a51fe2388da331c3079f45f1655e86c6e" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>vecptr</name></member>
      <member refid="a00062_1a64c18ecdbd65aef499aa5d03353cb745" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>width</name></member>
      <member refid="a00062_1ad858355272ad73057208b4052ddef9f2" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>width</name></member>
      <member refid="a00062_1a0b78477444d94f8f402bafd21d25275c" prot="public" virt="non-virtual"><scope>enve::rib</scope><name>~rib</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
