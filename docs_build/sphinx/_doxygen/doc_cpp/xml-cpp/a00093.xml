<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="a00093" kind="class" language="C++" prot="public">
    <compoundname>enve::shell</compoundname>
    <includes refid="a00005" local="no">enve_shell.hh</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a00093_1af27992d971057759d268f102975d62fb" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="a00093" kindref="compound">shell</ref> const  &gt;</type>
        <definition>typedef std::shared_ptr&lt;shell const&gt; enve::shell::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <briefdescription>
<para>Pointer to shell object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="73" column="29" bodyfile="include/enve_shell.hh" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00093_1a14b3fa61d852ebaabd3603818d74ca6a" prot="public" static="no">
        <type>std::vector&lt; <ref refid="a00093_1af27992d971057759d268f102975d62fb" kindref="member">shell::ptr</ref> &gt;</type>
        <definition>typedef std::vector&lt;shell::ptr&gt; enve::shell::vecptr</definition>
        <argsstring></argsstring>
        <name>vecptr</name>
        <briefdescription>
<para>Vector of pointers to shell objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="74" column="30" bodyfile="include/enve_shell.hh" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a00093_1a442a1c35765c1b3c01a4e20772fddef9" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="a00089" kindref="compound">shape</ref> &gt;</type>
        <definition>std::shared_ptr&lt;shape&gt; enve::shell::m_shape</definition>
        <argsstring></argsstring>
        <name>m_shape</name>
        <briefdescription>
<para>Shell shape. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="77" column="21" bodyfile="include/enve_shell.hh" bodystart="77" bodyend="-1"/>
        <referencedby refid="a00093_1a968cb22f2dddc6ed28d29fe61bfb9f25" compoundref="a00032" startline="230" endline="235">checkWidthBound</referencedby>
        <referencedby refid="a00093_1a63165bc2945d92b1f78883bd0a6758da" compoundref="a00032" startline="572" endline="591">contactDepthMesh</referencedby>
        <referencedby refid="a00093_1ab52643e3a7adcc8f95bf597eda311d6a" compoundref="a00032" startline="509" endline="528">contactDepthRib</referencedby>
        <referencedby refid="a00093_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00032" startline="990" endline="1099">print</referencedby>
        <referencedby refid="a00093_1af92ceac6e9c110d0a040a85d2c532f7a" compoundref="a00032" startline="130" endline="160">reset</referencedby>
        <referencedby refid="a00093_1a2cada05513ee0744000587966909ab7c" compoundref="a00032" startline="1223" endline="1260">samplingCross</referencedby>
        <referencedby refid="a00093_1a4bbb973b459c409e07100b9f526d31f2" compoundref="a00032" startline="261" endline="267">surfaceAngle</referencedby>
        <referencedby refid="a00093_1a9ff4b3d279cf3bca199d71b6829bb10f" compoundref="a00032" startline="250" endline="256">surfaceDerivative</referencedby>
        <referencedby refid="a00093_1ae545ab83f69df117efd3aefc98905b58" compoundref="a00032" startline="185" endline="189">surfaceMaxRadius</referencedby>
        <referencedby refid="a00093_1a041572d89d883b768eb195b61775e99d" compoundref="a00032" startline="194" endline="198">surfaceMaxWidth</referencedby>
        <referencedby refid="a00093_1afdf0e745ae4a5dbbc3daca2af53cd2d1" compoundref="a00032" startline="240" endline="245">surfaceRadius</referencedby>
        <referencedby refid="a00093_1a72cfa8296a664a3d3b538f7c97f187a4" compoundref="a00032" startline="221" endline="225">surfaceWidth</referencedby>
        <referencedby refid="a00093_1ad2581acf1804fe415a4253914d33b9d7" compoundref="a00032" startline="203" endline="207">surfaceWidthLowerBound</referencedby>
        <referencedby refid="a00093_1ad46823bc50ac456ee220fab3bf62504a" compoundref="a00032" startline="212" endline="216">surfaceWidthUpperBound</referencedby>
        <referencedby refid="a00093_1a2752d2f553b89f2b722c14f98380b025" compoundref="a00032" startline="446" endline="454">updateBBox</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00093_1ac12fbcd8d579d4e0e6cb3744f27b3691" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="a00085" kindref="compound">rib</ref> &gt;</type>
        <definition>std::vector&lt;rib&gt; enve::shell::m_ribs</definition>
        <argsstring></argsstring>
        <name>m_ribs</name>
        <briefdescription>
<para>Shell ribs vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="78" column="23" bodyfile="include/enve_shell.hh" bodystart="78" bodyend="-1"/>
        <referencedby refid="a00093_1a32942c1f12b74509287a05e8aac89d30" compoundref="a00032" startline="596" endline="614">contactDepthMesh</referencedby>
        <referencedby refid="a00093_1a34cda3c55d1681e2445b8527e0531e15" compoundref="a00032" startline="533" endline="551">contactDepthRib</referencedby>
        <referencedby refid="a00093_1a95b37a8baf0bf781347170296f5484bd" compoundref="a00032" startline="1284" endline="1300">envelopLine</referencedby>
        <referencedby refid="a00093_1a24e056a64b05e0072b08bd242f57af84" compoundref="a00032" startline="1354" endline="1379">envelopPlane</referencedby>
        <referencedby refid="a00093_1aae97f79ce2d00111b8153145f3128d38" compoundref="a00032" startline="1265" endline="1279">envelopSingleTriangle</referencedby>
        <referencedby refid="a00093_1a1cd14845c1c2903eadb41d5a86a2627f" compoundref="a00032" startline="1305" endline="1349">envelopTriangle</referencedby>
        <referencedby refid="a00093_1abb6dc0591e20ced467d8327a84a3387d" compoundref="a00032" startline="1104" endline="1122">oversample</referencedby>
        <referencedby refid="a00093_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00032" startline="990" endline="1099">print</referencedby>
        <referencedby refid="a00093_1a44604a738554f234df1d0af3ec157f96" compoundref="a00032" startline="1384" endline="1395">projectContactPointOnFlat</referencedby>
        <referencedby refid="a00093_1ad7570a667f28e75b254b00200dd1ae34" compoundref="a00032" startline="1400" endline="1411">projectContactPointOnMesh</referencedby>
        <referencedby refid="a00093_1ae48557597d39b647eac55a03704bdfc3" compoundref="a00032" startline="483" endline="493">relativeAngles</referencedby>
        <referencedby refid="a00093_1af92ceac6e9c110d0a040a85d2c532f7a" compoundref="a00032" startline="130" endline="160">reset</referencedby>
        <referencedby refid="a00093_1ad8a3d3f336041aae315b43022a7dbc3c" compoundref="a00032" startline="282" endline="287">ribCenter</referencedby>
        <referencedby refid="a00093_1aadb3a2be11b94f1273596ed709fc9e23" compoundref="a00032" startline="272" endline="277">ribRadius</referencedby>
        <referencedby refid="a00093_1a43a508efabf7462e0fd13262a39a47b4" compoundref="a00032" startline="292" endline="297">ribWidth</referencedby>
        <referencedby refid="a00093_1aaeafa8ac9f588ebdf3f2b8722dde9290" compoundref="a00032" startline="165" endline="169">size</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00093_1a0fc8caf160157febbc5fa0ee0b4ea0ad" prot="private" static="no" mutable="no">
        <type>affine</type>
        <definition>affine enve::shell::m_affine</definition>
        <argsstring></argsstring>
        <name>m_affine</name>
        <briefdescription>
<para>Shell reference frame (ISO) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="79" column="28" bodyfile="include/enve_shell.hh" bodystart="79" bodyend="-1"/>
        <referencedby refid="a00093_1a63165bc2945d92b1f78883bd0a6758da" compoundref="a00032" startline="572" endline="591">contactDepthMesh</referencedby>
        <referencedby refid="a00093_1ab52643e3a7adcc8f95bf597eda311d6a" compoundref="a00032" startline="509" endline="528">contactDepthRib</referencedby>
        <referencedby refid="a00093_1a24e056a64b05e0072b08bd242f57af84" compoundref="a00032" startline="1354" endline="1379">envelopPlane</referencedby>
        <referencedby refid="a00093_1a1cd14845c1c2903eadb41d5a86a2627f" compoundref="a00032" startline="1305" endline="1349">envelopTriangle</referencedby>
        <referencedby refid="a00093_1a3758f1248a4e9a9487682560d75ae823" compoundref="a00032" startline="416" endline="421">eulerAngles</referencedby>
        <referencedby refid="a00093_1ad49487850eb0510d7b068f91501ca836" compoundref="a00032" startline="352" endline="357">linear</referencedby>
        <referencedby refid="a00093_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00032" startline="990" endline="1099">print</referencedby>
        <referencedby refid="a00093_1a44604a738554f234df1d0af3ec157f96" compoundref="a00032" startline="1384" endline="1395">projectContactPointOnFlat</referencedby>
        <referencedby refid="a00093_1ad7570a667f28e75b254b00200dd1ae34" compoundref="a00032" startline="1400" endline="1411">projectContactPointOnMesh</referencedby>
        <referencedby refid="a00093_1a25ad9b63a2daea89ab6b17e949028d8d" compoundref="a00032" startline="332" endline="337">rotate</referencedby>
        <referencedby refid="a00093_1acd3e5c07070586785043b991f4ebcd3b" compoundref="a00032" startline="342" endline="347">rotation</referencedby>
        <referencedby refid="a00093_1a2cada05513ee0744000587966909ab7c" compoundref="a00032" startline="1223" endline="1260">samplingCross</referencedby>
        <referencedby refid="a00093_1a27bbf4a9cd544259a4c53ef86a980c86" compoundref="a00032" startline="855" endline="968">setup</referencedby>
        <referencedby refid="a00093_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" compoundref="a00032" startline="56" endline="69">shell</referencedby>
        <referencedby refid="a00093_1a3e084b8c0d6e3ec682383545a61787af" compoundref="a00032" startline="362" endline="366">transform</referencedby>
        <referencedby refid="a00093_1ab8206d37a830c82ad372d3276556630a" compoundref="a00032" startline="380" endline="384">transformation</referencedby>
        <referencedby refid="a00093_1a812b5a7947d74eff88e5b9cfe24c9ef0" compoundref="a00032" startline="313" endline="317">translate</referencedby>
        <referencedby refid="a00093_1a3d0282a1133a19e3e1ae06f91b35b194" compoundref="a00032" startline="322" endline="327">translation</referencedby>
        <referencedby refid="a00093_1a2752d2f553b89f2b722c14f98380b025" compoundref="a00032" startline="446" endline="454">updateBBox</referencedby>
        <referencedby refid="a00093_1ad7868ccdd90b807c75684cb51c256d03" compoundref="a00032" startline="389" endline="393">x</referencedby>
        <referencedby refid="a00093_1a1de4c83db18282e37892c7adb0224232" compoundref="a00032" startline="398" endline="402">y</referencedby>
        <referencedby refid="a00093_1a79039f854236a5ae427da3f0868f988a" compoundref="a00032" startline="407" endline="411">z</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00093_1a9d247a88263b13e385d787d5c9bdfe1b" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; aabb &gt;</type>
        <definition>std::shared_ptr&lt;aabb&gt; enve::shell::m_bbox</definition>
        <argsstring></argsstring>
        <name>m_bbox</name>
        <briefdescription>
<para>Shell bounding aabb (must be transformed in the mesh reference frame before intersection!) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="80" column="22" bodyfile="include/enve_shell.hh" bodystart="80" bodyend="-1"/>
        <referencedby refid="a00093_1aa143ec0906a3edd9768da2aa67a8465d" compoundref="a00032" startline="437" endline="441">bbox</referencedby>
        <referencedby refid="a00093_1a27bbf4a9cd544259a4c53ef86a980c86" compoundref="a00032" startline="855" endline="968">setup</referencedby>
        <referencedby refid="a00093_1a2752d2f553b89f2b722c14f98380b025" compoundref="a00032" startline="446" endline="454">updateBBox</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00093_1a9283c0c139904f54a0a5b2bdd72c7f48" prot="private" static="no" mutable="no">
        <type>std::vector&lt; point &gt;</type>
        <definition>std::vector&lt;point&gt; enve::shell::m_pointRib</definition>
        <argsstring></argsstring>
        <name>m_pointRib</name>
        <briefdescription>
<para>Contact points vector on mesh (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="82" column="17" bodyfile="include/enve_shell.hh" bodystart="82" bodyend="-1"/>
        <referencedby refid="a00093_1a34cda3c55d1681e2445b8527e0531e15" compoundref="a00032" startline="533" endline="551">contactDepthRib</referencedby>
        <referencedby refid="a00093_1a5434b33affdff6789869e2fcd4920592" compoundref="a00032" startline="670" endline="679">contactPointRib</referencedby>
        <referencedby refid="a00093_1ab43e572d17b998381e15eaf20ef3b359" compoundref="a00032" startline="788" endline="797">contactPointRibAffine</referencedby>
        <referencedby refid="a00093_1a95b37a8baf0bf781347170296f5484bd" compoundref="a00032" startline="1284" endline="1300">envelopLine</referencedby>
        <referencedby refid="a00093_1a24e056a64b05e0072b08bd242f57af84" compoundref="a00032" startline="1354" endline="1379">envelopPlane</referencedby>
        <referencedby refid="a00093_1aae97f79ce2d00111b8153145f3128d38" compoundref="a00032" startline="1265" endline="1279">envelopSingleTriangle</referencedby>
        <referencedby refid="a00093_1a1cd14845c1c2903eadb41d5a86a2627f" compoundref="a00032" startline="1305" endline="1349">envelopTriangle</referencedby>
        <referencedby refid="a00093_1abb6dc0591e20ced467d8327a84a3387d" compoundref="a00032" startline="1104" endline="1122">oversample</referencedby>
        <referencedby refid="a00093_1af92ceac6e9c110d0a040a85d2c532f7a" compoundref="a00032" startline="130" endline="160">reset</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00093_1ab4bde5e6f17b17e27cfc93b529780521" prot="private" static="no" mutable="no">
        <type>std::vector&lt; point &gt;</type>
        <definition>std::vector&lt;point&gt; enve::shell::m_pointMesh</definition>
        <argsstring></argsstring>
        <name>m_pointMesh</name>
        <briefdescription>
<para>Contact points vector on mesh (projected on the mesh) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="83" column="17" bodyfile="include/enve_shell.hh" bodystart="83" bodyend="-1"/>
        <referencedby refid="a00093_1a32942c1f12b74509287a05e8aac89d30" compoundref="a00032" startline="596" endline="614">contactDepthMesh</referencedby>
        <referencedby refid="a00093_1ac44ece18e8208d97b20979b06d4bea66" compoundref="a00032" startline="705" endline="714">contactPointMesh</referencedby>
        <referencedby refid="a00093_1a99272fa9ddd27a9c5ac800a53e991b24" compoundref="a00032" startline="830" endline="839">contactPointMeshAffine</referencedby>
        <referencedby refid="a00093_1a95b37a8baf0bf781347170296f5484bd" compoundref="a00032" startline="1284" endline="1300">envelopLine</referencedby>
        <referencedby refid="a00093_1a24e056a64b05e0072b08bd242f57af84" compoundref="a00032" startline="1354" endline="1379">envelopPlane</referencedby>
        <referencedby refid="a00093_1aae97f79ce2d00111b8153145f3128d38" compoundref="a00032" startline="1265" endline="1279">envelopSingleTriangle</referencedby>
        <referencedby refid="a00093_1a1cd14845c1c2903eadb41d5a86a2627f" compoundref="a00032" startline="1305" endline="1349">envelopTriangle</referencedby>
        <referencedby refid="a00093_1abb6dc0591e20ced467d8327a84a3387d" compoundref="a00032" startline="1104" endline="1122">oversample</referencedby>
        <referencedby refid="a00093_1af92ceac6e9c110d0a040a85d2c532f7a" compoundref="a00032" startline="130" endline="160">reset</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00093_1a2e436fcd9a55ce4f6b9a491eb04d2062" prot="private" static="no" mutable="no">
        <type>std::vector&lt; vec3 &gt;</type>
        <definition>std::vector&lt;vec3&gt; enve::shell::m_normal</definition>
        <argsstring></argsstring>
        <name>m_normal</name>
        <briefdescription>
<para>Contact normal vectors vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="84" column="18" bodyfile="include/enve_shell.hh" bodystart="84" bodyend="-1"/>
        <referencedby refid="a00093_1ae5e77948a3b67e4d1456dd80fd6cff15" compoundref="a00032" startline="635" endline="644">contactNormal</referencedby>
        <referencedby refid="a00093_1a99272fa9ddd27a9c5ac800a53e991b24" compoundref="a00032" startline="830" endline="839">contactPointMeshAffine</referencedby>
        <referencedby refid="a00093_1ab43e572d17b998381e15eaf20ef3b359" compoundref="a00032" startline="788" endline="797">contactPointRibAffine</referencedby>
        <referencedby refid="a00093_1a95b37a8baf0bf781347170296f5484bd" compoundref="a00032" startline="1284" endline="1300">envelopLine</referencedby>
        <referencedby refid="a00093_1a24e056a64b05e0072b08bd242f57af84" compoundref="a00032" startline="1354" endline="1379">envelopPlane</referencedby>
        <referencedby refid="a00093_1aae97f79ce2d00111b8153145f3128d38" compoundref="a00032" startline="1265" endline="1279">envelopSingleTriangle</referencedby>
        <referencedby refid="a00093_1a1cd14845c1c2903eadb41d5a86a2627f" compoundref="a00032" startline="1305" endline="1349">envelopTriangle</referencedby>
        <referencedby refid="a00093_1abb6dc0591e20ced467d8327a84a3387d" compoundref="a00032" startline="1104" endline="1122">oversample</referencedby>
        <referencedby refid="a00093_1af92ceac6e9c110d0a040a85d2c532f7a" compoundref="a00032" startline="130" endline="160">reset</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00093_1a1bf84b5ec1fc8dcb5b8eafe65b2cfed3" prot="private" static="no" mutable="no">
        <type>vecN</type>
        <definition>vecN enve::shell::m_friction</definition>
        <argsstring></argsstring>
        <name>m_friction</name>
        <briefdescription>
<para>Contact friction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="85" column="24" bodyfile="include/enve_shell.hh" bodystart="85" bodyend="-1"/>
        <referencedby refid="a00093_1ac4a93448b8ca9cc276c82c33870f1f2c" compoundref="a00032" startline="740" endline="745">contactFriction</referencedby>
        <referencedby refid="a00093_1a95b37a8baf0bf781347170296f5484bd" compoundref="a00032" startline="1284" endline="1300">envelopLine</referencedby>
        <referencedby refid="a00093_1a24e056a64b05e0072b08bd242f57af84" compoundref="a00032" startline="1354" endline="1379">envelopPlane</referencedby>
        <referencedby refid="a00093_1aae97f79ce2d00111b8153145f3128d38" compoundref="a00032" startline="1265" endline="1279">envelopSingleTriangle</referencedby>
        <referencedby refid="a00093_1a1cd14845c1c2903eadb41d5a86a2627f" compoundref="a00032" startline="1305" endline="1349">envelopTriangle</referencedby>
        <referencedby refid="a00093_1abb6dc0591e20ced467d8327a84a3387d" compoundref="a00032" startline="1104" endline="1122">oversample</referencedby>
        <referencedby refid="a00093_1af92ceac6e9c110d0a040a85d2c532f7a" compoundref="a00032" startline="130" endline="160">reset</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00093_1ae737a63859493a25041d6d06429f9771" prot="private" static="no" mutable="no">
        <type>vecN</type>
        <definition>vecN enve::shell::m_depth</definition>
        <argsstring></argsstring>
        <name>m_depth</name>
        <briefdescription>
<para>Contact depth. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="86" column="24" bodyfile="include/enve_shell.hh" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00093_1a9e3dfd623bc883cb0dbab5fdad026a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::~shell</definition>
        <argsstring>(void)</argsstring>
        <name>~shell</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Shell class destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="90" column="5" bodyfile="src/enve_shell.cc" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a7840e1d408713ab4eb4b91e5c3912e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(shell const &amp;)=delete</argsstring>
        <name>shell</name>
        <param>
          <type><ref refid="a00093" kindref="compound">shell</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Shell copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="93" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1afda23b623e717fdd16126eb5de7685e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(shell const &amp;&amp;)=delete</argsstring>
        <name>shell</name>
        <param>
          <type><ref refid="a00093" kindref="compound">shell</ref> const &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Shell move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="96" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(size_t size, real r_x, real m_x, real r_y, real m_y, real l_y)</argsstring>
        <name>shell</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <briefdescription><para>Input ribs number </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>r_x</declname>
          <briefdescription><para>Input shell radius on x axis (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>m_x</declname>
          <briefdescription><para>Input shell curve degree for x axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>r_y</declname>
          <briefdescription><para>Input shell radius on y axis (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>m_y</declname>
          <briefdescription><para>Input shell curve degree for y axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>l_y</declname>
          <briefdescription><para>Input surface half width on y axis (m) </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Shell class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="99" column="5" bodyfile="src/enve_shell.cc" bodystart="56" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a8d1fa93178d93b20d6175bf7cadde7b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(size_t size, vecN const &amp;dataR, vecN const &amp;dataY, size_t order, real tolerance=EPSILON_MEDIUM)</argsstring>
        <name>shell</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <briefdescription><para>Input ribs number </para>
</briefdescription>
        </param>
        <param>
          <type>vecN const &amp;</type>
          <declname>dataR</declname>
          <briefdescription><para>Vector of radius data (m) </para>
</briefdescription>
        </param>
        <param>
          <type>vecN const &amp;</type>
          <declname>dataY</declname>
          <briefdescription><para>Vector of y data (m) </para>
</briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>order</declname>
          <briefdescription><para>Polynom order </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_MEDIUM</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Shell class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="109" column="5" bodyfile="src/enve_shell.cc" bodystart="73" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a4e815a579f36a8918efc59ebff99c23b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(size_t size, vecN const &amp;dataR, vecN const &amp;dataY)</argsstring>
        <name>shell</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <briefdescription><para>Input ribs number </para>
</briefdescription>
        </param>
        <param>
          <type>vecN const &amp;</type>
          <declname>dataR</declname>
          <briefdescription><para>Vector of radius data (m) </para>
</briefdescription>
        </param>
        <param>
          <type>vecN const &amp;</type>
          <declname>dataY</declname>
          <briefdescription><para>Vector of y data (m) </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Shell class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="118" column="5" bodyfile="src/enve_shell.cc" bodystart="89" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a58821a0d61cb1df8da61962c03ff462b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(size_t size, hyperellipse const &amp;hyperellipse_in)</argsstring>
        <name>shell</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <briefdescription><para>Input ribs number </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00069" kindref="compound">hyperellipse</ref> const &amp;</type>
          <declname>hyperellipse_in</declname>
          <briefdescription><para>Input hyperellipse shape </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Shell class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="125" column="5" bodyfile="src/enve_shell.cc" bodystart="103" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1ae5be566871a0e79aad7f487dfc893ab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::shell::shell</definition>
        <argsstring>(size_t size, polynom const &amp;polynom_in)</argsstring>
        <name>shell</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <briefdescription><para>Input ribs number </para>
</briefdescription>
        </param>
        <param>
          <type><ref refid="a00081" kindref="compound">polynom</ref> const &amp;</type>
          <declname>polynom_in</declname>
          <briefdescription><para>Input polynom shape </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Shell class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="131" column="5" bodyfile="src/enve_shell.cc" bodystart="116" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1af92ceac6e9c110d0a040a85d2c532f7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::reset</definition>
        <argsstring>(size_t size)</argsstring>
        <name>reset</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
          <briefdescription><para>Input ribs number </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Reset shell size, position and stored contact results. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="138" column="5" bodyfile="src/enve_shell.cc" bodystart="130" bodyend="160"/>
        <referencedby refid="a00093_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" compoundref="a00032" startline="56" endline="69">shell</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1aaeafa8ac9f588ebdf3f2b8722dde9290" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t enve::shell::size</definition>
        <argsstring>(void) const</argsstring>
        <name>size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell ribs number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="144" column="5" bodyfile="src/enve_shell.cc" bodystart="165" bodyend="169"/>
        <referencedby refid="a00093_1a34d335f73846fe7613dff3ec6952fc68" compoundref="a00032" startline="619" endline="630">contactDepthMesh</referencedby>
        <referencedby refid="a00093_1a5a1d4ddc014a9f25e32c4c55795d5c0c" compoundref="a00032" startline="556" endline="567">contactDepthRib</referencedby>
        <referencedby refid="a00093_1ae5e77948a3b67e4d1456dd80fd6cff15" compoundref="a00032" startline="635" endline="644">contactNormal</referencedby>
        <referencedby refid="a00093_1ac44ece18e8208d97b20979b06d4bea66" compoundref="a00032" startline="705" endline="714">contactPointMesh</referencedby>
        <referencedby refid="a00093_1add2c531fcbc8c6fdf8797e4c2982898c" compoundref="a00032" startline="844" endline="850">contactPointMeshAffine</referencedby>
        <referencedby refid="a00093_1a5434b33affdff6789869e2fcd4920592" compoundref="a00032" startline="670" endline="679">contactPointRib</referencedby>
        <referencedby refid="a00093_1a7b337063c51e32f1455e339b53f11b87" compoundref="a00032" startline="802" endline="808">contactPointRibAffine</referencedby>
        <referencedby refid="a00093_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00032" startline="990" endline="1099">print</referencedby>
        <referencedby refid="a00093_1a23d2a9c7d4bc4b10558e05941582df2d" compoundref="a00032" startline="498" endline="504">relativeAngles</referencedby>
        <referencedby refid="a00093_1af92ceac6e9c110d0a040a85d2c532f7a" compoundref="a00032" startline="130" endline="160">reset</referencedby>
        <referencedby refid="a00093_1a27bbf4a9cd544259a4c53ef86a980c86" compoundref="a00032" startline="855" endline="968">setup</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1ae545ab83f69df117efd3aefc98905b58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceMaxRadius</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceMaxRadius</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell surface maximum radius (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="157" column="5" bodyfile="src/enve_shell.cc" bodystart="185" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a041572d89d883b768eb195b61775e99d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceMaxWidth</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceMaxWidth</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell surface maximum width on y axis (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="161" column="5" bodyfile="src/enve_shell.cc" bodystart="194" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1ad2581acf1804fe415a4253914d33b9d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceWidthLowerBound</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceWidthLowerBound</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell surface minimum width (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="165" column="5" bodyfile="src/enve_shell.cc" bodystart="203" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1ad46823bc50ac456ee220fab3bf62504a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceWidthUpperBound</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceWidthUpperBound</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell surface maximum width (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="169" column="5" bodyfile="src/enve_shell.cc" bodystart="212" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a72cfa8296a664a3d3b538f7c97f187a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceWidth</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceWidth</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell surface width (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="173" column="5" bodyfile="src/enve_shell.cc" bodystart="221" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a968cb22f2dddc6ed28d29fe61bfb9f25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::checkWidthBound</definition>
        <argsstring>(real y) const</argsstring>
        <name>checkWidthBound</name>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get shell surface maximum width on reference (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="177" column="5" bodyfile="src/enve_shell.cc" bodystart="230" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1afdf0e745ae4a5dbbc3daca2af53cd2d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceRadius</definition>
        <argsstring>(real y) const</argsstring>
        <name>surfaceRadius</name>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get shell surface of revolution rib radius at y axis coordinate (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="183" column="5" bodyfile="src/enve_shell.cc" bodystart="240" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a9ff4b3d279cf3bca199d71b6829bb10f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceDerivative</definition>
        <argsstring>(real y, real tolerance=EPSILON_MEDIUM) const</argsstring>
        <name>surfaceDerivative</name>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_MEDIUM</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get shell surface of revolution rib first derivative with respect to y coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="189" column="5" bodyfile="src/enve_shell.cc" bodystart="250" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a4bbb973b459c409e07100b9f526d31f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::surfaceAngle</definition>
        <argsstring>(real y, real tolerance=EPSILON_MEDIUM) const</argsstring>
        <name>surfaceAngle</name>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_MEDIUM</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get shell surface of revolution rib angle with respect to y axis (rad) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="196" column="5" bodyfile="src/enve_shell.cc" bodystart="261" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1aadb3a2be11b94f1273596ed709fc9e23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::ribRadius</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>ribRadius</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input index </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th rib unloaded radius (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="203" column="5" bodyfile="src/enve_shell.cc" bodystart="272" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1ad8a3d3f336041aae315b43022a7dbc3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>point</type>
        <definition>point enve::shell::ribCenter</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>ribCenter</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input index </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get i-th rib unloaded radius (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="209" column="5" bodyfile="src/enve_shell.cc" bodystart="282" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a43a508efabf7462e0fd13262a39a47b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shell::ribWidth</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>ribWidth</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input index </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get rib width (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="215" column="5" bodyfile="src/enve_shell.cc" bodystart="292" bodyend="297"/>
        <referencedby refid="a00093_1af92ceac6e9c110d0a040a85d2c532f7a" compoundref="a00032" startline="130" endline="160">reset</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1a812b5a7947d74eff88e5b9cfe24c9ef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::translate</definition>
        <argsstring>(vec3 const &amp;vector_in)</argsstring>
        <name>translate</name>
        <param>
          <type>vec3 const &amp;</type>
          <declname>vector_in</declname>
          <briefdescription><para>Translation vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Translate shell by vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="230" column="5" bodyfile="src/enve_shell.cc" bodystart="313" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a3d0282a1133a19e3e1ae06f91b35b194" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 enve::shell::translation</definition>
        <argsstring>(void) const</argsstring>
        <name>translation</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns shell translation vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="236" column="5" bodyfile="src/enve_shell.cc" bodystart="322" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a25ad9b63a2daea89ab6b17e949028d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::rotate</definition>
        <argsstring>(real angle, vec3 const &amp;axis)</argsstring>
        <name>rotate</name>
        <param>
          <type>real</type>
          <declname>angle</declname>
          <briefdescription><para>Input angle (rad) </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 const &amp;</type>
          <declname>axis</declname>
          <briefdescription><para>Input axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rotate shell by a rotation angle around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="240" column="5" bodyfile="src/enve_shell.cc" bodystart="332" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a5ac7dbea127c06ee266b08053d775387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::rotate</definition>
        <argsstring>(real angle, std::string const &amp;axis)</argsstring>
        <name>rotate</name>
        <param>
          <type>real</type>
          <declname>angle</declname>
          <briefdescription><para>Input angle (rad) </para>
</briefdescription>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>axis</declname>
          <briefdescription><para>Input axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Rotate shell by a rotation angle around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="247" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1acd3e5c07070586785043b991f4ebcd3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>mat3</type>
        <definition>mat3 enve::shell::rotation</definition>
        <argsstring>(void) const</argsstring>
        <name>rotation</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns shell rotation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="254" column="5" bodyfile="src/enve_shell.cc" bodystart="342" bodyend="347"/>
        <referencedby refid="a00093_1a24e056a64b05e0072b08bd242f57af84" compoundref="a00032" startline="1354" endline="1379">envelopPlane</referencedby>
        <referencedby refid="a00093_1a1cd14845c1c2903eadb41d5a86a2627f" compoundref="a00032" startline="1305" endline="1349">envelopTriangle</referencedby>
        <referencedby refid="a00093_1a34d0cda62f4f3f5ad7057222eed05fcf" compoundref="a00032" startline="470" endline="478">relativeAngles</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1ad49487850eb0510d7b068f91501ca836" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>mat3</type>
        <definition>mat3 enve::shell::linear</definition>
        <argsstring>(void) const</argsstring>
        <name>linear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns shell linear matrix (rotation + scaling + shearing) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="258" column="5" bodyfile="src/enve_shell.cc" bodystart="352" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1ab32cfff7bf657d5b613cb83048bbdd38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::transform</definition>
        <argsstring>(affine const &amp;matrix_in)</argsstring>
        <name>transform</name>
        <param>
          <type>affine const &amp;</type>
          <declname>matrix_in</declname>
          <briefdescription><para>Input 4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set 4x4 affine transformation matrix <linebreak/>
Warning: Rotation matrix must be orthonormal! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="263" column="5" bodyfile="src/enve_shell.cc" bodystart="371" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a3e084b8c0d6e3ec682383545a61787af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::transform</definition>
        <argsstring>(mat4 const &amp;matrix_in)</argsstring>
        <name>transform</name>
        <param>
          <type>mat4 const &amp;</type>
          <declname>matrix_in</declname>
          <briefdescription><para>Input 4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set 4x4 affine transformation matrix <linebreak/>
Warning: Rotation matrix must be orthonormal! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="270" column="5" bodyfile="src/enve_shell.cc" bodystart="362" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1ab8206d37a830c82ad372d3276556630a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>affine const &amp;</type>
        <definition>affine const  &amp; enve::shell::transformation</definition>
        <argsstring>(void) const</argsstring>
        <name>transformation</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get 4x4 affine transformation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="276" column="5" bodyfile="src/enve_shell.cc" bodystart="380" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1ad7868ccdd90b807c75684cb51c256d03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 enve::shell::x</definition>
        <argsstring>(void) const</argsstring>
        <name>x</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get x vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="280" column="5" bodyfile="src/enve_shell.cc" bodystart="389" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a1de4c83db18282e37892c7adb0224232" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 enve::shell::y</definition>
        <argsstring>(void) const</argsstring>
        <name>y</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get y vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="284" column="5" bodyfile="src/enve_shell.cc" bodystart="398" bodyend="402"/>
        <referencedby refid="a00093_1a2e38dcc1707ca2aab5a6f215da1d8dc0" compoundref="a00032" startline="813" endline="825">contactPointMeshAffine</referencedby>
        <referencedby refid="a00093_1ae83fb0823051949ea804a9734eaf3e6b" compoundref="a00032" startline="771" endline="783">contactPointRibAffine</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1a79039f854236a5ae427da3f0868f988a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vec3</type>
        <definition>vec3 enve::shell::z</definition>
        <argsstring>(void) const</argsstring>
        <name>z</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get z vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="288" column="5" bodyfile="src/enve_shell.cc" bodystart="407" bodyend="411"/>
        <referencedby refid="a00093_1a95b37a8baf0bf781347170296f5484bd" compoundref="a00032" startline="1284" endline="1300">envelopLine</referencedby>
        <referencedby refid="a00093_1aae97f79ce2d00111b8153145f3128d38" compoundref="a00032" startline="1265" endline="1279">envelopSingleTriangle</referencedby>
        <referencedby refid="a00093_1ad0f63426dd56d48ee30c8262d034ee81" compoundref="a00032" startline="1154" endline="1218">samplingPoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1a3758f1248a4e9a9487682560d75ae823" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::eulerAngles</definition>
        <argsstring>(vec3 &amp;angles) const</argsstring>
        <name>eulerAngles</name>
        <param>
          <type>vec3 &amp;</type>
          <declname>angles</declname>
          <briefdescription><para>Frame Euler angles </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current Euler angles (rad) <linebreak/>
WARNING: Rotation sequence ZXY! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="293" column="5" bodyfile="src/enve_shell.cc" bodystart="416" bodyend="421"/>
        <referencedby refid="a00093_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00032" startline="990" endline="1099">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1aa143ec0906a3edd9768da2aa67a8465d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; aabb &gt;</type>
        <definition>std::shared_ptr&lt; aabb &gt; enve::shell::bbox</definition>
        <argsstring>(void) const</argsstring>
        <name>bbox</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get shell bonding aabb as object pointer vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="308" column="5" bodyfile="src/enve_shell.cc" bodystart="437" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a2752d2f553b89f2b722c14f98380b025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::updateBBox</definition>
        <argsstring>(void)</argsstring>
        <name>updateBBox</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Update shell bonding aabb. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="312" column="5" bodyfile="src/enve_shell.cc" bodystart="446" bodyend="454"/>
        <referencedby refid="a00093_1af92ceac6e9c110d0a040a85d2c532f7a" compoundref="a00032" startline="130" endline="160">reset</referencedby>
        <referencedby refid="a00093_1a27bbf4a9cd544259a4c53ef86a980c86" compoundref="a00032" startline="855" endline="968">setup</referencedby>
        <referencedby refid="a00093_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" compoundref="a00032" startline="56" endline="69">shell</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1a34d0cda62f4f3f5ad7057222eed05fcf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::relativeAngles</definition>
        <argsstring>(vec3 &amp;angles) const</argsstring>
        <name>relativeAngles</name>
        <param>
          <type>vec3 &amp;</type>
          <declname>angles</declname>
          <briefdescription><para>Relative angles vector (rad) </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get shell relative angles (rad) <linebreak/>
WARNING: Rotation sequence ZXY! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="326" column="5" bodyfile="src/enve_shell.cc" bodystart="470" bodyend="478"/>
        <referencedby refid="a00093_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00032" startline="990" endline="1099">print</referencedby>
        <referencedby refid="a00093_1a23d2a9c7d4bc4b10558e05941582df2d" compoundref="a00032" startline="498" endline="504">relativeAngles</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1ae48557597d39b647eac55a03704bdfc3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::relativeAngles</definition>
        <argsstring>(size_t i, vec3 &amp;angles) const</argsstring>
        <name>relativeAngles</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>angles</declname>
          <briefdescription><para>Relative angles vector (rad) </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get shell relative angles for the i-th rib (rad) <linebreak/>
WARNING: Rotation sequence ZXY! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="333" column="5" bodyfile="src/enve_shell.cc" bodystart="483" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a23d2a9c7d4bc4b10558e05941582df2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::relativeAngles</definition>
        <argsstring>(std::vector&lt; vec3 &gt; &amp;angles) const</argsstring>
        <name>relativeAngles</name>
        <param>
          <type>std::vector&lt; vec3 &gt; &amp;</type>
          <declname>angles</declname>
          <briefdescription><para>Relative angles vector (rad) </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get shell relative angles as vector (rad) <linebreak/>
WARNING: Rotation sequence ZXY! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="341" column="5" bodyfile="src/enve_shell.cc" bodystart="498" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1ab52643e3a7adcc8f95bf597eda311d6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactDepthRib</definition>
        <argsstring>(real &amp;depth, real &amp;depth_dot, real depth_old, real time_step) const</argsstring>
        <name>contactDepthRib</name>
        <param>
          <type>real &amp;</type>
          <declname>depth</declname>
          <briefdescription><para>Depth at center point [m/s] </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>depth_dot</declname>
          <briefdescription><para>Contact depth derivative [m/s] </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>depth_old</declname>
          <briefdescription><para>Previous time step Rho (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>time_step</declname>
          <briefdescription><para>Time step [s] </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact depth at center point (m) (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="347" column="5" bodyfile="src/enve_shell.cc" bodystart="509" bodyend="528"/>
        <referencedby refid="a00093_1a5a1d4ddc014a9f25e32c4c55795d5c0c" compoundref="a00032" startline="556" endline="567">contactDepthRib</referencedby>
        <referencedby refid="a00093_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00032" startline="990" endline="1099">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1a34cda3c55d1681e2445b8527e0531e15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactDepthRib</definition>
        <argsstring>(size_t i, real &amp;depth, real &amp;depth_dot, real depth_old, real time_step) const</argsstring>
        <name>contactDepthRib</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>depth</declname>
          <briefdescription><para>Depth at center point [m/s] </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>depth_dot</declname>
          <briefdescription><para>Contact depth derivative [m/s] </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>depth_old</declname>
          <briefdescription><para>Previous time step Rho (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>time_step</declname>
          <briefdescription><para>Time step [s] </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact depth at center point for the i-th rib (m) (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="356" column="5" bodyfile="src/enve_shell.cc" bodystart="533" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a5a1d4ddc014a9f25e32c4c55795d5c0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactDepthRib</definition>
        <argsstring>(vecN &amp;depth, vecN &amp;depth_dot, vecN const &amp;depth_old, real time_step) const</argsstring>
        <name>contactDepthRib</name>
        <param>
          <type>vecN &amp;</type>
          <declname>depth</declname>
          <briefdescription><para>Depth matrix [m/s] </para>
</briefdescription>
        </param>
        <param>
          <type>vecN &amp;</type>
          <declname>depth_dot</declname>
          <briefdescription><para>Contact depth derivative matrix [m/s] </para>
</briefdescription>
        </param>
        <param>
          <type>vecN const &amp;</type>
          <declname>depth_old</declname>
          <briefdescription><para>Previous time step Rho matrix (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>time_step</declname>
          <briefdescription><para>Time step [s] </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact depth vector (m) and it time derivatives [m/s] (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="366" column="5" bodyfile="src/enve_shell.cc" bodystart="556" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a63165bc2945d92b1f78883bd0a6758da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactDepthMesh</definition>
        <argsstring>(real &amp;depth, real &amp;depth_dot, real depth_old, real time_step) const</argsstring>
        <name>contactDepthMesh</name>
        <param>
          <type>real &amp;</type>
          <declname>depth</declname>
          <briefdescription><para>Depth at center point [m/s] </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>depth_dot</declname>
          <briefdescription><para>Contact depth derivative [m/s] </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>depth_old</declname>
          <briefdescription><para>Previous time step Rho (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>time_step</declname>
          <briefdescription><para>Time step [s] </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact depth at center point (m) (projected on the mesh) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="375" column="5" bodyfile="src/enve_shell.cc" bodystart="572" bodyend="591"/>
        <referencedby refid="a00093_1a34d335f73846fe7613dff3ec6952fc68" compoundref="a00032" startline="619" endline="630">contactDepthMesh</referencedby>
        <referencedby refid="a00093_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00032" startline="990" endline="1099">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1a32942c1f12b74509287a05e8aac89d30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactDepthMesh</definition>
        <argsstring>(size_t i, real &amp;depth, real &amp;depth_dot, real depth_old, real time_step) const</argsstring>
        <name>contactDepthMesh</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>depth</declname>
          <briefdescription><para>Depth at center point [m/s] </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>depth_dot</declname>
          <briefdescription><para>Contact depth derivative [m/s] </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>depth_old</declname>
          <briefdescription><para>Previous time step Rho (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>time_step</declname>
          <briefdescription><para>Time step [s] </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact depth at center point for the i-th rib (m) (projected on the mesh) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="384" column="5" bodyfile="src/enve_shell.cc" bodystart="596" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a34d335f73846fe7613dff3ec6952fc68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactDepthMesh</definition>
        <argsstring>(vecN &amp;depth, vecN &amp;depth_dot, vecN const &amp;depth_old, real time_step) const</argsstring>
        <name>contactDepthMesh</name>
        <param>
          <type>vecN &amp;</type>
          <declname>depth</declname>
          <briefdescription><para>Depth matrix [m/s] </para>
</briefdescription>
        </param>
        <param>
          <type>vecN &amp;</type>
          <declname>depth_dot</declname>
          <briefdescription><para>Contact depth derivative matrix [m/s] </para>
</briefdescription>
        </param>
        <param>
          <type>vecN const &amp;</type>
          <declname>depth_old</declname>
          <briefdescription><para>Previous time step Rho matrix (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>time_step</declname>
          <briefdescription><para>Time step [s] </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact depth vector (m) and it time derivatives [m/s] (projected on the mesh) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="394" column="5" bodyfile="src/enve_shell.cc" bodystart="619" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1ae5e77948a3b67e4d1456dd80fd6cff15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactNormal</definition>
        <argsstring>(vec3 &amp;normal) const</argsstring>
        <name>contactNormal</name>
        <param>
          <type>vec3 &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Contact point normal direction </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact normal vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="403" column="5" bodyfile="src/enve_shell.cc" bodystart="635" bodyend="644"/>
        <referencedby refid="a00093_1a2e38dcc1707ca2aab5a6f215da1d8dc0" compoundref="a00032" startline="813" endline="825">contactPointMeshAffine</referencedby>
        <referencedby refid="a00093_1ae83fb0823051949ea804a9734eaf3e6b" compoundref="a00032" startline="771" endline="783">contactPointRibAffine</referencedby>
        <referencedby refid="a00093_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00032" startline="990" endline="1099">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1a3dc741308478849ef36b6b9622a48b62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactNormal</definition>
        <argsstring>(size_t i, vec3 &amp;normal) const</argsstring>
        <name>contactNormal</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Contact point normal direction </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact normal vector for the i-th rib. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="409" column="5" bodyfile="src/enve_shell.cc" bodystart="649" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a58b2d3b655d5959a02ddad029a7efe04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactNormal</definition>
        <argsstring>(std::vector&lt; vec3 &gt; &amp;normal) const</argsstring>
        <name>contactNormal</name>
        <param>
          <type>std::vector&lt; vec3 &gt; &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Contact point normal direction vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact normal vectors vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="416" column="5" bodyfile="src/enve_shell.cc" bodystart="660" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a5434b33affdff6789869e2fcd4920592" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointRib</definition>
        <argsstring>(point &amp;point) const</argsstring>
        <name>contactPointRib</name>
        <param>
          <type>point &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="422" column="5" bodyfile="src/enve_shell.cc" bodystart="670" bodyend="679"/>
        <referencedby refid="a00093_1ab52643e3a7adcc8f95bf597eda311d6a" compoundref="a00032" startline="509" endline="528">contactDepthRib</referencedby>
        <referencedby refid="a00093_1ae83fb0823051949ea804a9734eaf3e6b" compoundref="a00032" startline="771" endline="783">contactPointRibAffine</referencedby>
        <referencedby refid="a00093_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00032" startline="990" endline="1099">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1af1f59e6a2d84f7bdfcd221af4016d21f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointRib</definition>
        <argsstring>(size_t i, point &amp;point) const</argsstring>
        <name>contactPointRib</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="428" column="5" bodyfile="src/enve_shell.cc" bodystart="684" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1afb3c617e1c9a11200fa0c0108260d4f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointRib</definition>
        <argsstring>(std::vector&lt; point &gt; &amp;point) const</argsstring>
        <name>contactPointRib</name>
        <param>
          <type>std::vector&lt; point &gt; &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Contact points vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact points vector (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="435" column="5" bodyfile="src/enve_shell.cc" bodystart="695" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1ac44ece18e8208d97b20979b06d4bea66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointMesh</definition>
        <argsstring>(point &amp;point) const</argsstring>
        <name>contactPointMesh</name>
        <param>
          <type>point &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point (projected on the mesh) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="441" column="5" bodyfile="src/enve_shell.cc" bodystart="705" bodyend="714"/>
        <referencedby refid="a00093_1a63165bc2945d92b1f78883bd0a6758da" compoundref="a00032" startline="572" endline="591">contactDepthMesh</referencedby>
        <referencedby refid="a00093_1a2e38dcc1707ca2aab5a6f215da1d8dc0" compoundref="a00032" startline="813" endline="825">contactPointMeshAffine</referencedby>
        <referencedby refid="a00093_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00032" startline="990" endline="1099">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1a83158705cc572a485e12b73f3bf2eb72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointMesh</definition>
        <argsstring>(size_t i, point &amp;point) const</argsstring>
        <name>contactPointMesh</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Contact point </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point (projected on the mesh) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="447" column="5" bodyfile="src/enve_shell.cc" bodystart="719" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1adf2db1cc963197db12b2d637d05cf263" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointMesh</definition>
        <argsstring>(std::vector&lt; point &gt; &amp;point) const</argsstring>
        <name>contactPointMesh</name>
        <param>
          <type>std::vector&lt; point &gt; &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Contact points vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact points vector (projected on the mesh) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="454" column="5" bodyfile="src/enve_shell.cc" bodystart="730" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1ac4a93448b8ca9cc276c82c33870f1f2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactFriction</definition>
        <argsstring>(real &amp;friction) const</argsstring>
        <name>contactFriction</name>
        <param>
          <type>real &amp;</type>
          <declname>friction</declname>
          <briefdescription><para>Contact friction coefficient </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point friction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="460" column="5" bodyfile="src/enve_shell.cc" bodystart="740" bodyend="745"/>
        <referencedby refid="a00093_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00032" startline="990" endline="1099">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1a1b1657dc9797369757849522b24b77ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactFriction</definition>
        <argsstring>(size_t i, real &amp;friction) const</argsstring>
        <name>contactFriction</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>friction</declname>
          <briefdescription><para>Contact friction coefficient </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point friction for the i-th rib. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="466" column="5" bodyfile="src/enve_shell.cc" bodystart="750" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1ae1b1570b28c915ff559add95aebff315" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactFriction</definition>
        <argsstring>(vecN &amp;friction) const</argsstring>
        <name>contactFriction</name>
        <param>
          <type>vecN &amp;</type>
          <declname>friction</declname>
          <briefdescription><para>Contact friction coefficients vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact frictions vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="473" column="5" bodyfile="src/enve_shell.cc" bodystart="761" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1ae83fb0823051949ea804a9734eaf3e6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointRibAffine</definition>
        <argsstring>(affine &amp;point_affine) const</argsstring>
        <name>contactPointRibAffine</name>
        <param>
          <type>affine &amp;</type>
          <declname>point_affine</declname>
          <briefdescription><para>Contact point affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point 4x4 affine transformation matrix (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="479" column="5" bodyfile="src/enve_shell.cc" bodystart="771" bodyend="783"/>
        <referencedby refid="a00093_1a7b337063c51e32f1455e339b53f11b87" compoundref="a00032" startline="802" endline="808">contactPointRibAffine</referencedby>
        <referencedby refid="a00093_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00032" startline="990" endline="1099">print</referencedby>
        <referencedby refid="a00093_1a34d0cda62f4f3f5ad7057222eed05fcf" compoundref="a00032" startline="470" endline="478">relativeAngles</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1ab43e572d17b998381e15eaf20ef3b359" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointRibAffine</definition>
        <argsstring>(size_t i, affine &amp;point_affine) const</argsstring>
        <name>contactPointRibAffine</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>affine &amp;</type>
          <declname>point_affine</declname>
          <briefdescription><para>Contact point affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point 4x4 affine transformation matrix for the i-th rib (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="485" column="5" bodyfile="src/enve_shell.cc" bodystart="788" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a7b337063c51e32f1455e339b53f11b87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointRibAffine</definition>
        <argsstring>(std::vector&lt; affine &gt; &amp;point_affine) const</argsstring>
        <name>contactPointRibAffine</name>
        <param>
          <type>std::vector&lt; affine &gt; &amp;</type>
          <declname>point_affine</declname>
          <briefdescription><para>Contact point affine transformation matrices vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point 4x4 affine transformation matrices (projected on rib plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="492" column="5" bodyfile="src/enve_shell.cc" bodystart="802" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a2e38dcc1707ca2aab5a6f215da1d8dc0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointMeshAffine</definition>
        <argsstring>(affine &amp;point_affine) const</argsstring>
        <name>contactPointMeshAffine</name>
        <param>
          <type>affine &amp;</type>
          <declname>point_affine</declname>
          <briefdescription><para>Contact point affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point 4x4 affine transformation matrix (projected on the mesh) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="498" column="5" bodyfile="src/enve_shell.cc" bodystart="813" bodyend="825"/>
        <referencedby refid="a00093_1add2c531fcbc8c6fdf8797e4c2982898c" compoundref="a00032" startline="844" endline="850">contactPointMeshAffine</referencedby>
        <referencedby refid="a00093_1a1a425eec93c459c7542b22b1c28c5417" compoundref="a00032" startline="990" endline="1099">print</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1a99272fa9ddd27a9c5ac800a53e991b24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointMeshAffine</definition>
        <argsstring>(size_t i, affine &amp;point_affine) const</argsstring>
        <name>contactPointMeshAffine</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Input i-th index </para>
</briefdescription>
        </param>
        <param>
          <type>affine &amp;</type>
          <declname>point_affine</declname>
          <briefdescription><para>Contact point affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point 4x4 affine transformation matrix for the i-th rib (projected on the mesh) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="504" column="5" bodyfile="src/enve_shell.cc" bodystart="830" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1add2c531fcbc8c6fdf8797e4c2982898c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::contactPointMeshAffine</definition>
        <argsstring>(std::vector&lt; affine &gt; &amp;point_affine) const</argsstring>
        <name>contactPointMeshAffine</name>
        <param>
          <type>std::vector&lt; affine &gt; &amp;</type>
          <declname>point_affine</declname>
          <briefdescription><para>Contact point affine transformation matrices vector </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get contact point 4x4 affine transformation matrices (projected on the mesh) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="511" column="5" bodyfile="src/enve_shell.cc" bodystart="844" bodyend="850"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a27bbf4a9cd544259a4c53ef86a980c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::setup</definition>
        <argsstring>(ground::mesh const &amp;ground, affine const &amp;matrix, size_t threshold, std::string const method)</argsstring>
        <name>setup</name>
        <param>
          <type><ref refid="a00073" kindref="compound">ground::mesh</ref> const &amp;</type>
          <declname>ground</declname>
          <briefdescription><para>ENVE mesh object (ground) </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>matrix</declname>
          <briefdescription><para>4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>threshold</declname>
          <briefdescription><para>Evaluations threshold number </para>
</briefdescription>
        </param>
        <param>
          <type>std::string const</type>
          <declname>method</declname>
          <briefdescription><para>Method name (choose from: &quot;triangle&quot; or &quot;line&quot;) </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Update current shell position and find contact parameters (intersection with mesh) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="517" column="5" bodyfile="src/enve_shell.cc" bodystart="855" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a5489eaf53c88ef1a622a91ffdde1e76f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::setup</definition>
        <argsstring>(ground::flat const &amp;ground, affine const &amp;matrix)</argsstring>
        <name>setup</name>
        <param>
          <type><ref refid="a00065" kindref="compound">ground::flat</ref> const &amp;</type>
          <declname>ground</declname>
          <briefdescription><para>ENVE flat object (ground) </para>
</briefdescription>
        </param>
        <param>
          <type>affine const &amp;</type>
          <declname>matrix</declname>
          <briefdescription><para>4x4 affine transformation matrix </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Update current shell position and find contact parameters (intersection with plane) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="526" column="5" bodyfile="src/enve_shell.cc" bodystart="973" bodyend="985"/>
      </memberdef>
      <memberdef kind="function" id="a00093_1a1a425eec93c459c7542b22b1c28c5417" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::print</definition>
        <argsstring>(out_stream &amp;os) const</argsstring>
        <name>print</name>
        <param>
          <type>out_stream &amp;</type>
          <declname>os</declname>
          <briefdescription><para>Output stream type </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Print contact parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="533" column="5" bodyfile="src/enve_shell.cc" bodystart="990" bodyend="1099"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="a00093_1abb6dc0591e20ced467d8327a84a3387d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shell::oversample</definition>
        <argsstring>(size_t o, size_t a, size_t b)</argsstring>
        <name>oversample</name>
        <param>
          <type>size_t</type>
          <declname>o</declname>
          <briefdescription><para>Rib index to be filled by oversampled data </para>
</briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>a</declname>
          <briefdescription><para>Rib index to be used to oversample (smaller) </para>
</briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>b</declname>
          <briefdescription><para>Rib index to be used to oversample (bigger) </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Perform one point sampling on a single triangle (line-triangle intersection) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="540" column="5" bodyfile="src/enve_shell.cc" bodystart="1104" bodyend="1122"/>
        <referencedby refid="a00093_1a27bbf4a9cd544259a4c53ef86a980c86" compoundref="a00032" startline="855" endline="968">setup</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1a3dd0ca32a087f60762b2e50c415eb36d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::samplingSingleTriangle</definition>
        <argsstring>(triangleground::vecptr const &amp;triangles_vec, point const &amp;origin, vec3 const &amp;direction, point &amp;point, vec3 &amp;normal, real &amp;friction) const</argsstring>
        <name>samplingSingleTriangle</name>
        <param>
          <type><ref refid="a00097_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> const &amp;</type>
          <declname>triangles_vec</declname>
          <briefdescription><para>Triangles list (with only one element!) </para>
</briefdescription>
        </param>
        <param>
          <type>point const &amp;</type>
          <declname>origin</declname>
          <briefdescription><para>Line sampling origin (shell local frame) </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 const &amp;</type>
          <declname>direction</declname>
          <briefdescription><para>Line sampling direction (shell local frame) </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Intersection point </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Intersected triangle normal </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>friction</declname>
          <briefdescription><para>Intersected triangle friction </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Perform one point sampling on a single triangle (line-triangle intersection) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="548" column="5" bodyfile="src/enve_shell.cc" bodystart="1127" bodyend="1149"/>
        <referencedby refid="a00093_1aae97f79ce2d00111b8153145f3128d38" compoundref="a00032" startline="1265" endline="1279">envelopSingleTriangle</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1ad0f63426dd56d48ee30c8262d034ee81" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::samplingPoint</definition>
        <argsstring>(triangleground::vecptr const &amp;triangles_vec, point const &amp;origin, vec3 const &amp;direction, point &amp;point, vec3 &amp;normal, real &amp;friction) const</argsstring>
        <name>samplingPoint</name>
        <param>
          <type><ref refid="a00097_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> const &amp;</type>
          <declname>triangles_vec</declname>
          <briefdescription><para>Triangles list </para>
</briefdescription>
        </param>
        <param>
          <type>point const &amp;</type>
          <declname>origin</declname>
          <briefdescription><para>Line sampling origin (shell local frame) </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 const &amp;</type>
          <declname>direction</declname>
          <briefdescription><para>Line sampling direction (shell local frame) </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Intersection point </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Intersected triangle normal </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>friction</declname>
          <briefdescription><para>Intersected triangle friction </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Perform one point sampling (line-triangle intersection) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="559" column="5" bodyfile="src/enve_shell.cc" bodystart="1154" bodyend="1218"/>
        <referencedby refid="a00093_1ad7570a667f28e75b254b00200dd1ae34" compoundref="a00032" startline="1400" endline="1411">projectContactPointOnMesh</referencedby>
        <referencedby refid="a00093_1a2cada05513ee0744000587966909ab7c" compoundref="a00032" startline="1223" endline="1260">samplingCross</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1a2cada05513ee0744000587966909ab7c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::samplingCross</definition>
        <argsstring>(triangleground::vecptr const &amp;triangles_vec, point const &amp;origin, vec3 const &amp;direction, real delta_x, real delta_y, point &amp;point, vec3 &amp;normal, real &amp;friction) const</argsstring>
        <name>samplingCross</name>
        <param>
          <type><ref refid="a00097_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> const &amp;</type>
          <declname>triangles_vec</declname>
          <briefdescription><para>Triangles list </para>
</briefdescription>
        </param>
        <param>
          <type>point const &amp;</type>
          <declname>origin</declname>
          <briefdescription><para>Line sampling origin (shell local frame) </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 const &amp;</type>
          <declname>direction</declname>
          <briefdescription><para>Line sampling direction (shell local frame) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>delta_x</declname>
          <briefdescription><para>Delta y </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>delta_y</declname>
          <briefdescription><para>Delta x </para>
</briefdescription>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>point</declname>
          <briefdescription><para>Local contact point </para>
</briefdescription>
        </param>
        <param>
          <type>vec3 &amp;</type>
          <declname>normal</declname>
          <briefdescription><para>Local contact normal </para>
</briefdescription>
        </param>
        <param>
          <type>real &amp;</type>
          <declname>friction</declname>
          <briefdescription><para>Local contact friction coefficient </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Perform cross points sampling. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="570" column="5" bodyfile="src/enve_shell.cc" bodystart="1223" bodyend="1260"/>
        <referencedby refid="a00093_1a95b37a8baf0bf781347170296f5484bd" compoundref="a00032" startline="1284" endline="1300">envelopLine</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1aae97f79ce2d00111b8153145f3128d38" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::envelopSingleTriangle</definition>
        <argsstring>(triangleground::vecptr const &amp;triangles_vec, size_t i)</argsstring>
        <name>envelopSingleTriangle</name>
        <param>
          <type><ref refid="a00097_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> const &amp;</type>
          <declname>triangles_vec</declname>
          <briefdescription><para>Triangles candidate list </para>
</briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Rib index (i-th rib) </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate i-th rib single triangle contact. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="583" column="5" bodyfile="src/enve_shell.cc" bodystart="1265" bodyend="1279"/>
        <referencedby refid="a00093_1a27bbf4a9cd544259a4c53ef86a980c86" compoundref="a00032" startline="855" endline="968">setup</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1a95b37a8baf0bf781347170296f5484bd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::envelopLine</definition>
        <argsstring>(triangleground::vecptr const &amp;triangles_vec, size_t i)</argsstring>
        <name>envelopLine</name>
        <param>
          <type><ref refid="a00097_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> const &amp;</type>
          <declname>triangles_vec</declname>
          <briefdescription><para>Triangles candidate list </para>
</briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Rib index (i-th rib) </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate i-th rib contact through lines intersection envelop model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="590" column="5" bodyfile="src/enve_shell.cc" bodystart="1284" bodyend="1300"/>
        <referencedby refid="a00093_1a27bbf4a9cd544259a4c53ef86a980c86" compoundref="a00032" startline="855" endline="968">setup</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1a1cd14845c1c2903eadb41d5a86a2627f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::envelopTriangle</definition>
        <argsstring>(triangleground::vecptr const &amp;triangles_vec, size_t i)</argsstring>
        <name>envelopTriangle</name>
        <param>
          <type><ref refid="a00097_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> const &amp;</type>
          <declname>triangles_vec</declname>
          <briefdescription><para>Triangles candidate list </para>
</briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Rib index (i-th rib) </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate i-th rib contact through triangles intersection envelop model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="597" column="5" bodyfile="src/enve_shell.cc" bodystart="1305" bodyend="1349"/>
        <referencedby refid="a00093_1a27bbf4a9cd544259a4c53ef86a980c86" compoundref="a00032" startline="855" endline="968">setup</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1a24e056a64b05e0072b08bd242f57af84" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::envelopPlane</definition>
        <argsstring>(ground::flat const &amp;ground, size_t i)</argsstring>
        <name>envelopPlane</name>
        <param>
          <type><ref refid="a00065" kindref="compound">ground::flat</ref> const &amp;</type>
          <declname>ground</declname>
          <briefdescription><para>Local flat ground object </para>
</briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <briefdescription><para>Rib index (i-th rib) </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Evaluate i-th rib contact through triangles intersection envelop model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="604" column="5" bodyfile="src/enve_shell.cc" bodystart="1354" bodyend="1379"/>
        <referencedby refid="a00093_1a5489eaf53c88ef1a622a91ffdde1e76f" compoundref="a00032" startline="973" endline="985">setup</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1a44604a738554f234df1d0af3ec157f96" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::projectContactPointOnFlat</definition>
        <argsstring>(ground::flat const &amp;ground, point const &amp;point_rib, vec3 const &amp;direction, size_t i, point &amp;point_out) const</argsstring>
        <name>projectContactPointOnFlat</name>
        <param>
          <type><ref refid="a00065" kindref="compound">ground::flat</ref> const &amp;</type>
          <declname>ground</declname>
        </param>
        <param>
          <type>point const &amp;</type>
          <declname>point_rib</declname>
        </param>
        <param>
          <type>vec3 const &amp;</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>point_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="611" column="5" bodyfile="src/enve_shell.cc" bodystart="1384" bodyend="1395"/>
        <referencedby refid="a00093_1a24e056a64b05e0072b08bd242f57af84" compoundref="a00032" startline="1354" endline="1379">envelopPlane</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00093_1ad7570a667f28e75b254b00200dd1ae34" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shell::projectContactPointOnMesh</definition>
        <argsstring>(triangleground::vecptr const &amp;triangles, point const &amp;point_rib, vec3 const &amp;direction, size_t i, point &amp;point_out) const</argsstring>
        <name>projectContactPointOnMesh</name>
        <param>
          <type><ref refid="a00097_1a1f4cea2747925d4b294879cdf2f50711" kindref="member">triangleground::vecptr</ref> const &amp;</type>
          <declname>triangles</declname>
        </param>
        <param>
          <type>point const &amp;</type>
          <declname>point_rib</declname>
        </param>
        <param>
          <type>vec3 const &amp;</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>point &amp;</type>
          <declname>point_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shell.hh" line="620" column="5" bodyfile="src/enve_shell.cc" bodystart="1400" bodyend="1411"/>
        <referencedby refid="a00093_1a95b37a8baf0bf781347170296f5484bd" compoundref="a00032" startline="1284" endline="1300">envelopLine</referencedby>
        <referencedby refid="a00093_1aae97f79ce2d00111b8153145f3128d38" compoundref="a00032" startline="1265" endline="1279">envelopSingleTriangle</referencedby>
        <referencedby refid="a00093_1a1cd14845c1c2903eadb41d5a86a2627f" compoundref="a00032" startline="1305" endline="1349">envelopTriangle</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for ENVE shell models. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/enve_shell.hh" line="70" column="3" bodyfile="include/enve_shell.hh" bodystart="71" bodyend="628"/>
    <listofallmembers>
      <member refid="a00093_1aa143ec0906a3edd9768da2aa67a8465d" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>bbox</name></member>
      <member refid="a00093_1a968cb22f2dddc6ed28d29fe61bfb9f25" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>checkWidthBound</name></member>
      <member refid="a00093_1a63165bc2945d92b1f78883bd0a6758da" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactDepthMesh</name></member>
      <member refid="a00093_1a32942c1f12b74509287a05e8aac89d30" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactDepthMesh</name></member>
      <member refid="a00093_1a34d335f73846fe7613dff3ec6952fc68" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactDepthMesh</name></member>
      <member refid="a00093_1ab52643e3a7adcc8f95bf597eda311d6a" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactDepthRib</name></member>
      <member refid="a00093_1a34cda3c55d1681e2445b8527e0531e15" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactDepthRib</name></member>
      <member refid="a00093_1a5a1d4ddc014a9f25e32c4c55795d5c0c" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactDepthRib</name></member>
      <member refid="a00093_1ac4a93448b8ca9cc276c82c33870f1f2c" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactFriction</name></member>
      <member refid="a00093_1a1b1657dc9797369757849522b24b77ca" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactFriction</name></member>
      <member refid="a00093_1ae1b1570b28c915ff559add95aebff315" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactFriction</name></member>
      <member refid="a00093_1ae5e77948a3b67e4d1456dd80fd6cff15" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactNormal</name></member>
      <member refid="a00093_1a3dc741308478849ef36b6b9622a48b62" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactNormal</name></member>
      <member refid="a00093_1a58b2d3b655d5959a02ddad029a7efe04" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactNormal</name></member>
      <member refid="a00093_1ac44ece18e8208d97b20979b06d4bea66" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointMesh</name></member>
      <member refid="a00093_1a83158705cc572a485e12b73f3bf2eb72" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointMesh</name></member>
      <member refid="a00093_1adf2db1cc963197db12b2d637d05cf263" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointMesh</name></member>
      <member refid="a00093_1a2e38dcc1707ca2aab5a6f215da1d8dc0" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointMeshAffine</name></member>
      <member refid="a00093_1a99272fa9ddd27a9c5ac800a53e991b24" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointMeshAffine</name></member>
      <member refid="a00093_1add2c531fcbc8c6fdf8797e4c2982898c" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointMeshAffine</name></member>
      <member refid="a00093_1a5434b33affdff6789869e2fcd4920592" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointRib</name></member>
      <member refid="a00093_1af1f59e6a2d84f7bdfcd221af4016d21f" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointRib</name></member>
      <member refid="a00093_1afb3c617e1c9a11200fa0c0108260d4f3" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointRib</name></member>
      <member refid="a00093_1ae83fb0823051949ea804a9734eaf3e6b" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointRibAffine</name></member>
      <member refid="a00093_1ab43e572d17b998381e15eaf20ef3b359" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointRibAffine</name></member>
      <member refid="a00093_1a7b337063c51e32f1455e339b53f11b87" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>contactPointRibAffine</name></member>
      <member refid="a00093_1a95b37a8baf0bf781347170296f5484bd" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>envelopLine</name></member>
      <member refid="a00093_1a24e056a64b05e0072b08bd242f57af84" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>envelopPlane</name></member>
      <member refid="a00093_1aae97f79ce2d00111b8153145f3128d38" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>envelopSingleTriangle</name></member>
      <member refid="a00093_1a1cd14845c1c2903eadb41d5a86a2627f" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>envelopTriangle</name></member>
      <member refid="a00093_1a3758f1248a4e9a9487682560d75ae823" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>eulerAngles</name></member>
      <member refid="a00093_1ad49487850eb0510d7b068f91501ca836" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>linear</name></member>
      <member refid="a00093_1a0fc8caf160157febbc5fa0ee0b4ea0ad" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_affine</name></member>
      <member refid="a00093_1a9d247a88263b13e385d787d5c9bdfe1b" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_bbox</name></member>
      <member refid="a00093_1ae737a63859493a25041d6d06429f9771" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_depth</name></member>
      <member refid="a00093_1a1bf84b5ec1fc8dcb5b8eafe65b2cfed3" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_friction</name></member>
      <member refid="a00093_1a2e436fcd9a55ce4f6b9a491eb04d2062" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_normal</name></member>
      <member refid="a00093_1ab4bde5e6f17b17e27cfc93b529780521" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_pointMesh</name></member>
      <member refid="a00093_1a9283c0c139904f54a0a5b2bdd72c7f48" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_pointRib</name></member>
      <member refid="a00093_1ac12fbcd8d579d4e0e6cb3744f27b3691" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_ribs</name></member>
      <member refid="a00093_1a442a1c35765c1b3c01a4e20772fddef9" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>m_shape</name></member>
      <member refid="a00093_1abb6dc0591e20ced467d8327a84a3387d" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>oversample</name></member>
      <member refid="a00093_1a1a425eec93c459c7542b22b1c28c5417" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>print</name></member>
      <member refid="a00093_1a44604a738554f234df1d0af3ec157f96" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>projectContactPointOnFlat</name></member>
      <member refid="a00093_1ad7570a667f28e75b254b00200dd1ae34" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>projectContactPointOnMesh</name></member>
      <member refid="a00093_1af27992d971057759d268f102975d62fb" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ptr</name></member>
      <member refid="a00093_1a34d0cda62f4f3f5ad7057222eed05fcf" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>relativeAngles</name></member>
      <member refid="a00093_1ae48557597d39b647eac55a03704bdfc3" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>relativeAngles</name></member>
      <member refid="a00093_1a23d2a9c7d4bc4b10558e05941582df2d" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>relativeAngles</name></member>
      <member refid="a00093_1af92ceac6e9c110d0a040a85d2c532f7a" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>reset</name></member>
      <member refid="a00093_1ad8a3d3f336041aae315b43022a7dbc3c" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ribCenter</name></member>
      <member refid="a00093_1aadb3a2be11b94f1273596ed709fc9e23" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ribRadius</name></member>
      <member refid="a00093_1a43a508efabf7462e0fd13262a39a47b4" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>ribWidth</name></member>
      <member refid="a00093_1a25ad9b63a2daea89ab6b17e949028d8d" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>rotate</name></member>
      <member refid="a00093_1a5ac7dbea127c06ee266b08053d775387" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>rotate</name></member>
      <member refid="a00093_1acd3e5c07070586785043b991f4ebcd3b" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>rotation</name></member>
      <member refid="a00093_1a2cada05513ee0744000587966909ab7c" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>samplingCross</name></member>
      <member refid="a00093_1ad0f63426dd56d48ee30c8262d034ee81" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>samplingPoint</name></member>
      <member refid="a00093_1a3dd0ca32a087f60762b2e50c415eb36d" prot="private" virt="non-virtual"><scope>enve::shell</scope><name>samplingSingleTriangle</name></member>
      <member refid="a00093_1a27bbf4a9cd544259a4c53ef86a980c86" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>setup</name></member>
      <member refid="a00093_1a5489eaf53c88ef1a622a91ffdde1e76f" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>setup</name></member>
      <member refid="a00093_1a7840e1d408713ab4eb4b91e5c3912e07" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00093_1afda23b623e717fdd16126eb5de7685e0" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00093_1a6bb8ab8ef49bb6a0f1ca29e0314c974c" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00093_1a8d1fa93178d93b20d6175bf7cadde7b8" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00093_1a4e815a579f36a8918efc59ebff99c23b" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00093_1a58821a0d61cb1df8da61962c03ff462b" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00093_1ae5be566871a0e79aad7f487dfc893ab8" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>shell</name></member>
      <member refid="a00093_1aaeafa8ac9f588ebdf3f2b8722dde9290" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>size</name></member>
      <member refid="a00093_1a4bbb973b459c409e07100b9f526d31f2" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceAngle</name></member>
      <member refid="a00093_1a9ff4b3d279cf3bca199d71b6829bb10f" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceDerivative</name></member>
      <member refid="a00093_1ae545ab83f69df117efd3aefc98905b58" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceMaxRadius</name></member>
      <member refid="a00093_1a041572d89d883b768eb195b61775e99d" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceMaxWidth</name></member>
      <member refid="a00093_1afdf0e745ae4a5dbbc3daca2af53cd2d1" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceRadius</name></member>
      <member refid="a00093_1a72cfa8296a664a3d3b538f7c97f187a4" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceWidth</name></member>
      <member refid="a00093_1ad2581acf1804fe415a4253914d33b9d7" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceWidthLowerBound</name></member>
      <member refid="a00093_1ad46823bc50ac456ee220fab3bf62504a" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>surfaceWidthUpperBound</name></member>
      <member refid="a00093_1ab32cfff7bf657d5b613cb83048bbdd38" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>transform</name></member>
      <member refid="a00093_1a3e084b8c0d6e3ec682383545a61787af" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>transform</name></member>
      <member refid="a00093_1ab8206d37a830c82ad372d3276556630a" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>transformation</name></member>
      <member refid="a00093_1a812b5a7947d74eff88e5b9cfe24c9ef0" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>translate</name></member>
      <member refid="a00093_1a3d0282a1133a19e3e1ae06f91b35b194" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>translation</name></member>
      <member refid="a00093_1a2752d2f553b89f2b722c14f98380b025" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>updateBBox</name></member>
      <member refid="a00093_1a14b3fa61d852ebaabd3603818d74ca6a" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>vecptr</name></member>
      <member refid="a00093_1ad7868ccdd90b807c75684cb51c256d03" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>x</name></member>
      <member refid="a00093_1a1de4c83db18282e37892c7adb0224232" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>y</name></member>
      <member refid="a00093_1a79039f854236a5ae427da3f0868f988a" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>z</name></member>
      <member refid="a00093_1a9e3dfd623bc883cb0dbab5fdad026a26" prot="public" virt="non-virtual"><scope>enve::shell</scope><name>~shell</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
