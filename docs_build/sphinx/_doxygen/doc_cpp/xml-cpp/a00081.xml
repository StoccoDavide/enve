<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="a00081" kind="class" language="C++" prot="public">
    <compoundname>enve::polynom</compoundname>
    <basecompoundref refid="a00089" prot="public" virt="non-virtual">enve::shape</basecompoundref>
    <includes refid="a00020" local="no">enve_polynom.hh</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="a00081_1a776a2cb3bbf79305d3bda68023bebba8" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="a00081" kindref="compound">polynom</ref> const  &gt;</type>
        <definition>typedef std::shared_ptr&lt;polynom const&gt; enve::polynom::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <briefdescription>
<para>Pointer to polynom object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_polynom.hh" line="57" column="29" bodyfile="include/enve_polynom.hh" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="a00081_1a4078b519b94f86d051aa7d4bd737d163" prot="public" static="no">
        <type>std::vector&lt; <ref refid="a00081_1a776a2cb3bbf79305d3bda68023bebba8" kindref="member">polynom::ptr</ref> &gt;</type>
        <definition>typedef std::vector&lt;polynom::ptr&gt; enve::polynom::vecptr</definition>
        <argsstring></argsstring>
        <name>vecptr</name>
        <briefdescription>
<para>Vector of pointers to polynom objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_polynom.hh" line="58" column="30" bodyfile="include/enve_polynom.hh" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="a00081_1a265dbad61acec6f5c65c65d17fc66d34" prot="private" static="no" mutable="no">
        <type>vecN</type>
        <definition>vecN enve::polynom::m_coeffs</definition>
        <argsstring></argsstring>
        <name>m_coeffs</name>
        <briefdescription>
<para>Polynomial regression coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_polynom.hh" line="61" column="10" bodyfile="include/enve_polynom.hh" bodystart="61" bodyend="-1"/>
        <referencedby refid="a00081_1a922eaa302e86ba235161fbad3186293f" compoundref="a00050" startline="81" endline="86">copy</referencedby>
        <referencedby refid="a00081_1a26b1cddc339c7e00ca0f1492722d38df" compoundref="a00050" startline="160" endline="185">fit</referencedby>
        <referencedby refid="a00081_1a2f8207c750bc8f09c136eeb878090889" compoundref="a00050" startline="91" endline="101">isApprox</referencedby>
        <referencedby refid="a00081_1a7fee7942fdfc90caa85bce08663e9489" compoundref="a00050" startline="146" endline="155">print</referencedby>
        <referencedby refid="a00081_1a34738229882daa930770c4863443b490" compoundref="a00050" startline="120" endline="130">surfaceDerivative</referencedby>
        <referencedby refid="a00081_1a84656dbac8235f5dd9c4663c2db51d98" compoundref="a00050" startline="106" endline="115">surfaceRadius</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00089_1a60dd88c2bd58b71d534cc92d6d5f56f9" prot="private" static="no" mutable="no">
        <type>real</type>
        <definition>real enve::shape::m_maxR</definition>
        <argsstring></argsstring>
        <name>m_maxR</name>
        <initializer>= QUIET_NAN</initializer>
        <briefdescription>
<para>Maximum surface maximum radius (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shape.hh" line="59" column="10" bodyfile="include/enve_shape.hh" bodystart="59" bodyend="-1"/>
        <referencedby refid="a00089_1a01bf679dac42a6a354f3ec1327402bef" compoundref="a00047" startline="91" endline="97">enve::shape::copy</referencedby>
        <referencedby refid="a00089_1aa509c8fa017ef7500110beae8289b514" compoundref="a00047" startline="102" endline="110">enve::shape::isApprox</referencedby>
        <referencedby refid="a00089_1a25fb65951d112f9f4595b07c8c8b3630" compoundref="a00047" startline="203" endline="211">enve::shape::print</referencedby>
        <referencedby refid="a00089_1a451509b55546ad54f4d816786554f79e" compoundref="a00047" startline="70" endline="86">enve::shape::shape</referencedby>
        <referencedby refid="a00089_1ac85f00278892b2330e9325209a16e478" compoundref="a00047" startline="115" endline="119">enve::shape::surfaceMaxRadius</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00089_1aa637dc06ac5012754a88ff504b55127e" prot="private" static="no" mutable="no">
        <type>real</type>
        <definition>real enve::shape::m_minY</definition>
        <argsstring></argsstring>
        <name>m_minY</name>
        <initializer>= QUIET_NAN</initializer>
        <briefdescription>
<para>Minimum surface bound on y axis (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shape.hh" line="60" column="10" bodyfile="include/enve_shape.hh" bodystart="60" bodyend="-1"/>
        <referencedby refid="a00089_1a21cf4f513087dd2abb003fec5d92c1d1" compoundref="a00047" startline="185" endline="198">enve::shape::checkWidthBound</referencedby>
        <referencedby refid="a00089_1a01bf679dac42a6a354f3ec1327402bef" compoundref="a00047" startline="91" endline="97">enve::shape::copy</referencedby>
        <referencedby refid="a00089_1aa509c8fa017ef7500110beae8289b514" compoundref="a00047" startline="102" endline="110">enve::shape::isApprox</referencedby>
        <referencedby refid="a00089_1a25fb65951d112f9f4595b07c8c8b3630" compoundref="a00047" startline="203" endline="211">enve::shape::print</referencedby>
        <referencedby refid="a00089_1a451509b55546ad54f4d816786554f79e" compoundref="a00047" startline="70" endline="86">enve::shape::shape</referencedby>
        <referencedby refid="a00089_1a84f2e4ba9b2d14b40c28c13808f52b0b" compoundref="a00047" startline="132" endline="136">enve::shape::surfaceMaxWidth</referencedby>
        <referencedby refid="a00089_1afa694bcea531f52cbc33c4586202e1a8" compoundref="a00047" startline="175" endline="180">enve::shape::surfaceWidth</referencedby>
        <referencedby refid="a00089_1a2d34c12f16852f76da529c00abc9d4a6" compoundref="a00047" startline="141" endline="145">enve::shape::surfaceWidthLowerBound</referencedby>
      </memberdef>
      <memberdef kind="variable" id="a00089_1a6bf4c2c1ef6049a4a5748cc1e64497b6" prot="private" static="no" mutable="no">
        <type>real</type>
        <definition>real enve::shape::m_maxY</definition>
        <argsstring></argsstring>
        <name>m_maxY</name>
        <initializer>= QUIET_NAN</initializer>
        <briefdescription>
<para>Maximum surface bound on y axis (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shape.hh" line="61" column="10" bodyfile="include/enve_shape.hh" bodystart="61" bodyend="-1"/>
        <referencedby refid="a00089_1a21cf4f513087dd2abb003fec5d92c1d1" compoundref="a00047" startline="185" endline="198">enve::shape::checkWidthBound</referencedby>
        <referencedby refid="a00089_1a01bf679dac42a6a354f3ec1327402bef" compoundref="a00047" startline="91" endline="97">enve::shape::copy</referencedby>
        <referencedby refid="a00089_1aa509c8fa017ef7500110beae8289b514" compoundref="a00047" startline="102" endline="110">enve::shape::isApprox</referencedby>
        <referencedby refid="a00089_1a25fb65951d112f9f4595b07c8c8b3630" compoundref="a00047" startline="203" endline="211">enve::shape::print</referencedby>
        <referencedby refid="a00089_1a451509b55546ad54f4d816786554f79e" compoundref="a00047" startline="70" endline="86">enve::shape::shape</referencedby>
        <referencedby refid="a00089_1a84f2e4ba9b2d14b40c28c13808f52b0b" compoundref="a00047" startline="132" endline="136">enve::shape::surfaceMaxWidth</referencedby>
        <referencedby refid="a00089_1afa694bcea531f52cbc33c4586202e1a8" compoundref="a00047" startline="175" endline="180">enve::shape::surfaceWidth</referencedby>
        <referencedby refid="a00089_1aa55f0ba9ddef8f1dca8e7ee13726c5e0" compoundref="a00047" startline="158" endline="162">enve::shape::surfaceWidthUpperBound</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="a00081_1a81e127b0bbbf9947cd501dbf23d85644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::polynom::~polynom</definition>
        <argsstring>(void)</argsstring>
        <name>~polynom</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Polynom class destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_polynom.hh" line="65" column="5" bodyfile="src/enve_polynom.cc" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1a90ca7852ab4f882feeb47ced5093e1ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::polynom::polynom</definition>
        <argsstring>(polynom const &amp;)=default</argsstring>
        <name>polynom</name>
        <param>
          <type><ref refid="a00081" kindref="compound">polynom</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Polynom copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_polynom.hh" line="68" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1aa0b8e640473937de3c34aca49a022c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::polynom::polynom</definition>
        <argsstring>(polynom &amp;&amp;)=default</argsstring>
        <name>polynom</name>
        <param>
          <type><ref refid="a00081" kindref="compound">polynom</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Polynom move constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_polynom.hh" line="71" column="5"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1adbec97c758bb7cbc7bd619afdaaa26af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::polynom::polynom</definition>
        <argsstring>(void)</argsstring>
        <name>polynom</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Polynom class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_polynom.hh" line="74" column="5" bodyfile="src/enve_polynom.cc" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1a7a3869be304764047aa004c9ab04e287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::polynom::polynom</definition>
        <argsstring>(vecN coeffs, real maxR, real minY, real maxY)</argsstring>
        <name>polynom</name>
        <param>
          <type>vecN</type>
          <declname>coeffs</declname>
          <briefdescription><para>Polynomial regression coefficients </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>maxR</declname>
          <briefdescription><para>Maximum surface maximum radius (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>minY</declname>
          <briefdescription><para>Minimum surface bound on y axis (m) </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>maxY</declname>
          <briefdescription><para>Maximum surface bound on y axis (m) </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Polynom class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_polynom.hh" line="77" column="5" bodyfile="src/enve_polynom.cc" bodystart="56" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1ab74e32b5826c77d7bd7d5ac351419852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>enve::polynom::polynom</definition>
        <argsstring>(vecN const &amp;dataR, vecN const &amp;dataY, size_t order, real tolerance=EPSILON_MEDIUM)</argsstring>
        <name>polynom</name>
        <param>
          <type>vecN const &amp;</type>
          <declname>dataR</declname>
          <briefdescription><para>Vector of radius data (m) </para>
</briefdescription>
        </param>
        <param>
          <type>vecN const &amp;</type>
          <declname>dataY</declname>
          <briefdescription><para>Vector of y data (m) </para>
</briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>order</declname>
          <briefdescription><para>Polynom order </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_MEDIUM</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Polynom class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_polynom.hh" line="85" column="5" bodyfile="src/enve_polynom.cc" bodystart="68" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1a922eaa302e86ba235161fbad3186293f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::polynom::copy</definition>
        <argsstring>(polynom const &amp;polynom_in)</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="a00081" kindref="compound">polynom</ref> const &amp;</type>
          <declname>polynom_in</declname>
          <briefdescription><para>Polynom object to be copied </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Copy polynom object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_polynom.hh" line="94" column="5" bodyfile="src/enve_polynom.cc" bodystart="81" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1a2f8207c750bc8f09c136eeb878090889" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::polynom::isApprox</definition>
        <argsstring>(polynom const &amp;polynom_in, real tolerance=EPSILON_LOW) const</argsstring>
        <name>isApprox</name>
        <param>
          <type><ref refid="a00081" kindref="compound">polynom</ref> const &amp;</type>
          <declname>polynom_in</declname>
          <briefdescription><para>Input object </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_LOW</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if objects are (almost) equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_polynom.hh" line="100" column="5" bodyfile="src/enve_polynom.cc" bodystart="91" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1a84656dbac8235f5dd9c4663c2db51d98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>real</type>
        <definition>real enve::polynom::surfaceRadius</definition>
        <argsstring>(real y) const override</argsstring>
        <name>surfaceRadius</name>
        <reimplements refid="a00089_1aa66cc1f3a1f9fea9185f274015900da3">surfaceRadius</reimplements>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get surface of revolution rib radius at y axis coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_polynom.hh" line="107" column="5" bodyfile="src/enve_polynom.cc" bodystart="106" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1a34738229882daa930770c4863443b490" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>real</type>
        <definition>real enve::polynom::surfaceDerivative</definition>
        <argsstring>(real y, real tolerance=EPSILON_MEDIUM) const override</argsstring>
        <name>surfaceDerivative</name>
        <reimplements refid="a00089_1aa6e1551c4b716b5fd41e91c83ca2abd3">surfaceDerivative</reimplements>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_MEDIUM</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get surface of revolution rib first derivative with respect to y coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_polynom.hh" line="113" column="5" bodyfile="src/enve_polynom.cc" bodystart="120" bodyend="130"/>
        <referencedby refid="a00081_1a2a80ac227415844e8835f2d1fb6a66e8" compoundref="a00050" startline="135" endline="141">surfaceAngle</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00081_1a2a80ac227415844e8835f2d1fb6a66e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>real</type>
        <definition>real enve::polynom::surfaceAngle</definition>
        <argsstring>(real y, real tolerance=EPSILON_MEDIUM) const override</argsstring>
        <name>surfaceAngle</name>
        <reimplements refid="a00089_1a42c8dc5ce2976b3e078f696b042c9f32">surfaceAngle</reimplements>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_MEDIUM</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get surface of revolution rib angle with respect to y axis (rad) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_polynom.hh" line="120" column="5" bodyfile="src/enve_polynom.cc" bodystart="135" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1a7fee7942fdfc90caa85bce08663e9489" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::polynom::print</definition>
        <argsstring>(out_stream &amp;os) const</argsstring>
        <name>print</name>
        <param>
          <type>out_stream &amp;</type>
          <declname>os</declname>
          <briefdescription><para>Output stream type </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Print surface shape data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_polynom.hh" line="127" column="5" bodyfile="src/enve_polynom.cc" bodystart="146" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="a00081_1a26b1cddc339c7e00ca0f1492722d38df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::polynom::fit</definition>
        <argsstring>(vecN dataR, vecN dataY, size_t order, real tolerance=EPSILON_MEDIUM)</argsstring>
        <name>fit</name>
        <param>
          <type>vecN</type>
          <declname>dataR</declname>
          <briefdescription><para>Vector of radius data (m) </para>
</briefdescription>
        </param>
        <param>
          <type>vecN</type>
          <declname>dataY</declname>
          <briefdescription><para>Vector of y data (m) </para>
</briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>order</declname>
          <briefdescription><para>Polynom order </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_MEDIUM</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_polynom.hh" line="132" column="5" bodyfile="src/enve_polynom.cc" bodystart="160" bodyend="185"/>
        <referencedby refid="a00081_1ab74e32b5826c77d7bd7d5ac351419852" compoundref="a00050" startline="68" endline="76">polynom</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00089_1a01bf679dac42a6a354f3ec1327402bef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enve::shape::copy</definition>
        <argsstring>(shape const &amp;shape_in)</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="a00089" kindref="compound">shape</ref> const &amp;</type>
          <declname>shape_in</declname>
          <briefdescription><para>Shape object to be copied </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Copy shape object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shape.hh" line="85" column="5" bodyfile="src/enve_shape.cc" bodystart="91" bodyend="97"/>
        <referencedby refid="a00069_1ab541910296cb5b34e16e314fa129df3d" compoundref="a00041" startline="75" endline="84">enve::hyperellipse::copy</referencedby>
        <referencedby refid="a00077_1a028b84139da3daf212ca5dabb484d85f" compoundref="a00038" startline="61" endline="67">enve::points::copy</referencedby>
        <referencedby refid="a00081_1a922eaa302e86ba235161fbad3186293f" compoundref="a00050" startline="81" endline="86">copy</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00089_1aa509c8fa017ef7500110beae8289b514" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shape::isApprox</definition>
        <argsstring>(shape const &amp;shape_in, real tolerance=EPSILON_LOW) const</argsstring>
        <name>isApprox</name>
        <param>
          <type><ref refid="a00089" kindref="compound">shape</ref> const &amp;</type>
          <declname>shape_in</declname>
          <briefdescription><para>Shape object </para>
</briefdescription>
        </param>
        <param>
          <type>real</type>
          <declname>tolerance</declname>
          <defval>EPSILON_LOW</defval>
          <briefdescription><para>Tolerance </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Check if objects are (almost) equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shape.hh" line="91" column="5" bodyfile="src/enve_shape.cc" bodystart="102" bodyend="110"/>
        <referencedby refid="a00069_1a468ee3cb68db630cbf8bda8047f73da3" compoundref="a00041" startline="89" endline="100">enve::hyperellipse::isApprox</referencedby>
        <referencedby refid="a00077_1a68336282aebd2b9df6016de9636a32de" compoundref="a00038" startline="72" endline="83">enve::points::isApprox</referencedby>
        <referencedby refid="a00081_1a2f8207c750bc8f09c136eeb878090889" compoundref="a00050" startline="91" endline="101">isApprox</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00089_1ac85f00278892b2330e9325209a16e478" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real const &amp;</type>
        <definition>real const  &amp; enve::shape::surfaceMaxRadius</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceMaxRadius</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get surface maximum radius const reference (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shape.hh" line="98" column="5" bodyfile="src/enve_shape.cc" bodystart="115" bodyend="119"/>
        <referencedby refid="a00069_1aa04e522a0f22486086184c7da6b7435d" compoundref="a00041" startline="190" endline="195">enve::hyperellipse::updateBounds</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00089_1a3a2d0b37330222933ceb591d1c80c82e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>real &amp;</type>
        <definition>real &amp; enve::shape::surfaceMaxRadius</definition>
        <argsstring>(void)</argsstring>
        <name>surfaceMaxRadius</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get surface maximum radius on reference (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shape.hh" line="102" column="5" bodyfile="src/enve_shape.cc" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="a00089_1a84f2e4ba9b2d14b40c28c13808f52b0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shape::surfaceMaxWidth</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceMaxWidth</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get surface maximum width on y axis (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shape.hh" line="106" column="5" bodyfile="src/enve_shape.cc" bodystart="132" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="a00089_1a2d34c12f16852f76da529c00abc9d4a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real const &amp;</type>
        <definition>real const  &amp; enve::shape::surfaceWidthLowerBound</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceWidthLowerBound</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get surface minimum width const reference (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shape.hh" line="110" column="5" bodyfile="src/enve_shape.cc" bodystart="141" bodyend="145"/>
        <referencedby refid="a00069_1aa04e522a0f22486086184c7da6b7435d" compoundref="a00041" startline="190" endline="195">enve::hyperellipse::updateBounds</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00089_1abcbef9ab73ba72c1ab7723f7026371b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>real &amp;</type>
        <definition>real &amp; enve::shape::surfaceWidthLowerBound</definition>
        <argsstring>(void)</argsstring>
        <name>surfaceWidthLowerBound</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get surface minimum width on reference (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shape.hh" line="114" column="5" bodyfile="src/enve_shape.cc" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="a00089_1aa55f0ba9ddef8f1dca8e7ee13726c5e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real const &amp;</type>
        <definition>real const  &amp; enve::shape::surfaceWidthUpperBound</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceWidthUpperBound</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get surface maximum width const reference (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shape.hh" line="118" column="5" bodyfile="src/enve_shape.cc" bodystart="158" bodyend="162"/>
        <referencedby refid="a00069_1aa04e522a0f22486086184c7da6b7435d" compoundref="a00041" startline="190" endline="195">enve::hyperellipse::updateBounds</referencedby>
      </memberdef>
      <memberdef kind="function" id="a00089_1a968a6c23bd4c145ca4fb14be213d374c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>real &amp;</type>
        <definition>real &amp; enve::shape::surfaceWidthUpperBound</definition>
        <argsstring>(void)</argsstring>
        <name>surfaceWidthUpperBound</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get surface maximum width on reference (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shape.hh" line="122" column="5" bodyfile="src/enve_shape.cc" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="a00089_1afa694bcea531f52cbc33c4586202e1a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>real</type>
        <definition>real enve::shape::surfaceWidth</definition>
        <argsstring>(void) const</argsstring>
        <name>surfaceWidth</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get surface width (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shape.hh" line="126" column="5" bodyfile="src/enve_shape.cc" bodystart="175" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="a00089_1a21cf4f513087dd2abb003fec5d92c1d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool enve::shape::checkWidthBound</definition>
        <argsstring>(real y) const</argsstring>
        <name>checkWidthBound</name>
        <param>
          <type>real</type>
          <declname>y</declname>
          <briefdescription><para>Coordinate of y axis </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Get surface maximum width on reference (m) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/enve_shape.hh" line="130" column="5" bodyfile="src/enve_shape.cc" bodystart="185" bodyend="198"/>
        <referencedby refid="a00077_1af34877c458c34b5090c7bc22b00eb6b9" compoundref="a00038" startline="169" endline="180">enve::points::lowerBound</referencedby>
        <referencedby refid="a00069_1ad377d4618e67f96ceaa4a16047e86898" compoundref="a00041" startline="213" endline="231">enve::hyperellipse::surfaceDerivative</referencedby>
        <referencedby refid="a00077_1aeae1cd947511843588bed9cc34e05fac" compoundref="a00038" startline="213" endline="222">enve::points::surfaceDerivative</referencedby>
        <referencedby refid="a00081_1a34738229882daa930770c4863443b490" compoundref="a00050" startline="120" endline="130">surfaceDerivative</referencedby>
        <referencedby refid="a00069_1ac179ee99fb621153a921271df6748fe3" compoundref="a00041" startline="200" endline="208">enve::hyperellipse::surfaceRadius</referencedby>
        <referencedby refid="a00077_1a1c8e9c0f5aa2253f82b789115d656d1d" compoundref="a00038" startline="201" endline="208">enve::points::surfaceRadius</referencedby>
        <referencedby refid="a00081_1a84656dbac8235f5dd9c4663c2db51d98" compoundref="a00050" startline="106" endline="115">surfaceRadius</referencedby>
        <referencedby refid="a00077_1ae88997a5bf97baaaf3ae253f9106aab5" compoundref="a00038" startline="185" endline="196">enve::points::upperBound</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Polynomial section shape. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>enve::polynom</label>
        <link refid="a00081"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>enve::shape</label>
        <link refid="a00089"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>enve::polynom</label>
        <link refid="a00081"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>enve::shape</label>
        <link refid="a00089"/>
      </node>
    </collaborationgraph>
    <location file="include/enve_polynom.hh" line="54" column="3" bodyfile="include/enve_polynom.hh" bodystart="55" bodyend="139"/>
    <listofallmembers>
      <member refid="a00089_1a21cf4f513087dd2abb003fec5d92c1d1" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>checkWidthBound</name></member>
      <member refid="a00081_1a922eaa302e86ba235161fbad3186293f" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>copy</name></member>
      <member refid="a00089_1a01bf679dac42a6a354f3ec1327402bef" prot="public" virt="non-virtual" ambiguityscope="enve::shape::"><scope>enve::polynom</scope><name>copy</name></member>
      <member refid="a00081_1a26b1cddc339c7e00ca0f1492722d38df" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>fit</name></member>
      <member refid="a00081_1a2f8207c750bc8f09c136eeb878090889" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>isApprox</name></member>
      <member refid="a00089_1aa509c8fa017ef7500110beae8289b514" prot="public" virt="non-virtual" ambiguityscope="enve::shape::"><scope>enve::polynom</scope><name>isApprox</name></member>
      <member refid="a00081_1a265dbad61acec6f5c65c65d17fc66d34" prot="private" virt="non-virtual"><scope>enve::polynom</scope><name>m_coeffs</name></member>
      <member refid="a00089_1a60dd88c2bd58b71d534cc92d6d5f56f9" prot="private" virt="non-virtual"><scope>enve::polynom</scope><name>m_maxR</name></member>
      <member refid="a00089_1a6bf4c2c1ef6049a4a5748cc1e64497b6" prot="private" virt="non-virtual"><scope>enve::polynom</scope><name>m_maxY</name></member>
      <member refid="a00089_1aa637dc06ac5012754a88ff504b55127e" prot="private" virt="non-virtual"><scope>enve::polynom</scope><name>m_minY</name></member>
      <member refid="a00081_1a90ca7852ab4f882feeb47ced5093e1ce" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>polynom</name></member>
      <member refid="a00081_1aa0b8e640473937de3c34aca49a022c62" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>polynom</name></member>
      <member refid="a00081_1adbec97c758bb7cbc7bd619afdaaa26af" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>polynom</name></member>
      <member refid="a00081_1a7a3869be304764047aa004c9ab04e287" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>polynom</name></member>
      <member refid="a00081_1ab74e32b5826c77d7bd7d5ac351419852" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>polynom</name></member>
      <member refid="a00081_1a7fee7942fdfc90caa85bce08663e9489" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>print</name></member>
      <member refid="a00081_1a776a2cb3bbf79305d3bda68023bebba8" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>ptr</name></member>
      <member refid="a00089_1ad73f91566c660897b63fa840f9a78412" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>shape</name></member>
      <member refid="a00089_1a1df9aab204c0a93923c233ccf0bfd54c" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>shape</name></member>
      <member refid="a00089_1a451509b55546ad54f4d816786554f79e" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>shape</name></member>
      <member refid="a00081_1a2a80ac227415844e8835f2d1fb6a66e8" prot="public" virt="virtual"><scope>enve::polynom</scope><name>surfaceAngle</name></member>
      <member refid="a00081_1a34738229882daa930770c4863443b490" prot="public" virt="virtual"><scope>enve::polynom</scope><name>surfaceDerivative</name></member>
      <member refid="a00089_1ac85f00278892b2330e9325209a16e478" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>surfaceMaxRadius</name></member>
      <member refid="a00089_1a3a2d0b37330222933ceb591d1c80c82e" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>surfaceMaxRadius</name></member>
      <member refid="a00089_1a84f2e4ba9b2d14b40c28c13808f52b0b" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>surfaceMaxWidth</name></member>
      <member refid="a00081_1a84656dbac8235f5dd9c4663c2db51d98" prot="public" virt="virtual"><scope>enve::polynom</scope><name>surfaceRadius</name></member>
      <member refid="a00089_1afa694bcea531f52cbc33c4586202e1a8" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>surfaceWidth</name></member>
      <member refid="a00089_1a2d34c12f16852f76da529c00abc9d4a6" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>surfaceWidthLowerBound</name></member>
      <member refid="a00089_1abcbef9ab73ba72c1ab7723f7026371b7" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>surfaceWidthLowerBound</name></member>
      <member refid="a00089_1aa55f0ba9ddef8f1dca8e7ee13726c5e0" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>surfaceWidthUpperBound</name></member>
      <member refid="a00089_1a968a6c23bd4c145ca4fb14be213d374c" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>surfaceWidthUpperBound</name></member>
      <member refid="a00081_1a4078b519b94f86d051aa7d4bd737d163" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>vecptr</name></member>
      <member refid="a00081_1a81e127b0bbbf9947cd501dbf23d85644" prot="public" virt="non-virtual"><scope>enve::polynom</scope><name>~polynom</name></member>
      <member refid="a00089_1acecd8531fa8ba0ffbc75d6234140c6a1" prot="public" virt="virtual"><scope>enve::polynom</scope><name>~shape</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
